<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:modeler="http://camunda.org/schema/modeler/1.0" id="Definitions_18kgs0k" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="5.30.0" modeler:executionPlatform="Camunda Platform" modeler:executionPlatformVersion="7.18.0">
  <bpmn:process id="InterventionDMTP" isExecutable="true">
    <bpmn:startEvent id="startSubscriptionDMTPProcess">
      <bpmn:outgoing>Flow_0geoeu7</bpmn:outgoing>
      <bpmn:messageEventDefinition id="MessageEventDefinition_132vp1a" messageRef="Message_1rta7b9" />
    </bpmn:startEvent>
    <bpmn:serviceTask id="Activity_00e1wv8" name="get keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/auth/realms/'+execution.getVariable('realm')+'/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0geoeu7</bpmn:incoming>
      <bpmn:outgoing>Flow_0waf57n</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="Gateway_07uk4ov">
      <bpmn:incoming>Flow_08coukg</bpmn:incoming>
      <bpmn:outgoing>Flow_0las36h</bpmn:outgoing>
      <bpmn:outgoing>Flow_0x0cx0r</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:subProcess id="Activity_1k5weqx" triggeredByEvent="true">
      <bpmn:startEvent id="Event_0ojpmfh">
        <bpmn:outgoing>Flow_1h3nzpr</bpmn:outgoing>
        <bpmn:errorEventDefinition id="ErrorEventDefinition_0y3rvsf" errorRef="Error_1870c31" camunda:errorMessageVariable="errorTaskId" />
      </bpmn:startEvent>
      <bpmn:userTask id="Activity_0dz9j3o" name="Review Task">
        <bpmn:incoming>Flow_0hlgul9</bpmn:incoming>
        <bpmn:outgoing>Flow_0v8co1n</bpmn:outgoing>
      </bpmn:userTask>
      <bpmn:endEvent id="Event_1m1enul">
        <bpmn:incoming>Flow_1oc5gyu</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:scriptTask id="Activity_0rnhgxt" name="Return to Last Task" camunda:asyncBefore="true" scriptFormat="JavaScript">
        <bpmn:incoming>Flow_0v8co1n</bpmn:incoming>
        <bpmn:incoming>Flow_0axft79</bpmn:incoming>
        <bpmn:outgoing>Flow_1oc5gyu</bpmn:outgoing>
        <bpmn:script>print('Return to flow is Running');
var errorTaskId = execution.getVariable('errorTaskId');
if(errorTaskId == null){
print('No where to go back to');
}else{          execution.getProcessEngineServices().
getRuntimeService().createProcessInstanceModification(execution.getProcessInstanceId()).startBeforeActivity(errorTaskId).
execute();
}</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:exclusiveGateway id="Gateway_1o9jdhq">
        <bpmn:incoming>Flow_1h3nzpr</bpmn:incoming>
        <bpmn:outgoing>Flow_0hlgul9</bpmn:outgoing>
        <bpmn:outgoing>Flow_1npvnq6</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:serviceTask id="Activity_0e91049" name="Refresh Token">
        <bpmn:extensionElements>
          <camunda:connector>
            <camunda:inputOutput>
              <camunda:inputParameter name="url">
                <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/auth/realms/'+execution.getVariable('realm')+'/protocol/openid-connect/token'</camunda:script>
              </camunda:inputParameter>
              <camunda:inputParameter name="method">POST</camunda:inputParameter>
              <camunda:inputParameter name="headers">
                <camunda:map>
                  <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                  <camunda:entry key="Accept">application/json</camunda:entry>
                  <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
                </camunda:map>
              </camunda:inputParameter>
              <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
              <camunda:outputParameter name="Output_1b9kukr">
                <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
              </camunda:outputParameter>
            </camunda:inputOutput>
            <camunda:connectorId>http-connector</camunda:connectorId>
          </camunda:connector>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_1npvnq6</bpmn:incoming>
        <bpmn:outgoing>Flow_0axft79</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_1h3nzpr" sourceRef="Event_0ojpmfh" targetRef="Gateway_1o9jdhq" />
      <bpmn:sequenceFlow id="Flow_0hlgul9" sourceRef="Gateway_1o9jdhq" targetRef="Activity_0dz9j3o">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode != 401 &amp;&amp; httpCode != 302 }</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_0v8co1n" sourceRef="Activity_0dz9j3o" targetRef="Activity_0rnhgxt" />
      <bpmn:sequenceFlow id="Flow_1oc5gyu" sourceRef="Activity_0rnhgxt" targetRef="Event_1m1enul" />
      <bpmn:sequenceFlow id="Flow_0axft79" sourceRef="Activity_0e91049" targetRef="Activity_0rnhgxt" />
      <bpmn:sequenceFlow id="Flow_1npvnq6" sourceRef="Gateway_1o9jdhq" targetRef="Activity_0e91049">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode == 401 || httpCode == 302 }</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
    </bpmn:subProcess>
    <bpmn:serviceTask id="Activity_0tgyz32" name="create intevention (A planifier)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
url_tb+'/api/v1/intervention/create';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var contract = JSON.parse(execution.getVariable('contract'));
var requestBody = "{\"interventionType\":{\"interventionTypeId\":222, \"interventionTypeLabel\":\"DMTP\"},\"interventionEventStatus\":{\"interventionEventStatusCode\":\"APL\"}}";
requestBody = JSON.parse(requestBody);
requestBody.contractDetails = JSON.parse(execution.getVariable('contract'));
requestBody.interventionNumber = execution.getVariable('interventionNumber');
requestBody.address = JSON.parse(execution.getVariable('address'));
requestBody.afterSalesDescription = execution.getVariable('afterSalesDescription');
requestBody.devices = JSON.parse(execution.getVariable('devices'));
print(JSON.stringify(requestBody));
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('create intevention (A planifier) api');
var resp = connector.getVariable('response')
print('create intevention (A planifier): ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1icsnea</bpmn:incoming>
      <bpmn:outgoing>Flow_1grhm80</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1m3d5mw" name="check interventions by contract and status = TER and type = SS exists">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
var contractNumber = execution.getVariable('contractNumber');
url_tb+'/api/v1/intervention/exists/bystatusesandtype/'+contractNumber</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">GET</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">var resp = connector.getVariable('response')
print('get interventions by contract and status TER and type SS: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode ' + respStatusCode);

response = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('isInterventionExist',response);


var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0las36h</bpmn:incoming>
      <bpmn:outgoing>Flow_1yg202c</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="Gateway_03m7l78">
      <bpmn:incoming>Flow_1yg202c</bpmn:incoming>
      <bpmn:outgoing>Flow_1icsnea</bpmn:outgoing>
      <bpmn:outgoing>Flow_07jomtf</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:scriptTask id="Activity_08div8g" name="log error" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_07jomtf</bpmn:incoming>
      <bpmn:outgoing>Flow_0gyb43s</bpmn:outgoing>
      <bpmn:script>print('Contrat existe déjà avec une/des intervention(s) non TERminèes');</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:endEvent id="Event_1kmarlw">
      <bpmn:incoming>Flow_0gyb43s</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask id="Activity_1y0b68q" name="update intervention equipement">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
var contractNumber = execution.getVariable('contractNumber');
url_tb+'/api/v1/intervention/interventionEquipment/dmtp/update/'+contractNumber;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('update intervention equipement api');
var resp = connector.getVariable('response')
print('update intervention equipement: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0ep6lf5</bpmn:incoming>
      <bpmn:outgoing>Flow_06wbsun</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_0bjbpkc" name="check if contract exists">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_contract');
var contractNumber = execution.getVariable('contractNumber');
print('contract number = ');
print(contractNumber);
url_tb+'/api/v1/contract?code=' + contractNumber;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">GET</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">var resp = connector.getVariable('response')
print('resp check if contract exists: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

response = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();

if (respStatusCode == 200) {
	execution.setVariable('contract',resp);
	execution.setVariable('contractExist',true);
} else {
	execution.setVariable('contractExist',false);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0waf57n</bpmn:incoming>
      <bpmn:outgoing>Flow_08coukg</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:scriptTask id="Activity_1i4zxg6" name="log error" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0x0cx0r</bpmn:incoming>
      <bpmn:outgoing>Flow_18oymjk</bpmn:outgoing>
      <bpmn:script>print('Le Contrat existe pas !');</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:endEvent id="Event_0osjzef">
      <bpmn:incoming>Flow_18oymjk</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask id="Activity_1ucax0b" name="send intervention to op-planner">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
url_tb+'/api/v1/intervention/planner/change';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var contract = JSON.parse(execution.getVariable('contract'));
var requestBody = "{\"interventionType\":{\"interventionTypeId\":222, \"interventionTypeLabel\":\"DMTP\"},\"interventionEventStatus\":{\"interventionEventStatusCode\":\"APL\"}}";
requestBody = JSON.parse(requestBody);
requestBody.contractDetails = JSON.parse(execution.getVariable('contract'));
requestBody.interventionNumber = execution.getVariable('interventionNumber');
requestBody.address = JSON.parse(execution.getVariable('address'));
requestBody.afterSalesDescription = execution.getVariable('afterSalesDescription');
requestBody.devices = JSON.parse(execution.getVariable('devices'));
print(JSON.stringify(requestBody));
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('create intevention (A planifier) api');
var resp = connector.getVariable('response')
print('create intevention (A planifier): ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1grhm80</bpmn:incoming>
      <bpmn:outgoing>Flow_1dmn9a3</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0geoeu7" sourceRef="startSubscriptionDMTPProcess" targetRef="Activity_00e1wv8" />
    <bpmn:sequenceFlow id="Flow_0waf57n" sourceRef="Activity_00e1wv8" targetRef="Activity_0bjbpkc" />
    <bpmn:sequenceFlow id="Flow_08coukg" sourceRef="Activity_0bjbpkc" targetRef="Gateway_07uk4ov" />
    <bpmn:sequenceFlow id="Flow_0las36h" name="Oui" sourceRef="Gateway_07uk4ov" targetRef="Activity_1m3d5mw">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${contractExist}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0x0cx0r" name="Non" sourceRef="Gateway_07uk4ov" targetRef="Activity_1i4zxg6">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!contractExist}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1icsnea" name="Oui" sourceRef="Gateway_03m7l78" targetRef="Activity_0tgyz32">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isInterventionExist}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1grhm80" sourceRef="Activity_0tgyz32" targetRef="Activity_1ucax0b" />
    <bpmn:sequenceFlow id="Flow_1yg202c" sourceRef="Activity_1m3d5mw" targetRef="Gateway_03m7l78" />
    <bpmn:sequenceFlow id="Flow_07jomtf" name="Non" sourceRef="Gateway_03m7l78" targetRef="Activity_08div8g">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!isInterventionExist}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0gyb43s" sourceRef="Activity_08div8g" targetRef="Event_1kmarlw" />
    <bpmn:sequenceFlow id="Flow_18oymjk" sourceRef="Activity_1i4zxg6" targetRef="Event_0osjzef" />
    <bpmn:sequenceFlow id="Flow_1dmn9a3" sourceRef="Activity_1ucax0b" targetRef="Activity_171iytm" />
    <bpmn:receiveTask id="Activity_1m7fygq" name="waiting event" messageRef="Message_0p8iejv">
      <bpmn:incoming>Flow_1i9gsvf</bpmn:incoming>
      <bpmn:incoming>Flow_1bbtjn9</bpmn:incoming>
      <bpmn:incoming>Flow_1o16nv2</bpmn:incoming>
      <bpmn:incoming>Flow_1umc9s4</bpmn:incoming>
      <bpmn:outgoing>Flow_15u6jln</bpmn:outgoing>
    </bpmn:receiveTask>
    <bpmn:exclusiveGateway id="Gateway_1en30ho">
      <bpmn:incoming>Flow_1kymxno</bpmn:incoming>
      <bpmn:outgoing>Flow_19qt9jt</bpmn:outgoing>
      <bpmn:outgoing>Flow_0u47fiz</bpmn:outgoing>
      <bpmn:outgoing>Flow_0gvkizq</bpmn:outgoing>
      <bpmn:outgoing>Flow_1hl5ck2</bpmn:outgoing>
      <bpmn:outgoing>Flow_0s628fm</bpmn:outgoing>
      <bpmn:outgoing>Flow_1wxgl18</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:endEvent id="Event_1h4w2ml">
      <bpmn:incoming>Flow_19qt9jt</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:endEvent id="Event_061v51k">
      <bpmn:incoming>Flow_0u47fiz</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:exclusiveGateway id="Gateway_0xovp1l" name="Intervention toujours à confirmer ???">
      <bpmn:incoming>Flow_1l04mbt</bpmn:incoming>
      <bpmn:outgoing>Flow_19shqnb</bpmn:outgoing>
      <bpmn:outgoing>Flow_0ye27tx</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:endEvent id="Event_1fezwkp">
      <bpmn:incoming>Flow_19shqnb</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:endEvent id="Event_18et3vw">
      <bpmn:incoming>Flow_0k1vjuy</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask id="Activity_1vo9uqi" name="recalculate recall_date and abandonment_date (Annulation, Replanification)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_planif_be = execution.getVariable('url_planif_be');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_planif_be + '/api/ortec/dashboardPlanif/updateAbandonmentAndRecallDates/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var eventType = "ANN";
var requestBody = {};
requestBody.eventType = eventType;
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1k5ibe9">
              <camunda:script scriptFormat="JavaScript">print('abandonment and recall dates recalculation api');
var resp = connector.getVariable('response');
print('abandonment date recalculated : ' + resp);
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
execution.setVariable('abandonmentDate', resp);
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0gvkizq</bpmn:incoming>
      <bpmn:outgoing>Flow_1i9gsvf</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1ai4sid" name="Definitive intervention closure">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_planif_be = execution.getVariable('url_planif_be');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_planif_be + '/api/ortec/dashboardPlanif/closePlanification/fromCamunda/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var closureCode = 62;
var requestBody = {};
requestBody.closureCode = closureCode;
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1k5ibe9">
              <camunda:script scriptFormat="JavaScript">print('Definitive closure API (abandonment date reached)');
var resp = connector.getVariable('response');
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0w2w75m</bpmn:incoming>
      <bpmn:outgoing>Flow_0r7gmdx</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1inoeht" name="check intervention status">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb = execution.getVariable('url_op_intervention');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_tb + '/api/v1/intervention/is-still-tobeconfirmed-status/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">GET</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ph8f2n">
              <camunda:script scriptFormat="JavaScript">var resp = connector.getVariable('response')
print('resp after 2 days, is intervention still CFC ? : ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

response = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('isStillCFC', response);


var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0pspfeh</bpmn:incoming>
      <bpmn:outgoing>Flow_1l04mbt</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1kn8x3j" name="cancel intervention ">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb = execution.getVariable('url_planif_be');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_tb + '/api/ortec/dashboardPlanif/cancelPlanification/fromCamunda/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var closureCode = 59;
var requestBody = {};
requestBody.closureCode = closureCode;
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ph8f2n">
              <camunda:script scriptFormat="JavaScript">print('Cancel appointment API (J+2 rdv)');
var resp = connector.getVariable('response');
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0ye27tx</bpmn:incoming>
      <bpmn:outgoing>Flow_0k1vjuy</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1r0dntt" name="recalculate recall_date and abandonment_date (Digitalisation, Injoignable)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_planif_be = execution.getVariable('url_planif_be');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_planif_be + '/api/ortec/dashboardPlanif/updateAbandonmentAndRecallDates/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var eventType = "DIG";
var requestBody = {};
requestBody.eventType = eventType;
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1k5ibe9">
              <camunda:script scriptFormat="JavaScript">print('abandonment and recall dates recalculation api');
var resp = connector.getVariable('response');
print('abandonment date recalculated : ' + resp);
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
execution.setVariable('abandonmentDate', resp);
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1hl5ck2</bpmn:incoming>
      <bpmn:outgoing>Flow_1bbtjn9</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_0h4mm3v" name="recalculate recall_date and abandonment_date (Planification, Confirmation)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_planif_be = execution.getVariable('url_planif_be');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_planif_be + '/api/ortec/dashboardPlanif/updateAbandonmentAndRecallDates/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var eventType = "PLA";
var requestBody = {};
requestBody.eventType = eventType;
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1k5ibe9">
              <camunda:script scriptFormat="JavaScript">print('abandonment and recall dates recalculation api');
var resp = connector.getVariable('response');
print('abandonment date recalculated : ' + resp);
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
execution.setVariable('abandonmentDate', resp);
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0s628fm</bpmn:incoming>
      <bpmn:outgoing>Flow_1o16nv2</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:endEvent id="Event_0fxlpqq">
      <bpmn:incoming>Flow_0r7gmdx</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:endEvent id="Event_0awe6rx">
      <bpmn:incoming>Flow_1wxgl18</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask id="Activity_1xseg9n" name="refresh keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/auth/realms/'+execution.getVariable('realm')+'/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0sevgdh</bpmn:incoming>
      <bpmn:outgoing>Flow_0pspfeh</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1o22gd3" name="refresh keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/auth/realms/'+execution.getVariable('realm')+'/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1uvzozd</bpmn:incoming>
      <bpmn:outgoing>Flow_0w2w75m</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:boundaryEvent id="Event_1gdc6sc" name="Abandonment Date Timer" attachedToRef="Activity_1m7fygq">
      <bpmn:outgoing>Flow_1uvzozd</bpmn:outgoing>
      <bpmn:timerEventDefinition id="TimerEventDefinition_0ncqgd1">
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${abandonmentDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:boundaryEvent>
    <bpmn:sequenceFlow id="Flow_1i9gsvf" sourceRef="Activity_1vo9uqi" targetRef="Activity_1m7fygq" />
    <bpmn:sequenceFlow id="Flow_1bbtjn9" sourceRef="Activity_1r0dntt" targetRef="Activity_1m7fygq" />
    <bpmn:sequenceFlow id="Flow_1o16nv2" sourceRef="Activity_0h4mm3v" targetRef="Activity_1m7fygq" />
    <bpmn:sequenceFlow id="Flow_15u6jln" sourceRef="Activity_1m7fygq" targetRef="Activity_1nugznd" />
    <bpmn:sequenceFlow id="Flow_19qt9jt" name="event type intervention terminée" sourceRef="Gateway_1en30ho" targetRef="Event_1h4w2ml">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${eventType == 'CLO' }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0u47fiz" name="event type intervention cloturée" sourceRef="Gateway_1en30ho" targetRef="Event_061v51k">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${eventType == 'TER' }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0gvkizq" name="event type annulation || replanification" sourceRef="Gateway_1en30ho" targetRef="Activity_1vo9uqi">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${eventType == 'ANN' || eventType == 'RPL' }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1hl5ck2" name="event type digitalisation || injoignable" sourceRef="Gateway_1en30ho" targetRef="Activity_1r0dntt">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${eventType == 'DIG' || eventType == 'INJ' }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0s628fm" name="event type planification || confirmation" sourceRef="Gateway_1en30ho" targetRef="Activity_0h4mm3v">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${eventType == 'PLA' || eventType == 'CON' }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1wxgl18" name="event type intervention interrompue" sourceRef="Gateway_1en30ho" targetRef="Event_0awe6rx">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${eventType == 'INT' }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1l04mbt" sourceRef="Activity_1inoeht" targetRef="Gateway_0xovp1l" />
    <bpmn:sequenceFlow id="Flow_19shqnb" name="Non" sourceRef="Gateway_0xovp1l" targetRef="Event_1fezwkp">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!isStillCFC}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0ye27tx" name="Oui" sourceRef="Gateway_0xovp1l" targetRef="Activity_1kn8x3j">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isStillCFC}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0k1vjuy" sourceRef="Activity_1kn8x3j" targetRef="Event_18et3vw" />
    <bpmn:sequenceFlow id="Flow_0w2w75m" sourceRef="Activity_1o22gd3" targetRef="Activity_1ai4sid" />
    <bpmn:sequenceFlow id="Flow_0r7gmdx" sourceRef="Activity_1ai4sid" targetRef="Event_0fxlpqq" />
    <bpmn:sequenceFlow id="Flow_0pspfeh" sourceRef="Activity_1xseg9n" targetRef="Activity_1inoeht" />
    <bpmn:sequenceFlow id="Flow_1uvzozd" sourceRef="Event_1gdc6sc" targetRef="Activity_1o22gd3" />
    <bpmn:intermediateCatchEvent id="Event_1sh20qf" name="J+2">
      <bpmn:incoming>Flow_0zqrk0a</bpmn:incoming>
      <bpmn:outgoing>Flow_0sevgdh</bpmn:outgoing>
      <bpmn:timerEventDefinition id="TimerEventDefinition_0i3spr7">
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${cancellationDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:intermediateCatchEvent>
    <bpmn:inclusiveGateway id="Gateway_0dp73qk">
      <bpmn:incoming>Flow_06wbsun</bpmn:incoming>
      <bpmn:outgoing>Flow_113clx2</bpmn:outgoing>
      <bpmn:outgoing>Flow_1umc9s4</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:sequenceFlow id="Flow_06wbsun" sourceRef="Activity_1y0b68q" targetRef="Gateway_0dp73qk" />
    <bpmn:sequenceFlow id="Flow_113clx2" sourceRef="Gateway_0dp73qk" targetRef="Activity_0tsx21e">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0sevgdh" sourceRef="Event_1sh20qf" targetRef="Activity_1xseg9n" />
    <bpmn:sequenceFlow id="Flow_1umc9s4" sourceRef="Gateway_0dp73qk" targetRef="Activity_1m7fygq">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:callActivity id="Activity_171iytm" name="Auto planification" calledElement="autoPlannif">
      <bpmn:extensionElements>
        <camunda:in variables="all" />
        <camunda:out variables="all" />
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1dmn9a3</bpmn:incoming>
      <bpmn:outgoing>Flow_1kd44y7</bpmn:outgoing>
    </bpmn:callActivity>
    <bpmn:serviceTask id="Activity_19mo0ty" name="calculate recall_date and abandonment_date">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_planif_be = execution.getVariable('url_planif_be');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_planif_be + '/api/ortec/dashboardPlanif/updateAbandonmentAndRecallDates/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var eventType = "RCP";
var requestBody = {};
requestBody.eventType = eventType;
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1k5ibe9">
              <camunda:script scriptFormat="JavaScript">print('abandonment and recall dates recalculation api');
var resp = connector.getVariable('response');
print('abandonment date recalculated : ' + resp);
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
execution.setVariable('abandonmentDate', resp);
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1kd44y7</bpmn:incoming>
      <bpmn:outgoing>Flow_0ep6lf5</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1kd44y7" sourceRef="Activity_171iytm" targetRef="Activity_19mo0ty" />
    <bpmn:sequenceFlow id="Flow_0ep6lf5" sourceRef="Activity_19mo0ty" targetRef="Activity_1y0b68q" />
    <bpmn:serviceTask id="Activity_0tsx21e" name="get appointment cancellation date time">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb = execution.getVariable('url_op_intervention');
var interventionNumber = execution.getVariable('interventionNumber');
var completeUrl = url_tb + '/api/v1/intervention/get-appointment-cancel-date/' + interventionNumber;
completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">GET</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1k5ibe9">
              <camunda:script scriptFormat="JavaScript">print('appointment cancellation date time calculation api');
var resp = connector.getVariable('response');
print('appointment cancellation date time calculated : ' + resp);
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
execution.setVariable('cancellationDate', resp);
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_113clx2</bpmn:incoming>
      <bpmn:outgoing>Flow_0zqrk0a</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0zqrk0a" sourceRef="Activity_0tsx21e" targetRef="Event_1sh20qf" />
    <bpmn:serviceTask id="Activity_1nugznd" name="refresh keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/auth/realms/'+execution.getVariable('realm')+'/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_15u6jln</bpmn:incoming>
      <bpmn:outgoing>Flow_1kymxno</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1kymxno" sourceRef="Activity_1nugznd" targetRef="Gateway_1en30ho" />
    <bpmn:textAnnotation id="TextAnnotation_062jn9i">
      <bpmn:text>TOP-5210</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_087t8ia">
      <bpmn:text>TOP-5153</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0r7yusv">
      <bpmn:text>TOP-5557</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_1hnkhth">
      <bpmn:text>TOP-5383</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0c81zgl">
      <bpmn:text>TOP-5383</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0h5yqou" associationDirection="None" sourceRef="Activity_1vo9uqi" targetRef="TextAnnotation_1hnkhth" />
    <bpmn:association id="Association_0m22m0v" associationDirection="None" sourceRef="TextAnnotation_087t8ia" targetRef="Activity_1ai4sid" />
    <bpmn:association id="Association_0n1by1w" associationDirection="None" sourceRef="Activity_1inoeht" targetRef="TextAnnotation_0r7yusv" />
    <bpmn:association id="Association_1c0t43y" associationDirection="None" sourceRef="Activity_1kn8x3j" targetRef="TextAnnotation_062jn9i" />
    <bpmn:association id="Association_04m828h" associationDirection="None" sourceRef="Activity_1r0dntt" targetRef="TextAnnotation_1hnkhth" />
    <bpmn:association id="Association_0qpja41" associationDirection="None" sourceRef="Activity_1r0dntt" targetRef="TextAnnotation_0c81zgl" />
    <bpmn:association id="Association_116ygse" associationDirection="None" sourceRef="Activity_0h4mm3v" targetRef="TextAnnotation_0c81zgl" />
    <bpmn:textAnnotation id="TextAnnotation_0jyzxjg">
      <bpmn:text>TOP-5383</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0zovrzw" associationDirection="None" sourceRef="Activity_19mo0ty" targetRef="TextAnnotation_0jyzxjg" />
  </bpmn:process>
  <bpmn:message id="Message_1rta7b9" name="startSubscriptionDMTPProcess" />
  <bpmn:error id="Error_1870c31" name="Error_27erg8r" />
  <bpmn:message id="Message_0p8iejv" name="interventionEventType" />
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="InterventionDMTP">
      <bpmndi:BPMNShape id="Event_07qg3d6_di" bpmnElement="startSubscriptionDMTPProcess">
        <dc:Bounds x="152" y="699" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_00e1wv8_di" bpmnElement="Activity_00e1wv8">
        <dc:Bounds x="240" y="677" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_07uk4ov_di" bpmnElement="Gateway_07uk4ov" isMarkerVisible="true">
        <dc:Bounds x="649" y="692" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1rvkrii" bpmnElement="Activity_1nugznd">
        <dc:Bounds x="2380" y="677" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1k5weqx_di" bpmnElement="Activity_1k5weqx" isExpanded="true">
        <dc:Bounds x="490" y="1067" width="740" height="363" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0ojpmfh_di" bpmnElement="Event_0ojpmfh">
        <dc:Bounds x="523" y="1230" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0dz9j3o_di" bpmnElement="Activity_0dz9j3o">
        <dc:Bounds x="741" y="1208" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1m1enul_di" bpmnElement="Event_1m1enul">
        <dc:Bounds x="1163" y="1230" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0rnhgxt_di" bpmnElement="Activity_0rnhgxt">
        <dc:Bounds x="991" y="1208" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1o9jdhq_di" bpmnElement="Gateway_1o9jdhq" isMarkerVisible="true">
        <dc:Bounds x="616" y="1223" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0e91049_di" bpmnElement="Activity_0e91049">
        <dc:Bounds x="741" y="1323" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_1h3nzpr_di" bpmnElement="Flow_1h3nzpr">
        <di:waypoint x="559" y="1248" />
        <di:waypoint x="616" y="1248" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0hlgul9_di" bpmnElement="Flow_0hlgul9">
        <di:waypoint x="666" y="1248" />
        <di:waypoint x="741" y="1248" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0v8co1n_di" bpmnElement="Flow_0v8co1n">
        <di:waypoint x="841" y="1248" />
        <di:waypoint x="991" y="1248" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1oc5gyu_di" bpmnElement="Flow_1oc5gyu">
        <di:waypoint x="1091" y="1248" />
        <di:waypoint x="1163" y="1248" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0axft79_di" bpmnElement="Flow_0axft79">
        <di:waypoint x="841" y="1363" />
        <di:waypoint x="1041" y="1363" />
        <di:waypoint x="1041" y="1288" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1npvnq6_di" bpmnElement="Flow_1npvnq6">
        <di:waypoint x="641" y="1273" />
        <di:waypoint x="641" y="1363" />
        <di:waypoint x="741" y="1363" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Activity_0tgyz32_di" bpmnElement="Activity_0tgyz32">
        <dc:Bounds x="1152" y="677" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1m3d5mw_di" bpmnElement="Activity_1m3d5mw">
        <dc:Bounds x="840" y="677" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_03m7l78_di" bpmnElement="Gateway_03m7l78" isMarkerVisible="true">
        <dc:Bounds x="1027" y="692" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0f3jxfq_di" bpmnElement="Activity_08div8g">
        <dc:Bounds x="1002" y="867" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1kmarlw_di" bpmnElement="Event_1kmarlw">
        <dc:Bounds x="1174" y="889" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1y0b68q_di" bpmnElement="Activity_1y0b68q">
        <dc:Bounds x="1850" y="677" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0bjbpkc_di" bpmnElement="Activity_0bjbpkc">
        <dc:Bounds x="450" y="677" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0ods7e4" bpmnElement="Activity_1i4zxg6">
        <dc:Bounds x="624" y="867" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_081o9op" bpmnElement="Event_0osjzef">
        <dc:Bounds x="807" y="889" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_009kp9l" bpmnElement="Activity_1ucax0b">
        <dc:Bounds x="1340" y="677" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_09gkiq8_di" bpmnElement="Activity_1m7fygq">
        <dc:Bounds x="2200" y="677" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1en30ho_di" bpmnElement="Gateway_1en30ho" isMarkerVisible="true">
        <dc:Bounds x="2565" y="692" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1h4w2ml_di" bpmnElement="Event_1h4w2ml">
        <dc:Bounds x="2792" y="559" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_061v51k_di" bpmnElement="Event_061v51k">
        <dc:Bounds x="2792" y="479" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0xovp1l_di" bpmnElement="Gateway_0xovp1l" isMarkerVisible="true">
        <dc:Bounds x="2535" y="242" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2527" y="299" width="68" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1fezwkp_di" bpmnElement="Event_1fezwkp">
        <dc:Bounds x="3022" y="79" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_18et3vw_di" bpmnElement="Event_18et3vw">
        <dc:Bounds x="3022" y="249" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1p1tjy6" bpmnElement="Activity_1vo9uqi">
        <dc:Bounds x="2380" y="937" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0sjhnyv" bpmnElement="Activity_1ai4sid">
        <dc:Bounds x="2510" y="367" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1y88he8" bpmnElement="Activity_1inoeht">
        <dc:Bounds x="2370" y="227" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1o5lrmd" bpmnElement="Activity_1kn8x3j">
        <dc:Bounds x="2780" y="227" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0ljdc9v" bpmnElement="Activity_1r0dntt">
        <dc:Bounds x="2380" y="1107" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_15f4hsf" bpmnElement="Activity_0h4mm3v">
        <dc:Bounds x="2380" y="1277" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0ovqd3k" bpmnElement="Event_0fxlpqq">
        <dc:Bounds x="2792" y="389" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0awe6rx_di" bpmnElement="Event_0awe6rx">
        <dc:Bounds x="2792" y="649" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_07ypovz" bpmnElement="Activity_1xseg9n">
        <dc:Bounds x="2170" y="227" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0eeaa7q" bpmnElement="Activity_1o22gd3">
        <dc:Bounds x="2250" y="457" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_06j4rmv_di" bpmnElement="Event_1sh20qf">
        <dc:Bounds x="2032" y="249" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2043" y="219" width="19" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0drxnqw_di" bpmnElement="Gateway_0dp73qk">
        <dc:Bounds x="2025" y="692" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_03c8wco_di" bpmnElement="Activity_171iytm">
        <dc:Bounds x="1510" y="677" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_13hxddy_di" bpmnElement="Activity_19mo0ty">
        <dc:Bounds x="1690" y="677" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1897frf" bpmnElement="Activity_0tsx21e">
        <dc:Bounds x="2000" y="440" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_062jn9i_di" bpmnElement="TextAnnotation_062jn9i">
        <dc:Bounds x="2840" y="157" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_15csgig" bpmnElement="TextAnnotation_087t8ia">
        <dc:Bounds x="2630" y="368" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1p9dyhc" bpmnElement="TextAnnotation_0r7yusv">
        <dc:Bounds x="2420" y="157" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0yvpgnw" bpmnElement="TextAnnotation_1hnkhth">
        <dc:Bounds x="2380" y="1047" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_17f7g5c" bpmnElement="TextAnnotation_0c81zgl">
        <dc:Bounds x="2380" y="1217" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0ofnlga" bpmnElement="TextAnnotation_0jyzxjg">
        <dc:Bounds x="1669" y="610" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1n2osiw_di" bpmnElement="Event_1gdc6sc">
        <dc:Bounds x="2282" y="659" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2311" y="623" width="69" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_0geoeu7_di" bpmnElement="Flow_0geoeu7">
        <di:waypoint x="188" y="717" />
        <di:waypoint x="240" y="717" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0waf57n_di" bpmnElement="Flow_0waf57n">
        <di:waypoint x="340" y="717" />
        <di:waypoint x="450" y="717" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_08coukg_di" bpmnElement="Flow_08coukg">
        <di:waypoint x="550" y="717" />
        <di:waypoint x="649" y="717" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0las36h_di" bpmnElement="Flow_0las36h">
        <di:waypoint x="699" y="717" />
        <di:waypoint x="840" y="717" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="713" y="699" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0x0cx0r_di" bpmnElement="Flow_0x0cx0r">
        <di:waypoint x="674" y="742" />
        <di:waypoint x="674" y="867" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="679" y="802" width="21" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1icsnea_di" bpmnElement="Flow_1icsnea">
        <di:waypoint x="1077" y="717" />
        <di:waypoint x="1152" y="717" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1106" y="699" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1grhm80_di" bpmnElement="Flow_1grhm80">
        <di:waypoint x="1252" y="717" />
        <di:waypoint x="1340" y="717" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1yg202c_di" bpmnElement="Flow_1yg202c">
        <di:waypoint x="940" y="717" />
        <di:waypoint x="1027" y="717" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_07jomtf_di" bpmnElement="Flow_07jomtf">
        <di:waypoint x="1052" y="742" />
        <di:waypoint x="1052" y="867" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1058" y="808" width="21" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0gyb43s_di" bpmnElement="Flow_0gyb43s">
        <di:waypoint x="1102" y="907" />
        <di:waypoint x="1174" y="907" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0bl9jh0" bpmnElement="Flow_18oymjk">
        <di:waypoint x="724" y="907" />
        <di:waypoint x="807" y="907" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1dmn9a3_di" bpmnElement="Flow_1dmn9a3">
        <di:waypoint x="1440" y="717" />
        <di:waypoint x="1510" y="717" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1i9gsvf_di" bpmnElement="Flow_1i9gsvf">
        <di:waypoint x="2380" y="977" />
        <di:waypoint x="2280" y="977" />
        <di:waypoint x="2280" y="757" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1bbtjn9_di" bpmnElement="Flow_1bbtjn9">
        <di:waypoint x="2380" y="1147" />
        <di:waypoint x="2280" y="1147" />
        <di:waypoint x="2280" y="757" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1o16nv2_di" bpmnElement="Flow_1o16nv2">
        <di:waypoint x="2380" y="1317" />
        <di:waypoint x="2280" y="1317" />
        <di:waypoint x="2280" y="757" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_15u6jln_di" bpmnElement="Flow_15u6jln">
        <di:waypoint x="2300" y="717" />
        <di:waypoint x="2380" y="717" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_19qt9jt_di" bpmnElement="Flow_19qt9jt">
        <di:waypoint x="2590" y="692" />
        <di:waypoint x="2590" y="577" />
        <di:waypoint x="2792" y="577" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2665" y="447" width="58" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0u47fiz_di" bpmnElement="Flow_0u47fiz">
        <di:waypoint x="2590" y="692" />
        <di:waypoint x="2590" y="497" />
        <di:waypoint x="2792" y="497" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2665" y="527" width="58" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0gvkizq_di" bpmnElement="Flow_0gvkizq">
        <di:waypoint x="2590" y="742" />
        <di:waypoint x="2590" y="977" />
        <di:waypoint x="2480" y="977" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2507" y="927" width="68" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1hl5ck2_di" bpmnElement="Flow_1hl5ck2">
        <di:waypoint x="2590" y="742" />
        <di:waypoint x="2590" y="1147" />
        <di:waypoint x="2480" y="1147" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2505" y="1097" width="70" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0s628fm_di" bpmnElement="Flow_0s628fm">
        <di:waypoint x="2590" y="742" />
        <di:waypoint x="2590" y="1317" />
        <di:waypoint x="2480" y="1317" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2506" y="1250" width="68" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1wxgl18_di" bpmnElement="Flow_1wxgl18">
        <di:waypoint x="2590" y="692" />
        <di:waypoint x="2590" y="667" />
        <di:waypoint x="2792" y="667" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2664" y="617" width="59" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1l04mbt_di" bpmnElement="Flow_1l04mbt">
        <di:waypoint x="2470" y="267" />
        <di:waypoint x="2535" y="267" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_19shqnb_di" bpmnElement="Flow_19shqnb">
        <di:waypoint x="2560" y="242" />
        <di:waypoint x="2560" y="97" />
        <di:waypoint x="3022" y="97" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2565" y="167" width="21" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ye27tx_di" bpmnElement="Flow_0ye27tx">
        <di:waypoint x="2585" y="267" />
        <di:waypoint x="2780" y="267" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2658" y="240" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0k1vjuy_di" bpmnElement="Flow_0k1vjuy">
        <di:waypoint x="2880" y="267" />
        <di:waypoint x="3022" y="267" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0w2w75m_di" bpmnElement="Flow_0w2w75m">
        <di:waypoint x="2300" y="457" />
        <di:waypoint x="2300" y="407" />
        <di:waypoint x="2510" y="407" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0r7gmdx_di" bpmnElement="Flow_0r7gmdx">
        <di:waypoint x="2610" y="407" />
        <di:waypoint x="2792" y="407" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0pspfeh_di" bpmnElement="Flow_0pspfeh">
        <di:waypoint x="2270" y="267" />
        <di:waypoint x="2370" y="267" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1uvzozd_di" bpmnElement="Flow_1uvzozd">
        <di:waypoint x="2300" y="659" />
        <di:waypoint x="2300" y="537" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_06wbsun_di" bpmnElement="Flow_06wbsun">
        <di:waypoint x="1950" y="717" />
        <di:waypoint x="2025" y="717" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_113clx2_di" bpmnElement="Flow_113clx2">
        <di:waypoint x="2050" y="692" />
        <di:waypoint x="2050" y="520" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0sevgdh_di" bpmnElement="Flow_0sevgdh">
        <di:waypoint x="2068" y="267" />
        <di:waypoint x="2170" y="267" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1umc9s4_di" bpmnElement="Flow_1umc9s4">
        <di:waypoint x="2075" y="717" />
        <di:waypoint x="2200" y="717" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1kd44y7_di" bpmnElement="Flow_1kd44y7">
        <di:waypoint x="1610" y="717" />
        <di:waypoint x="1690" y="717" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ep6lf5_di" bpmnElement="Flow_0ep6lf5">
        <di:waypoint x="1790" y="717" />
        <di:waypoint x="1850" y="717" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0zqrk0a_di" bpmnElement="Flow_0zqrk0a">
        <di:waypoint x="2050" y="440" />
        <di:waypoint x="2050" y="285" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0h5yqou_di" bpmnElement="Association_0h5yqou">
        <di:waypoint x="2430" y="1017" />
        <di:waypoint x="2430" y="1047" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0m22m0v_di" bpmnElement="Association_0m22m0v">
        <di:waypoint x="2630" y="383" />
        <di:waypoint x="2610" y="383" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0n1by1w_di" bpmnElement="Association_0n1by1w">
        <di:waypoint x="2443" y="227" />
        <di:waypoint x="2465" y="187" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1c0t43y_di" bpmnElement="Association_1c0t43y">
        <di:waypoint x="2841" y="227" />
        <di:waypoint x="2853" y="187" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_04m828h_di" bpmnElement="Association_04m828h">
        <di:waypoint x="2430" y="1107" />
        <di:waypoint x="2430" y="1077" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0qpja41_di" bpmnElement="Association_0qpja41">
        <di:waypoint x="2430" y="1187" />
        <di:waypoint x="2430" y="1217" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_116ygse_di" bpmnElement="Association_116ygse">
        <di:waypoint x="2430" y="1277" />
        <di:waypoint x="2430" y="1247" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0zovrzw_di" bpmnElement="Association_0zovrzw">
        <di:waypoint x="1701" y="677" />
        <di:waypoint x="1701" y="640" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1kymxno_di" bpmnElement="Flow_1kymxno">
        <di:waypoint x="2480" y="717" />
        <di:waypoint x="2565" y="717" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
