<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bioc="http://bpmn.io/schema/bpmn/biocolor/1.0" xmlns:color="http://www.omg.org/spec/BPMN/non-normative/color/1.0" id="Definitions_0cd2mqd" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="5.0.0">
  <bpmn:process id="terminateContact" name="Terminate Contract" isExecutable="true">
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>SequenceFlow_06bhpo8</bpmn:outgoing>
      <bpmn:messageEventDefinition messageRef="Message_0aaoot7" />
    </bpmn:startEvent>
    <bpmn:sequenceFlow id="SequenceFlow_06bhpo8" sourceRef="StartEvent_1" targetRef="ServiceTask_1xmsfx4" />
    <bpmn:subProcess id="Activity_1xfw40h" triggeredByEvent="true">
      <bpmn:startEvent id="Event_1871wws">
        <bpmn:outgoing>Flow_05ddlp1</bpmn:outgoing>
        <bpmn:errorEventDefinition id="ErrorEventDefinition_1f8mwn3" errorRef="Error_17k1fqc" camunda:errorMessageVariable="errorTaskId" />
      </bpmn:startEvent>
      <bpmn:userTask id="Activity_1kuco63" name="Review Task">
        <bpmn:incoming>Flow_1o5162a</bpmn:incoming>
        <bpmn:outgoing>Flow_0mssr82</bpmn:outgoing>
      </bpmn:userTask>
      <bpmn:sequenceFlow id="Flow_0mssr82" sourceRef="Activity_1kuco63" targetRef="Activity_0z4q4a2" />
      <bpmn:scriptTask id="Activity_0z4q4a2" name="Return to Last Task" camunda:asyncAfter="true" scriptFormat="JavaScript">
        <bpmn:incoming>Flow_0mssr82</bpmn:incoming>
        <bpmn:incoming>Flow_0dg3u2e</bpmn:incoming>
        <bpmn:outgoing>Flow_0w5y08e</bpmn:outgoing>
        <bpmn:script>print('Return to flow is Running');
var errorTaskId = execution.getVariable('errorTaskId');
if(errorTaskId == null){
print('No where to go back to');
}else{          execution.getProcessEngineServices().
getRuntimeService().createProcessInstanceModification(execution.getProcessInstanceId()).startBeforeActivity(errorTaskId).
execute();
}</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:endEvent id="Event_1cuh8n4">
        <bpmn:incoming>Flow_0w5y08e</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:sequenceFlow id="Flow_0w5y08e" sourceRef="Activity_0z4q4a2" targetRef="Event_1cuh8n4" />
      <bpmn:serviceTask id="Activity_16c7b8i" name="Refresh Token">
        <bpmn:extensionElements>
          <camunda:connector>
            <camunda:inputOutput>
              <camunda:inputParameter name="url">
                <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/realms/Protectline/protocol/openid-connect/token'</camunda:script>
              </camunda:inputParameter>
              <camunda:inputParameter name="method">POST</camunda:inputParameter>
              <camunda:inputParameter name="headers">
                <camunda:map>
                  <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                  <camunda:entry key="Accept">application/json</camunda:entry>
                  <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
                </camunda:map>
              </camunda:inputParameter>
              <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
              <camunda:outputParameter name="Output_1tcqe5d">
                <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
              </camunda:outputParameter>
            </camunda:inputOutput>
            <camunda:connectorId>http-connector</camunda:connectorId>
          </camunda:connector>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_1r4zwpj</bpmn:incoming>
        <bpmn:outgoing>Flow_0dg3u2e</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:exclusiveGateway id="Gateway_0qwpip0">
        <bpmn:incoming>Flow_05ddlp1</bpmn:incoming>
        <bpmn:outgoing>Flow_1o5162a</bpmn:outgoing>
        <bpmn:outgoing>Flow_1r4zwpj</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_05ddlp1" sourceRef="Event_1871wws" targetRef="Gateway_0qwpip0" />
      <bpmn:sequenceFlow id="Flow_1o5162a" sourceRef="Gateway_0qwpip0" targetRef="Activity_1kuco63">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode != 401}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_1r4zwpj" sourceRef="Gateway_0qwpip0" targetRef="Activity_16c7b8i">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode == 401}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_0dg3u2e" sourceRef="Activity_16c7b8i" targetRef="Activity_0z4q4a2" />
    </bpmn:subProcess>
    <bpmn:serviceTask id="ServiceTask_1xmsfx4" name="Get keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/realms/Protectline/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1tcqe5d">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_06bhpo8</bpmn:incoming>
      <bpmn:outgoing>Flow_1sokoc1</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:endEvent id="EndEvent_1fet437">
      <bpmn:incoming>SequenceFlow_0xlz9ya</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask id="ServiceTask_0c92c0x" name="Send Message To Logistics">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_intervention');
url_tb+'/api/interventions/v1/camunda/terminateContract/send-new-termination-logistics'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscriptionCode = execution.getVariable('subscriptionCode');
var ticketNum = execution.getVariable('ticketNum');
var termination = execution.getVariable('termination');
var userAccountCode = S(termination).prop("user").prop("userAccountCode").value();
var sellerCode = S(termination).prop("seller").prop("sellerCode").value();
var idOffer = S(termination).prop("offer").prop("idOffer").value();

'{"subscriptionCode":' + subscriptionCode +
',"userAccountCode":"' + userAccountCode + '"' +
',"ticketNum":"' + ticketNum + '"' +
',"sellerCode":"' + sellerCode+ '"' +
',"idOffer":"' + idOffer+'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("send message to logistic");
var resp = connector.getVariable("response");
print("send message to logistic:" + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0k3tms7</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_19jagu2</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_1b8jo07" name="Terminate Contract Usage">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/usage-termination-contract'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("terminate contract usage");
var resp = connector.getVariable("response");
print("terminate contract usage: " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1wxtzpf</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0cgxvw9</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0cbgrln">
      <bpmn:incoming>Flow_0s8tz0w</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1x4908g</bpmn:outgoing>
      <bpmn:outgoing>Flow_0ukwmwk</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="ServiceTask_0l0f9cp" name="confirm withdrawal process Subscription">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/cancelWithdrawalProcess'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token": "' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +',"codeCloture":' + execution.getVariable('codeCloture') +',"email":"' + execution.getVariable('email')+'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("confirm withdrawal process Subscription");
var resp = connector.getVariable("response");
print("create tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1fgj54e</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1lte0p2</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:endEvent id="EndEvent_0y4ojw6">
      <bpmn:incoming>SequenceFlow_0jv4s35</bpmn:incoming>
      <bpmn:incoming>Flow_07o3y6q</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1ppxatp">
      <bpmn:incoming>SequenceFlow_09ednhb</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0geoxa7</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1tqs4vm</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="ServiceTask_0gvlcaf" name="cancel withdrawal process Subscription">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/cancelWithdrawalProcess'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token": "' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +',"codeCloture":' + execution.getVariable('codeCloture') +',"email":"' + execution.getVariable('email')+'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("cancel withdrawal process Subscription");
var resp = connector.getVariable("response");
print("create tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1nnyp37</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_11x6vxc</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0dlfuar" name="termination Type">
      <bpmn:incoming>Flow_1hs9m52</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0u6z4xm</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0a9ix91</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0n8vp20" name="termination Reason">
      <bpmn:incoming>SequenceFlow_0u6z4xm</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_06adcq7</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1swrqbx</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0osusol" name="Engaged">
      <bpmn:incoming>SequenceFlow_06adcq7</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0p5415b</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0v2074l</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:exclusiveGateway id="ExclusiveGateway_15ssxrn" name="termination type">
      <bpmn:incoming>SequenceFlow_0a9ix91</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1swrqbx</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0v2074l</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0h4yrha</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1hgjjqf</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1lg94ws</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1qppr0j</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="ServiceTask_1oyqt5x" name="Apply fiancial Penalty">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/apply-charge'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') + 
',"terminationRequest":' + execution.getVariable('termination') +
',"ticketId":' + execution.getVariable('ticketId') +',"terminationCharge":' + execution.getVariable('terminationCharge')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('deleteticketId custom field opencell');
var resp = connector.getVariable('response')
print('resp deleteticketId custom field opencell' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1yxacci</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_03ssgsg</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_1dz152m" name="calculate fiancial penalty ORANGE">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/getAmountFees-orange'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') +
',"ticketId":' + execution.getVariable('ticketId') + 
',"terminationRequest":' + execution.getVariable('termination') +
',"crmToken": "' + execution.getVariable('crmToken')+'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">function leapYear(year) {
  return (year % 4 == 0 &amp;&amp; year % 100 != 0) || year % 400 == 0;
}

print("show fees");
var resp = connector.getVariable("response");
print("get amount fees witdh/res : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  var jsonResponse = JSON.parse(resp);
  execution.setVariable("seller", jsonResponse.seller);

  execution.setVariable("offerCode", jsonResponse.offerCode);

  execution.setVariable("endAgreementDate", jsonResponse.endAgreementDate);

  execution.setVariable("terminationType", jsonResponse.terminationType);

  execution.setVariable(
    "terminationReasonCode",
    jsonResponse.terminationReasonCode
  );

  var myDate = new Date(jsonResponse.terminationDate);
  print("entred termination date " + myDate);
  var day = myDate.getDate() + 1;
  var month = myDate.getMonth() + 1;
  var year = myDate.getFullYear();

  if (
    (month == 1 ||
      month == 3 ||
      month == 5 ||
      month == 7 ||
      month == 8 ||
      month == 10 ||
      month == 12) &amp;&amp;
    day &gt; 31
  ) {
    day = 1;
    month = month + 1;
  } else if (
    (month == 4 || month == 6 || month == 9 || month == 11) &amp;&amp;
    day &gt; 30
  ) {
    day = 1;
    month = month + 1;
  } else if (leapYear(year) === true &amp;&amp; day &gt; 29 &amp;&amp; month == 2) {
    day = 1;
    month = month + 1;
  } else if (leapYear(year) === false &amp;&amp; day &gt; 28 &amp;&amp; month == 2) {
    day = 1;
    month = month + 1;
  }

  if (month &gt; 12) {
    month = 1;
    year = year + 1;
  }

  if (month.toString().length === 1) {
    month = "0" + month;
  }
  if (day.toString().length === 1) {
    day = "0" + day;
  }

  var finalDate = year + "-" + month + "-" + day;
  print("final date :" + finalDate);

  execution.setVariable("terminationDate", finalDate + "T01:00:00Z");

  execution.setVariable(
    "terminationDateUpdate",
    JSON.stringify(finalDate + "T01:00:00Z")
  );

  execution.setVariable("terminationCharge", jsonResponse.terminationCharge);


  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1obe75u</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0h4yrha</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1bgp8m0">
      <bpmn:incoming>SequenceFlow_0p5415b</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1obe75u</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1q0ruio</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="ServiceTask_176d2o4" name="calculate fiancial penalty GROUPAMA">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/getAmountFees-groupama'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') +
',"ticketId":' + execution.getVariable('ticketId') + 
',"terminationRequest":' + execution.getVariable('termination') +
',"crmToken": "' + execution.getVariable('crmToken')+'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">function leapYear(year) {
  return (year % 4 == 0 &amp;&amp; year % 100 != 0) || year % 400 == 0;
}

print("show fees");
var resp = connector.getVariable("response");
print("get amount fees witdh/res : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  var jsonResponse = JSON.parse(resp);
  execution.setVariable("seller", jsonResponse.seller);

  execution.setVariable("offerCode", jsonResponse.offerCode);

  execution.setVariable("endAgreementDate", jsonResponse.endAgreementDate);

  execution.setVariable("terminationType", jsonResponse.terminationType);

  execution.setVariable(
    "terminationReasonCode",
    jsonResponse.terminationReasonCode
  );

  var myDate = new Date(jsonResponse.terminationDate);
  print("entred termination date " + myDate);
  var day = myDate.getDate() + 1;
  var month = myDate.getMonth() + 1;
  var year = myDate.getFullYear();

  if (
    (month == 1 ||
      month == 3 ||
      month == 5 ||
      month == 7 ||
      month == 8 ||
      month == 10 ||
      month == 12) &amp;&amp;
    day &gt; 31
  ) {
    day = 1;
    month = month + 1;
  } else if (
    (month == 4 || month == 6 || month == 9 || month == 11) &amp;&amp;
    day &gt; 30
  ) {
    day = 1;
    month = month + 1;
  } else if (leapYear(year) === true &amp;&amp; day &gt; 29 &amp;&amp; month == 2) {
    day = 1;
    month = month + 1;
  } else if (leapYear(year) === false &amp;&amp; day &gt; 28 &amp;&amp; month == 2) {
    day = 1;
    month = month + 1;
  }

  if (month &gt; 12) {
    month = 1;
    year = year + 1;
  }

  if (month.toString().length === 1) {
    month = "0" + month;
  }
  if (day.toString().length === 1) {
    day = "0" + day;
  }

  var finalDate = year + "-" + month + "-" + day;
  print("final date :" + finalDate);

  execution.setVariable("terminationDate", finalDate + "T01:00:00Z");

  execution.setVariable(
    "terminationDateUpdate",
    JSON.stringify(finalDate + "T01:00:00Z")
  );

  execution.setVariable("terminationCharge", jsonResponse.terminationCharge);

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1q0ruio</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1hgjjqf</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0iat2h4" name="Apply Discount">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/applyDiscount'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("***Apply Discount***");
var resp = connector.getVariable("response");
print("Apply Discount " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1x6cjbn</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0rl17u0</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0ph0dnn">
      <bpmn:incoming>SequenceFlow_1tqs4vm</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1x6cjbn</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0p9jprw</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0yccjgo">
      <bpmn:incoming>SequenceFlow_1x4908g</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1t22r3u</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1jprzet</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1od8mbh">
      <bpmn:incoming>SequenceFlow_1jprzet</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0he2ng7</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1socf2f</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="ServiceTask_1reyo93" name="Apply Discount">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/applyDiscount'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("***Apply Discount***");
var resp = connector.getVariable("response");
print("Apply Discount " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0he2ng7</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1a6viwm</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_024xbgj" name="Get status of Closing code + intervention number SS">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/getStatusClosingCode'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("***Get status of Closing code***");
var resp = connector.getVariable("response");
print("Get status of Closing code : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

  var jsonResponse = JSON.parse(resp);
  var myJSON = JSON.stringify(jsonResponse);
  execution.setVariable("processSubscriptionVariables",myJSON );
  execution.setVariable("codeStatus",JSON.stringify(jsonResponse.codeStatus));
  print("################################################################################################## : " +  myJSON);
  execution.setVariable("zammadTicketSubscription", JSON.stringify(jsonResponse.zammadTicket));
    execution.setVariable("subscription", JSON.stringify(jsonResponse.subscription));
	execution.setVariable("codeStatusExist", JSON.stringify(jsonResponse.codeStatusExist));

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0ukwmwk</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_09ednhb</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1wnng49">
      <bpmn:incoming>SequenceFlow_0geoxa7</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1razuii</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_11x5t0w</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="ServiceTask_08y3sof" name="cancel intervention to TeamTool planif">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/cancelInterventionToTeamToolPlanif'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"'+execution.getVariable('token')+'","subscriptionCode":'+execution.getVariable('subscriptionCode')+',"processSubscriptionVariables":'+execution.getVariable('processSubscriptionVariables')+',"terminationRequest":'+execution.getVariable('termination')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("confirm withdrawal process Subscription");
var resp = connector.getVariable("response");
print("create tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0m5emel</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1od0991</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0nr9v65" name="Rejected Quote by CRC">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/rejectedQuoteByCRC'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"'+execution.getVariable('token')+'","subscriptionCode":'+execution.getVariable('subscriptionCode')+',"processSubscriptionVariables":'+execution.getVariable('processSubscriptionVariables')+',"terminationRequest":'+execution.getVariable('termination')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("confirm withdrawal process Subscription");
var resp = connector.getVariable("response");
print("create tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1od0991</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_05nhxsz</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_02x0g8i" name="Terminate Subscription processus">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/deleteProcessSubscription'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"'+execution.getVariable('token')+'","subscriptionCode":'+execution.getVariable('subscriptionCode')+',"processSubscriptionVariables":'+execution.getVariable('processSubscriptionVariables')+',"terminationRequest":'+execution.getVariable('termination')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("confirm withdrawal process Subscription");
var resp = connector.getVariable("response");
print("create tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1ea2dy1</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_04tfk9g</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_042ghel">
      <bpmn:incoming>SequenceFlow_1razuii</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1fgj54e</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0eeyuvr</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="ServiceTask_17i8bng" name="confirm withdrawal process Subscription code 47">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/cancelWithdrawalProcessCodeStaus47'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token": "' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +',"codeCloture":' + execution.getVariable('codeCloture') +',"email":"' + execution.getVariable('email')+'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("confirm withdrawal process Subscription");
var resp = connector.getVariable("response");
print("create tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0eeyuvr</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0vwztka</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0std9p4">
      <bpmn:incoming>SequenceFlow_0rl17u0</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0p9jprw</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1nnyp37</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_03q0fqq</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="ServiceTask_04mglp3" name="cancel withdrawal process Subscription code 47">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/cancelWithdrawalProcessCodeStaus47'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token": "' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +',"codeCloture":' + execution.getVariable('codeCloture') +',"email":"' + execution.getVariable('email')+'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("confirm withdrawal process Subscription");
var resp = connector.getVariable("response");
print("create tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_03q0fqq</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_19ip028</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1ix27h6" name="Update Subscription termination in progress">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/subscription/terminationInProgress/update'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">print(S(execution.getVariable("termination")).prop("terminationDate").value());
print("payload",'{"subscriptionCode":' + execution.getVariable('subscriptionCode') + 
',"terminationInProgress": true' +
',"terminationType": "' + execution.getVariable('terminationType') + '"' +
',"terminationDate":"' + S(execution.getVariable("termination")).prop("terminationDate").value()+ '"' +
',"terminationMovingInProgress":' + execution.getVariable('movingTermination') +
'}');
'{"subscriptionCode":' + execution.getVariable('subscriptionCode') + 
',"terminationInProgress": true' +
',"terminationType": "' + execution.getVariable('terminationType') + '"' +
',"terminationDate":"' + S(execution.getVariable("termination")).prop("terminationDate").value()+ '"' +
',"terminationMovingInProgress":' + execution.getVariable('movingTermination') +
'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('update subscription termination in progress');

var resp = connector.getVariable('response')
print('resp update subscription termination in progresss' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1t22r3u</bpmn:incoming>
      <bpmn:outgoing>Flow_1hs9m52</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1tp3tk7" name="Update Subscription cancel termination in progress">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/subscription/terminationInProgress/update'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') + 
',"terminationInProgress": false' +
',"terminationType": null' +
',"terminationDate": null}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('Update Subscription cancel termination in progress');
var resp = connector.getVariable('response')
print('Update Subscription cancel termination in progress: ' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0aclz1z</bpmn:incoming>
      <bpmn:outgoing>Flow_0ovjmwf</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_04h05uk" name="Update Subscription termination in progress">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/subscription/terminationInProgress/update'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') + 
',"terminationInProgress": false' +
',"terminationType": null' +
',"terminationDate": null}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('Update Subscription cancel termination in progress');
var resp = connector.getVariable('response')
print('Update Subscription cancel termination in progress: ' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_03ssgsg</bpmn:incoming>
      <bpmn:outgoing>Flow_1snnhdu</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0ype123">
      <bpmn:incoming>SequenceFlow_1lte0p2</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0vwztka</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0urgj1w</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1ud0nx6">
      <bpmn:incoming>SequenceFlow_11x6vxc</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_19ip028</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_177t7yd</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="ServiceTask_0gmudmt" name="Comment Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var zammadTicketSubscription= execution.getVariable('zammadTicketSubscription');
var url_tb= execution.getVariable('url_crm_support');
var ticketId= S(zammadTicketSubscription).prop("id").value();
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var termination = execution.getVariable('termination');
var planner = "gestionnaireevent@protectline.fr";
var comment = "Rétractation depuis le CRM ";

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('***Close and comment Ticket***');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_05nhxsz</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1mk304e</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_1lejqsk" name="Close Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var zammadTicketSubscription= execution.getVariable('zammadTicketSubscription');
var url_tb= execution.getVariable('url_crm_support');
var ticketId= S(zammadTicketSubscription).prop("id").value();
url_tb+'/api/support/v1/ticket/' + ticketId</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"stateId":4}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('***Close and comment Ticket***');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1mk304e</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1ea2dy1</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0tvnp2p" name="Comment Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var termination = execution.getVariable('termination');
var planner = "gestionnaireevent@protectline.fr";
var comment = "Rétractation depuis le CRM ";

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('***Close and comment Ticket***');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_04tfk9g</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0urgj1w</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_177t7yd</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0iu45en</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_1by0glz" name="Close Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"stateId":4}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('***Close and comment Ticket***');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0nbl3xg</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0jv4s35</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0esqexh" name="Close Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"stateId":4}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('***Close and comment Ticket***');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_05plh83</bpmn:incoming>
      <bpmn:incoming>Flow_1wmj6yv</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0xlz9ya</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0oc4eob" name="Comment Ticket - TERMINATION OK">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var termination = execution.getVariable('termination');
var planner = "gestionnaireevent@protectline.fr";
var comment = "Rétractation / Résiliation depuis le CRM";

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("update tickets");
var resp = connector.getVariable("response");
print("update comments and tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0cgxvw9</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_05plh83</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_07k0hrv" name="Add comment to the ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var termination = execution.getVariable('termination');
var comments = S(termination).prop("comments").value();

'{"comment":' + JSON.stringify(comments) + '}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("Add comment to the ticket");
var resp = connector.getVariable("response");
print("Add comment to the ticket : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1sokoc1</bpmn:incoming>
      <bpmn:outgoing>Flow_0s8tz0w</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_0nq1jfu" name="Comment Ticket - TERMINATION CANCELED">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var termination = execution.getVariable('termination');
var planner = "gestionnaireevent@protectline.fr";
var discount = null;

if (S(termination).hasProp("discount") &amp;&amp; S(termination).prop("discount").hasProp("discountDescription")) {
    discount = S(termination).prop("discount").prop("discountDescription").value();
}
var comment = "Annulation de la résiliation / rétractation depuis le CRM";
var ifDiscount = execution.getVariable('ifDiscount');

if (ifDiscount &amp;&amp; discount) {
    comment += " - Application de la promotion " + discount;
}

var result = {
    comment: comment,
    email: planner
};

JSON.stringify(result);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("update tickets");
var resp = connector.getVariable("response");
print("update comments and tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1socf2f</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1a6viwm</bpmn:incoming>
      <bpmn:incoming>Flow_0ovjmwf</bpmn:incoming>
      <bpmn:outgoing>Flow_1wmj6yv</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0xlz9ya" sourceRef="ServiceTask_0esqexh" targetRef="EndEvent_1fet437" />
    <bpmn:sequenceFlow id="SequenceFlow_19jagu2" sourceRef="ServiceTask_0c92c0x" targetRef="Activity_1d2p0r0" />
    <bpmn:sequenceFlow id="SequenceFlow_0cgxvw9" sourceRef="ServiceTask_1b8jo07" targetRef="ServiceTask_0oc4eob" />
    <bpmn:sequenceFlow id="Flow_0s8tz0w" sourceRef="Activity_07k0hrv" targetRef="ExclusiveGateway_0cbgrln" />
    <bpmn:sequenceFlow id="SequenceFlow_1x4908g" name="Status contrat = ACTIVE || SUSPENDED" sourceRef="ExclusiveGateway_0cbgrln" targetRef="ExclusiveGateway_0yccjgo">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${statusContrat== 'ACTIVE' || statusContrat== 'SUSPENDED'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0ukwmwk" sourceRef="ExclusiveGateway_0cbgrln" targetRef="ServiceTask_024xbgj">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${statusContrat== 'ATT'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1fgj54e" name="code status &#60;&#62; &#39;47&#39;" sourceRef="ExclusiveGateway_042ghel" targetRef="ServiceTask_0l0f9cp">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeStatus !='47'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1lte0p2" sourceRef="ServiceTask_0l0f9cp" targetRef="ExclusiveGateway_0ype123" />
    <bpmn:sequenceFlow id="SequenceFlow_0jv4s35" sourceRef="ServiceTask_1by0glz" targetRef="EndEvent_0y4ojw6" />
    <bpmn:sequenceFlow id="SequenceFlow_09ednhb" sourceRef="ServiceTask_024xbgj" targetRef="ExclusiveGateway_1ppxatp" />
    <bpmn:sequenceFlow id="SequenceFlow_0geoxa7" name="action = confirm" sourceRef="ExclusiveGateway_1ppxatp" targetRef="ExclusiveGateway_1wnng49">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${action== 'confirm'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1tqs4vm" name="action = cancel" sourceRef="ExclusiveGateway_1ppxatp" targetRef="ExclusiveGateway_0ph0dnn">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${action== 'cancel'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1nnyp37" name="code status &#60;&#62; &#39;47&#39;" sourceRef="ExclusiveGateway_0std9p4" targetRef="ServiceTask_0gvlcaf">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeStatus!='47'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_11x6vxc" sourceRef="ServiceTask_0gvlcaf" targetRef="ExclusiveGateway_1ud0nx6" />
    <bpmn:sequenceFlow id="Flow_1hs9m52" sourceRef="Activity_1ix27h6" targetRef="ExclusiveGateway_0dlfuar" />
    <bpmn:sequenceFlow id="SequenceFlow_0u6z4xm" name="RES" sourceRef="ExclusiveGateway_0dlfuar" targetRef="ExclusiveGateway_0n8vp20">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${terminationType== 'RES'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0a9ix91" name="RET" sourceRef="ExclusiveGateway_0dlfuar" targetRef="ExclusiveGateway_15ssxrn">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${terminationType== 'RET'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_06adcq7" name="&#60;&#62; [OS7,OS0G]" sourceRef="ExclusiveGateway_0n8vp20" targetRef="ExclusiveGateway_0osusol">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!legitimateReason}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1swrqbx" name="= [OS7,OS0G]" sourceRef="ExclusiveGateway_0n8vp20" targetRef="ExclusiveGateway_15ssxrn">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${legitimateReason}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0p5415b" name="Yes" sourceRef="ExclusiveGateway_0osusol" targetRef="ExclusiveGateway_1bgp8m0">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${engaged}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0v2074l" name="No" sourceRef="ExclusiveGateway_0osusol" targetRef="ExclusiveGateway_15ssxrn">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!engaged}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0h4yrha" sourceRef="ServiceTask_1dz152m" targetRef="ExclusiveGateway_15ssxrn" />
    <bpmn:sequenceFlow id="SequenceFlow_1hgjjqf" sourceRef="ServiceTask_176d2o4" targetRef="ExclusiveGateway_15ssxrn" />
    <bpmn:sequenceFlow id="SequenceFlow_1lg94ws" name="RES" sourceRef="ExclusiveGateway_15ssxrn" targetRef="Activity_1e4n6ty">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${terminationType== 'RES'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_03ssgsg" sourceRef="ServiceTask_1oyqt5x" targetRef="Activity_04h05uk" />
    <bpmn:sequenceFlow id="SequenceFlow_1obe75u" name="Orange" sourceRef="ExclusiveGateway_1bgp8m0" targetRef="ServiceTask_1dz152m">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${sellerName== 'ORANGE'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1q0ruio" name="Groupama" sourceRef="ExclusiveGateway_1bgp8m0" targetRef="ServiceTask_176d2o4">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${sellerName== 'GROUPAMA'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1x6cjbn" name="ifDiscount=true" sourceRef="ExclusiveGateway_0ph0dnn" targetRef="ServiceTask_0iat2h4">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ifDiscount==true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0rl17u0" sourceRef="ServiceTask_0iat2h4" targetRef="ExclusiveGateway_0std9p4" />
    <bpmn:sequenceFlow id="SequenceFlow_0p9jprw" name="ifDiscount=false" sourceRef="ExclusiveGateway_0ph0dnn" targetRef="ExclusiveGateway_0std9p4">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ifDiscount==false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1t22r3u" name="action = confirm" sourceRef="ExclusiveGateway_0yccjgo" targetRef="Activity_1ix27h6">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${action== 'confirm'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1jprzet" name="action = cancel" sourceRef="ExclusiveGateway_0yccjgo" targetRef="ExclusiveGateway_1od8mbh">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${action== 'cancel'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0he2ng7" name="ifDiscount=true" sourceRef="ExclusiveGateway_1od8mbh" targetRef="ServiceTask_1reyo93">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ifDiscount==true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1socf2f" name="ifDiscount=false" sourceRef="ExclusiveGateway_1od8mbh" targetRef="Activity_0nq1jfu">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ifDiscount==false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1a6viwm" sourceRef="ServiceTask_1reyo93" targetRef="Activity_0nq1jfu" />
    <bpmn:sequenceFlow id="SequenceFlow_1razuii" name="code status =[&#39;41&#39;,&#39;44&#39;,&#39;46&#39;,&#39;47&#39;,&#39;48&#39;,&#39;49&#39;]" sourceRef="ExclusiveGateway_1wnng49" targetRef="ExclusiveGateway_042ghel">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeStatus=='47' || codeStatus=='49' || codeStatus=='44' || codeStatus=='41' || codeStatus=='46'  || codeStatus=='48'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_11x5t0w" name="code status &#60;&#62; [&#39;41&#39;,&#39;44&#39;,&#39;46&#39;,,&#39;47&#39;,&#39;48&#39;,&#39;49&#39;]" sourceRef="ExclusiveGateway_1wnng49" targetRef="Activity_10xuzzl">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeStatus !='47' &amp;&amp; codeStatus !='49' &amp;&amp; codeStatus !='44' &amp;&amp; codeStatus !='41' &amp;&amp; codeStatus !='46' &amp;&amp; codeStatus !='48'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1od0991" sourceRef="ServiceTask_08y3sof" targetRef="ServiceTask_0nr9v65" />
    <bpmn:sequenceFlow id="SequenceFlow_05nhxsz" sourceRef="ServiceTask_0nr9v65" targetRef="ServiceTask_0gmudmt" />
    <bpmn:sequenceFlow id="SequenceFlow_1ea2dy1" sourceRef="ServiceTask_1lejqsk" targetRef="ServiceTask_02x0g8i" />
    <bpmn:sequenceFlow id="SequenceFlow_04tfk9g" sourceRef="ServiceTask_02x0g8i" targetRef="ServiceTask_0tvnp2p" />
    <bpmn:sequenceFlow id="SequenceFlow_0eeyuvr" name="code status =&#39;47&#39;" sourceRef="ExclusiveGateway_042ghel" targetRef="ServiceTask_17i8bng">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeStatus=='47'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0vwztka" sourceRef="ServiceTask_17i8bng" targetRef="ExclusiveGateway_0ype123" />
    <bpmn:sequenceFlow id="SequenceFlow_03q0fqq" name="code status =&#39;47&#39;" sourceRef="ExclusiveGateway_0std9p4" targetRef="ServiceTask_04mglp3">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeStatus=='47'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_19ip028" sourceRef="ServiceTask_04mglp3" targetRef="ExclusiveGateway_1ud0nx6" />
    <bpmn:sequenceFlow id="Flow_0ovjmwf" sourceRef="Activity_1tp3tk7" targetRef="Activity_0nq1jfu" />
    <bpmn:sequenceFlow id="SequenceFlow_0urgj1w" sourceRef="ExclusiveGateway_0ype123" targetRef="ServiceTask_0tvnp2p" />
    <bpmn:sequenceFlow id="SequenceFlow_177t7yd" sourceRef="ExclusiveGateway_1ud0nx6" targetRef="ServiceTask_0tvnp2p" />
    <bpmn:sequenceFlow id="SequenceFlow_1mk304e" sourceRef="ServiceTask_0gmudmt" targetRef="ServiceTask_1lejqsk" />
    <bpmn:sequenceFlow id="SequenceFlow_0iu45en" sourceRef="ServiceTask_0tvnp2p" targetRef="Gateway_1waqmy8" />
    <bpmn:sequenceFlow id="SequenceFlow_05plh83" sourceRef="ServiceTask_0oc4eob" targetRef="ServiceTask_0esqexh" />
    <bpmn:sequenceFlow id="Flow_1wmj6yv" sourceRef="Activity_0nq1jfu" targetRef="ServiceTask_0esqexh" />
    <bpmn:sequenceFlow id="Flow_1sokoc1" sourceRef="ServiceTask_1xmsfx4" targetRef="Activity_07k0hrv" />
    <bpmn:exclusiveGateway id="Gateway_0egrm7b" name="Paid dismantling?" default="Flow_0k3tms7">
      <bpmn:incoming>Flow_1snnhdu</bpmn:incoming>
      <bpmn:outgoing>Flow_0k3tms7</bpmn:outgoing>
      <bpmn:outgoing>Flow_174c3uy</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_0k3tms7" name="No" sourceRef="Gateway_0egrm7b" targetRef="ServiceTask_0c92c0x" />
    <bpmn:sequenceFlow id="Flow_174c3uy" name="yes" sourceRef="Gateway_0egrm7b" targetRef="Activity_0g2rxvs">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${paidIntervention}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_0g2rxvs" name="Send Message To Intervention">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_intervention');
url_tb+'/api/interventions/v1/camunda/terminateContract/send-installation'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscriptionCode = execution.getVariable('subscriptionCode');
var ticketNum = execution.getVariable('ticketNum');
var termination = execution.getVariable('termination');
var userAccountCode = S(termination).prop("user").prop("userAccountCode").value();
var sellerCode = S(termination).prop("seller").prop("sellerCode").value();
var idOffer = S(termination).prop("offer").prop("idOffer").value();

'{"subscriptionCode":' + subscriptionCode +
',"userAccountCode":"' + userAccountCode + '"' +
',"ticketNum":"' + ticketNum + '"' +
',"sellerCode":"' + sellerCode+ '"' +
',"idOffer":"' + idOffer+'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("Send Message To Intervention");
var resp = connector.getVariable("response");
print("Send Message To Intervention:" + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_174c3uy</bpmn:incoming>
      <bpmn:outgoing>Flow_0tmwcar</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0tmwcar" sourceRef="Activity_0g2rxvs" targetRef="Gateway_038fcb7" />
    <bpmn:serviceTask id="Activity_1d2p0r0" name="Terminate /Withdrawal contract">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/termination-contract'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("terminate contract");
var resp = connector.getVariable("response");
print("terminate contract :" + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_19jagu2</bpmn:incoming>
      <bpmn:incoming>Flow_04z5qqk</bpmn:incoming>
      <bpmn:outgoing>Flow_07ui2b6</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_07ui2b6" sourceRef="Activity_1d2p0r0" targetRef="Activity_1qheqew" />
    <bpmn:sequenceFlow id="Flow_1snnhdu" sourceRef="Activity_04h05uk" targetRef="Gateway_0egrm7b" />
    <bpmn:serviceTask id="Activity_1r54g4p" name="Apply dismanting charge" camunda:asyncBefore="true">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_contract');
var contractId= execution.getVariable('subscriptionCode');
contractId = contractId.toString().replace(/^"|"$/g, '');
url_tb+'/api/contract/v1/'+contractId+'/applyOneShotChargeInstance/dismantling'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('***Apply dismanting charge***');
var resp = connector.getVariable('response')
print('resp Apply dismanting charge' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0iu44y5</bpmn:incoming>
      <bpmn:outgoing>Flow_04z5qqk</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_04z5qqk" sourceRef="Activity_1r54g4p" targetRef="Activity_1d2p0r0" />
    <bpmn:serviceTask id="Activity_10xuzzl" name="Send Notification Withdrawal Contract">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var termination = execution.getVariable('termination');
var seller = S(termination).prop("seller");
var sellerCode = S(seller).prop("sellerCode").value();
var offer = S(termination).prop("offer");
var idOffer = S(offer).prop("idOffer").value();
var user = S(termination).prop("user");
var email = S(user).prop("email").value();
var mobile = S(user).prop("mobile").value();
var nomSeul = S(user).prop("lastName").value();
var civilite = S(user).prop("title").value();
var contractId = S(user).prop("userAccountCode").value();
var id = S(user).prop("ownerId").value();
var options = S(termination).prop("options").elements();

var isInstallation = false;

var optionsArray = [];
    var option = {
        serviceDescription: S(offer).prop("description").value()
    };
    optionsArray.push(option);

var json = {
    "nomOffreOuOption": idOffer,
    "contractId": contractId,
    "customerId": id,
    "seller": sellerCode,
    "identifiant": id,
    "options": optionsArray,
    "nomSeul": nomSeul,
    "civilite": civilite,
    "mobile": mobile,
    "isInstallation": isInstallation,
    "email": email
};

JSON.stringify(json);</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_notifications');
url_tb+'/api/v1/notifications/email/retract'</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0117i79">
              <camunda:script scriptFormat="JavaScript">print('Send notification first invoice');
var resp = connector.getVariable('response')
print('resp Send notification first invoice  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_11x5t0w</bpmn:incoming>
      <bpmn:outgoing>Flow_0m5emel</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0m5emel" sourceRef="Activity_10xuzzl" targetRef="ServiceTask_08y3sof" />
    <bpmn:sequenceFlow id="SequenceFlow_1qppr0j" name="RET" sourceRef="ExclusiveGateway_15ssxrn" targetRef="Activity_0i8bq2k">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${terminationType== 'RET'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_0i8bq2k" name="Send Notification Withdrawal Contract">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var termination = execution.getVariable('termination');
var seller = S(termination).prop("seller");
var sellerCode = S(seller).prop("sellerCode").value();
var offer = S(termination).prop("offer");
var idOffer = S(offer).prop("idOffer").value();
var user = S(termination).prop("user");
var email = S(user).prop("email").value();
var mobile = S(user).prop("mobile").value();
var nomSeul = S(user).prop("lastName").value();
var civilite = S(user).prop("title").value();
var contractId = S(user).prop("userAccountCode").value();
var id = S(user).prop("ownerId").value();
var options = S(termination).prop("options").elements();

var isInstallation = true;

var optionsArray = [];
for (var i = 0; i &lt; options.length; i++) {
    var option = {
        serviceId: S(options[i]).prop("idOption").value(),
        serviceDescription: S(options[i]).prop("description").value(),
        serialNumber: S(options[i]).prop("serialNumber").value()
    };
    optionsArray.push(option);
}

var json = {
    "nomOffreOuOption": idOffer,
    "contractId": contractId,
    "customerId": id,
    "seller": sellerCode,
    "identifiant": id,
    "options": optionsArray,
    "nomSeul": nomSeul,
    "civilite": civilite,
    "mobile": mobile,
    "isInstallation": isInstallation,
    "email": email
};

JSON.stringify(json);</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_notifications');
url_tb+'/api/v1/notifications/email/retract'</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0117i79">
              <camunda:script scriptFormat="JavaScript">print('Send notification first invoice');
var resp = connector.getVariable('response')
print('resp Send notification first invoice  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1qppr0j</bpmn:incoming>
      <bpmn:outgoing>Flow_1bgkik7</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1bgkik7" sourceRef="Activity_0i8bq2k" targetRef="Gateway_0lh9xk4" />
    <bpmn:sequenceFlow id="Flow_190dgna" name="Moving Underlying Termination Reason Code" sourceRef="Gateway_1qeqskf" targetRef="Gateway_187ha31">
      <bpmn:extensionElements>
        <camunda:executionListener expression="" event="take" />
      </bpmn:extensionElements>
    </bpmn:sequenceFlow>
    <bpmn:endEvent id="Event_1vs65lw">
      <bpmn:incoming>Flow_1pkbjhw</bpmn:incoming>
      <bpmn:incoming>Flow_0drx6f3</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:exclusiveGateway id="Gateway_187ha31">
      <bpmn:incoming>Flow_190dgna</bpmn:incoming>
      <bpmn:outgoing>Flow_1pkbjhw</bpmn:outgoing>
      <bpmn:outgoing>Flow_07nh7hi</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1pkbjhw" name="false" sourceRef="Gateway_187ha31" targetRef="Event_1vs65lw">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${movingTermination== false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:parallelGateway id="Gateway_1qeqskf">
      <bpmn:incoming>Flow_0azcxff</bpmn:incoming>
      <bpmn:outgoing>Flow_190dgna</bpmn:outgoing>
      <bpmn:outgoing>Flow_0c7qx98</bpmn:outgoing>
    </bpmn:parallelGateway>
    <bpmn:callActivity id="Activity_0n3aky9" name="Moving Address" calledElement="moving_address">
      <bpmn:extensionElements>
        <camunda:in businessKey="#{execution.processBusinessKey}" />
        <camunda:in variables="all" />
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_07nh7hi</bpmn:incoming>
      <bpmn:outgoing>Flow_0drx6f3</bpmn:outgoing>
    </bpmn:callActivity>
    <bpmn:sequenceFlow id="Flow_0drx6f3" sourceRef="Activity_0n3aky9" targetRef="Event_1vs65lw" />
    <bpmn:sequenceFlow id="Flow_07nh7hi" name="true" sourceRef="Gateway_187ha31" targetRef="Activity_0n3aky9">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${movingTermination== true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:receiveTask id="Task_076ghgl" name="Wait termination date" messageRef="Message_0fmcr48">
      <bpmn:incoming>Flow_0c7qx98</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0ahchbb</bpmn:outgoing>
    </bpmn:receiveTask>
    <bpmn:sequenceFlow id="SequenceFlow_0ahchbb" sourceRef="Task_076ghgl" targetRef="Activity_0z1qxxj" />
    <bpmn:sequenceFlow id="Flow_0c7qx98" sourceRef="Gateway_1qeqskf" targetRef="Task_076ghgl" />
    <bpmn:boundaryEvent id="BoundaryEvent_0eg6pzk" attachedToRef="Task_076ghgl">
      <bpmn:outgoing>SequenceFlow_1yxacci</bpmn:outgoing>
      <bpmn:timerEventDefinition id="TimerEventDefinition_00ce90k">
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${terminationDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:boundaryEvent>
    <bpmn:sequenceFlow id="SequenceFlow_1yxacci" sourceRef="BoundaryEvent_0eg6pzk" targetRef="ServiceTask_1oyqt5x" />
    <bpmn:exclusiveGateway id="Gateway_0lh9xk4">
      <bpmn:incoming>Flow_1bgkik7</bpmn:incoming>
      <bpmn:incoming>Flow_158lqg4</bpmn:incoming>
      <bpmn:outgoing>Flow_0azcxff</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_0azcxff" sourceRef="Gateway_0lh9xk4" targetRef="Gateway_1qeqskf" />
    <bpmn:serviceTask id="Activity_1e4n6ty" name="Send Notification Termination Contract">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var terminationCharge = parseFloat(execution.getVariable('terminationCharge')) * 1.2;

if (terminationCharge % 1 !== 0) {
    terminationCharge = Math.ceil(terminationCharge * 100) / 100;
    terminationCharge = terminationCharge.toFixed(2);
} else {
    terminationCharge = terminationCharge.toString();
}

'{"terminationRequest":' + execution.getVariable('termination') +',"terminationCharge":'+terminationCharge+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_notifications');
url_tb+'/api/v1/notifications/email/res-contract'</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0117i79">
              <camunda:script scriptFormat="JavaScript">print('Send notification first invoice');
var resp = connector.getVariable('response')
print('resp Send notification first invoice  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1lg94ws</bpmn:incoming>
      <bpmn:outgoing>Flow_158lqg4</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_158lqg4" sourceRef="Activity_1e4n6ty" targetRef="Gateway_0lh9xk4" />
    <bpmn:inclusiveGateway id="Gateway_1waqmy8">
      <bpmn:incoming>SequenceFlow_0iu45en</bpmn:incoming>
      <bpmn:outgoing>Flow_025v5ye</bpmn:outgoing>
      <bpmn:outgoing>Flow_0nbl3xg</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:serviceTask id="Activity_0wludn8" name="Change Email">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
var termination = execution.getVariable('termination');
var user = S(termination).prop("user");
var customerCode = user.prop("userAccountCode").value();

url_tb+'/api/v1/customers/' + customerCode + '/update'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PUT</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var termination = execution.getVariable('termination');
var user = S(termination).prop("user");
var title = user.prop("title").value() == 'M' ? 'MR' : 'MRS';
var firstName = user.prop("firstName").value();
var lastName = user.prop("lastName").value();
var customerCode = user.prop("userAccountCode").value();
var email = user.prop("email").value();
var mobile = user.prop("mobile").value();
mobile = mobile.startsWith('06') || mobile.startsWith('07') ? mobile.replace('0', '+33') : mobile;
var fixe = user.prop("phone").value();
fixe = fixe.startsWith('06') || fixe.startsWith('07') ? fixe.replace('0', '+33') : fixe;
var birthDate = user.prop("birthDate").value();
var birthCountry = user.prop("birthCountry").value();
var birthLocality = user.prop("birthLocality").value();

var lastIndexOfATInEmail = email.lastIndexOf('@');
if (lastIndexOfATInEmail != -1) {
  email = email.substring(0, lastIndexOfATInEmail) + '.old' + email.substring(lastIndexOfATInEmail);
}

'{"updateType": "customer",' +
'  "channel": "CRM",' +
'  "ticket": {' +
'    "title": "Modification données clients - Informations générales",' +
'    "channel": "receivedCall",' +
'    "event": "Modification données clients::Coordonnées",' +
'    "body": "Modification données clients - Informations générales",' +
'    "priorityId": 2,' +
'    "stateId": 1,' +
'    "ownerId": 1,' +
'    "groupId": 14' +
'  },' +
'  "customer": {' +
'    "code": "' + customerCode + '",' +
'    "name": {' +
'      "title": "' + title + '",' +
'      "firstName": "' + firstName + '",' +
'      "lastName": "' + lastName + '"' +
'    },' +
'    "contactInformation": {' +
'      "email": "' + email + '",' +
'      "mobile": "' + mobile + '",' +
'      "fixe": "' + fixe + '"' +
'    },' +
'    "birthDate": "' + birthDate + '",' +
'    "birthCountry": "' + birthCountry + '",' +
'    "birthLocality": "' + birthLocality + '"' +
'  }' +
'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('Change Email');
var resp = connector.getVariable('response')
print('resp Change Email : ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1bl6m9z</bpmn:incoming>
      <bpmn:outgoing>Flow_07o3y6q</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_025v5ye" name="Seller = ORANGE" sourceRef="Gateway_1waqmy8" targetRef="Event_1xweyjy">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">var termination = execution.getVariable('termination');
var seller = S(termination).prop("seller");
var parentSellerCode = seller.prop("parentSellerCode").value();

parentSellerCode != null &amp;&amp; parentSellerCode.toUpperCase() == 'ORANGE';</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0nbl3xg" sourceRef="Gateway_1waqmy8" targetRef="ServiceTask_1by0glz" />
    <bpmn:sequenceFlow id="Flow_07o3y6q" sourceRef="Activity_0wludn8" targetRef="EndEvent_0y4ojw6" />
    <bpmn:intermediateCatchEvent id="Event_1xweyjy">
      <bpmn:incoming>Flow_025v5ye</bpmn:incoming>
      <bpmn:outgoing>Flow_1bl6m9z</bpmn:outgoing>
      <bpmn:timerEventDefinition id="TimerEventDefinition_01wddwc">
        <bpmn:timeDuration xsi:type="bpmn:tFormalExpression">PT24H</bpmn:timeDuration>
      </bpmn:timerEventDefinition>
    </bpmn:intermediateCatchEvent>
    <bpmn:sequenceFlow id="Flow_1bl6m9z" sourceRef="Event_1xweyjy" targetRef="Activity_0wludn8" />
    <bpmn:serviceTask id="Activity_0z1qxxj" name="Send Notification Cancel Withdrawal / Termination">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var termination = execution.getVariable('termination');
var seller = S(termination).prop("seller");
var parentSellerCode= S(seller).prop("parentSellerCode").value();
var offer = S(termination).prop("offer");
var descriptionOffer = S(offer).prop("description").value();
var user = S(termination).prop("user");
var email = S(user).prop("email").value();
var mobile = S(user).prop("mobile").value();
var firstName = S(user).prop("firstName").value();
var lastName= S(user).prop("lastName").value();
var customerId = S(user).prop("userAccountCode").value();
var subscription = S(termination).prop("subscription");
var contractId = S(subscription).prop("code").value();
var terminationDate = S(termination).prop("terminationDate").value();

var json = {
    "offerName": descriptionOffer,
    "contractId": contractId,
    "customerId": customerId,
    "seller": parentSellerCode,
    "firstName": firstName,
    "lastName": lastName,
    "mobile": mobile,
    "email": email,
    "terminationDate": terminationDate
};

JSON.stringify(json);</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_notifications');
url_tb+'/api/v1/notifications/email/cancel-retract'</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0117i79">
              <camunda:script scriptFormat="JavaScript">print('Send Notification Cancel Withdrawal / Termination');
var resp = connector.getVariable('response')
print('resp Send Notification Cancel Withdrawal / Termination  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0ahchbb</bpmn:incoming>
      <bpmn:outgoing>Flow_0aclz1z</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0aclz1z" sourceRef="Activity_0z1qxxj" targetRef="Activity_1tp3tk7" />
    <bpmn:parallelGateway id="Gateway_038fcb7">
      <bpmn:incoming>Flow_0tmwcar</bpmn:incoming>
      <bpmn:outgoing>Flow_0rbzed5</bpmn:outgoing>
      <bpmn:outgoing>Flow_0iu44y5</bpmn:outgoing>
    </bpmn:parallelGateway>
    <bpmn:endEvent id="Event_1n4kv3n">
      <bpmn:incoming>Flow_1sz9uvo</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_0rbzed5" sourceRef="Gateway_038fcb7" targetRef="Activity_0vdnj6a" />
    <bpmn:sequenceFlow id="Flow_0iu44y5" sourceRef="Gateway_038fcb7" targetRef="Activity_1r54g4p" />
    <bpmn:callActivity id="Activity_0vdnj6a" name="Digit Interventions" camunda:asyncBefore="true" calledElement="digit_interventions">
      <bpmn:extensionElements>
        <camunda:in businessKey="#{execution.getVariable(&#39;ticketNum&#39;)}" />
        <camunda:inputOutput>
          <camunda:inputParameter name="contractId">
            <camunda:script scriptFormat="JavaScript">var raw = execution.getVariable("subscriptionCode");
var unquoted = raw.replace(/^"(.*)"$/, '$1');
unquoted;</camunda:script>
          </camunda:inputParameter>
          <camunda:inputParameter name="interventionType">RES_DMTP</camunda:inputParameter>
          <camunda:inputParameter name="customerId">
            <camunda:script scriptFormat="JavaScript">var termination = execution.getVariable('termination');
S(termination).prop("user").prop("userAccountCode").value();</camunda:script>
          </camunda:inputParameter>
          <camunda:inputParameter name="interventionNumber">
            <camunda:script scriptFormat="JavaScript">execution.getVariable('ticketNum');</camunda:script>
          </camunda:inputParameter>
        </camunda:inputOutput>
        <camunda:in source="interventionNumber" target="interventionNumber" local="true" />
        <camunda:in source="customerId" target="customerId" local="true" />
        <camunda:in source="interventionType" target="interventionType" local="true" />
        <camunda:in source="contractId" target="contractId" local="true" />
        <camunda:in variables="all" />
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0rbzed5</bpmn:incoming>
      <bpmn:outgoing>Flow_1sz9uvo</bpmn:outgoing>
    </bpmn:callActivity>
    <bpmn:sequenceFlow id="Flow_1sz9uvo" sourceRef="Activity_0vdnj6a" targetRef="Event_1n4kv3n" />
    <bpmn:serviceTask id="Activity_1qheqew" name="Cancel intervention to TeamTool">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_intervention');
url_tb+'/api/interventions/v1/camunda/terminateContract/send-cancel-intervention'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscriptionCode = execution.getVariable('subscriptionCode');
var termination = execution.getVariable('termination');
var userAccountCode = S(termination).prop("user").prop("userAccountCode").value();

'{"subscriptionCode":' + subscriptionCode +
',"userAccountCode":"' + userAccountCode + '"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("Cancel intervention to TeamTool");
var resp = connector.getVariable("response");
print("Cancel intervention to TeamTool response: " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_07ui2b6</bpmn:incoming>
      <bpmn:outgoing>Flow_1wxtzpf</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1wxtzpf" sourceRef="Activity_1qheqew" targetRef="ServiceTask_1b8jo07" />
    <bpmn:textAnnotation id="TextAnnotation_1kf4243">
      <bpmn:text>Après validation du formulaire de résiliation sur le CRM, le process est instancié  &amp; Création du ticket zammad</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0puoigz" sourceRef="StartEvent_1" targetRef="TextAnnotation_1kf4243" />
    <bpmn:textAnnotation id="TextAnnotation_1bl621a">
      <bpmn:text>récupération du token afin de pouvoir consommer les API de façon sécurisé</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0shi7wm" sourceRef="ServiceTask_1xmsfx4" targetRef="TextAnnotation_1bl621a" />
    <bpmn:textAnnotation id="TextAnnotation_0w9uln1">
      <bpmn:text>Temporisation de la résiliation jusqu'à J+1 de la date de résiliation demandée, à 1h du matin. Pendant toute la temporisation, l'annulation de la résiliation est possible</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0jkvw4r">
      <bpmn:text>Une fois la temporisation terminée, une demande d'envoi du bon chronopost + liste des équipements à retourner est envoyée à TeamTool Logistique</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_13rl0e8">
      <bpmn:text>Ajout du commentaire de clôture au ticket</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0sv9rtn">
      <bpmn:text>Le contrat est résilié et passe au statut RESILIATED</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0pwxo4z">
      <bpmn:text>Le contrat est résilié chez usage(TB + CEGEDEV)</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_1whwevb">
      <bpmn:text>Confirmation de la rétractation apres DFR. Il faut notifier le processus Subscription afin que le devis soit cloturé et que le tiket soit cloturé</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0tplpjp">
      <bpmn:text>J'applique la charge correspond aux frais de résiliation calculés (pénalités)</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0f256ta">
      <bpmn:text>Envoi d'un email au client qui accuse réception de la demande rétractation</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0xwu4zg">
      <bpmn:text>Envoi d'un email au client qui accuse réception de la demande résiliation</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_09az3qq">
      <bpmn:text>Calcul des frais de pénalité (l'ajout de la charge se fera + tard). ORANGE = Mois restants dûs abonnement</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0pj7dm8">
      <bpmn:text>Calcul des frais de pénalité (l'ajout de la charge se fera + tard). GROUPAMA = Mois restants dûs abonnement + 5 % de pénalité</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0bb5etb">
      <bpmn:text>permet de récupérer le code cloture en cours dans le processus subscription.
cela permettra de savoir quel est le receive task à notifier selon nle code cloture (47 ou 41/49)</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_19ewn0k">
      <bpmn:text>Ajouter les devices,pack,option au flux</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_1kp2ott">
      <bpmn:text>delete process subscription</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0om8mdi">
      <bpmn:text>Mettre à jour les customFields: terminationInProgress=true, terminationDate,
terminationMovingInProgress</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0yyzp4o">
      <bpmn:text>Si la résiliation est annulée à partir du CRM, mise à jour des customFields: terminationDate=null,terminationInprogress=false</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0zzm057">
      <bpmn:text>mise à jour customField: terminationInprogress=false</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_1mcd8fb">
      <bpmn:text>Ajoute le commentaire dans le tciket</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_15s3a9k">
      <bpmn:text>Ajout du commentaire d'annulation clôture au ticket</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0jdqifh" sourceRef="ServiceTask_0c92c0x" targetRef="TextAnnotation_0jkvw4r" />
    <bpmn:association id="Association_1pfmuq9" sourceRef="ServiceTask_1b8jo07" targetRef="TextAnnotation_0pwxo4z" />
    <bpmn:association id="Association_09z4y1z" sourceRef="ServiceTask_0l0f9cp" targetRef="TextAnnotation_1whwevb" />
    <bpmn:association id="Association_1pmey4c" sourceRef="ServiceTask_1oyqt5x" targetRef="TextAnnotation_0tplpjp" />
    <bpmn:association id="Association_0hg2b22" sourceRef="Activity_1e4n6ty" targetRef="TextAnnotation_0xwu4zg" />
    <bpmn:association id="Association_1iweqye" sourceRef="ServiceTask_1dz152m" targetRef="TextAnnotation_09az3qq" />
    <bpmn:association id="Association_03zgf1a" sourceRef="ServiceTask_176d2o4" targetRef="TextAnnotation_0pj7dm8" />
    <bpmn:association id="Association_03xfwz7" sourceRef="ServiceTask_02x0g8i" targetRef="TextAnnotation_1kp2ott" />
    <bpmn:association id="Association_1ck2wcu" sourceRef="Activity_1ix27h6" targetRef="TextAnnotation_0om8mdi" />
    <bpmn:association id="Association_1rq27vn" sourceRef="Activity_1tp3tk7" targetRef="TextAnnotation_0yyzp4o" />
    <bpmn:association id="Association_14l1gxe" sourceRef="Activity_04h05uk" targetRef="TextAnnotation_0zzm057" />
    <bpmn:association id="Association_1aryvqi" sourceRef="ServiceTask_0oc4eob" targetRef="TextAnnotation_13rl0e8" />
    <bpmn:association id="Association_0mcwc0f" sourceRef="Activity_07k0hrv" targetRef="TextAnnotation_1mcd8fb" />
    <bpmn:association id="Association_1x8yz10" sourceRef="Activity_0nq1jfu" targetRef="TextAnnotation_15s3a9k" />
    <bpmn:association id="Association_19bnfef" sourceRef="TextAnnotation_0sv9rtn" targetRef="Activity_1d2p0r0" />
    <bpmn:association id="Association_0zbhg1a" sourceRef="TextAnnotation_0f256ta" targetRef="Activity_0i8bq2k" />
    <bpmn:textAnnotation id="TextAnnotation_0xtct7z">
      <bpmn:text>customerId +
contractId +
new address +
prodcutOffering</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_1o03bez">
      <bpmn:text>Moving Termination</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1mjwgt8" sourceRef="Gateway_187ha31" targetRef="TextAnnotation_1o03bez" />
    <bpmn:association id="Association_0bg7xep" sourceRef="Activity_0n3aky9" targetRef="TextAnnotation_0xtct7z" />
    <bpmn:association id="Association_0q21223" sourceRef="Task_076ghgl" targetRef="TextAnnotation_0w9uln1" />
    <bpmn:textAnnotation id="TextAnnotation_1v50eef">
      <bpmn:text>On doit modifier l'email du client qui a rétracté</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1pb0mbs" sourceRef="Activity_0wludn8" targetRef="TextAnnotation_1v50eef" />
    <bpmn:textAnnotation id="TextAnnotation_03cehf0">
      <bpmn:text>Attente de 24h afin de laisser le temps pour la BI d envoyer le questionnaire</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1qcf3wk" sourceRef="TextAnnotation_03cehf0" targetRef="Event_1xweyjy" />
    <bpmn:textAnnotation id="TextAnnotation_1sbqtdq">
      <bpmn:text>Je récupère toutes les DI en cours et je génère le message Kafka</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0owczop" sourceRef="Activity_1qheqew" targetRef="TextAnnotation_1sbqtdq" />
  </bpmn:process>
  <bpmn:message id="Message_0aaoot7" name="terminationContractMessage" />
  <bpmn:message id="Message_0fmcr48" name="cancelTerminateContractMessage" />
  <bpmn:error id="Error_17k1fqc" name="Error_1q866fr" />
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="terminateContact">
      <bpmndi:BPMNShape id="TextAnnotation_15s3a9k_di" bpmnElement="TextAnnotation_15s3a9k">
        <dc:Bounds x="4040" y="545" width="140" height="55" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_13rl0e8_di" bpmnElement="TextAnnotation_13rl0e8">
        <dc:Bounds x="3820" y="985" width="120" height="55" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_012q1h7" bpmnElement="TextAnnotation_0pwxo4z">
        <dc:Bounds x="3640" y="979" width="100" height="68" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1sbqtdq_di" bpmnElement="TextAnnotation_1sbqtdq">
        <dc:Bounds x="3450" y="986" width="150.00000452447415" height="54.85544848035582" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_1sz9uvo_di" bpmnElement="Flow_1sz9uvo">
        <di:waypoint x="3290" y="1290" />
        <di:waypoint x="3382" y="1290" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0iu44y5_di" bpmnElement="Flow_0iu44y5">
        <di:waypoint x="3265" y="1170" />
        <di:waypoint x="3320" y="1170" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0rbzed5_di" bpmnElement="Flow_0rbzed5">
        <di:waypoint x="3240" y="1195" />
        <di:waypoint x="3240" y="1250" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0aclz1z_di" bpmnElement="Flow_0aclz1z">
        <di:waypoint x="2930" y="676" />
        <di:waypoint x="3170" y="676" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1bl6m9z_di" bpmnElement="Flow_1bl6m9z">
        <di:waypoint x="2350" y="1228" />
        <di:waypoint x="2350" y="1270" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_07o3y6q_di" bpmnElement="Flow_07o3y6q">
        <di:waypoint x="2400" y="1310" />
        <di:waypoint x="2650" y="1310" />
        <di:waypoint x="2650" y="1146" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0nbl3xg_di" bpmnElement="Flow_0nbl3xg">
        <di:waypoint x="2375" y="1128" />
        <di:waypoint x="2500" y="1128" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_1ay0nw0" bpmnElement="Flow_025v5ye" bioc:stroke="#1e88e5" color:border-color="#1e88e5">
        <di:waypoint x="2350" y="1153" />
        <di:waypoint x="2350" y="1192" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2365" y="1158" width="89" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_158lqg4_di" bpmnElement="Flow_158lqg4">
        <di:waypoint x="2340" y="676" />
        <di:waypoint x="2410" y="676" />
        <di:waypoint x="2410" y="563" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0azcxff_di" bpmnElement="Flow_0azcxff">
        <di:waypoint x="2435" y="538" />
        <di:waypoint x="2492" y="538" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0yq5u0h" bpmnElement="SequenceFlow_1yxacci">
        <di:waypoint x="2661" y="734" />
        <di:waypoint x="2661" y="860" />
        <di:waypoint x="2598" y="860" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0c7qx98_di" bpmnElement="Flow_0c7qx98">
        <di:waypoint x="2517" y="563" />
        <di:waypoint x="2517" y="676" />
        <di:waypoint x="2580" y="676" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_110z3na" bpmnElement="SequenceFlow_0ahchbb">
        <di:waypoint x="2680" y="676" />
        <di:waypoint x="2830" y="676" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_07nh7hi_di" bpmnElement="Flow_07nh7hi">
        <di:waypoint x="2665" y="407" />
        <di:waypoint x="2800" y="407" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2695" y="384" width="19" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0drx6f3_di" bpmnElement="Flow_0drx6f3">
        <di:waypoint x="2900" y="407" />
        <di:waypoint x="3022" y="407" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1pkbjhw_di" bpmnElement="Flow_1pkbjhw">
        <di:waypoint x="2640" y="432" />
        <di:waypoint x="2640" y="477" />
        <di:waypoint x="3040" y="477" />
        <di:waypoint x="3040" y="425" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2731" y="463" width="23" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_190dgna_di" bpmnElement="Flow_190dgna">
        <di:waypoint x="2517" y="513" />
        <di:waypoint x="2517" y="407" />
        <di:waypoint x="2615" y="407" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2526" y="433" width="68" height="53" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1bgkik7_di" bpmnElement="Flow_1bgkik7">
        <di:waypoint x="2340" y="538" />
        <di:waypoint x="2385" y="538" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0drq2h7" bpmnElement="SequenceFlow_1qppr0j">
        <di:waypoint x="2144" y="651" />
        <di:waypoint x="2144" y="530" />
        <di:waypoint x="2240" y="530" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2179" y="484" width="23" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0m5emel_di" bpmnElement="Flow_0m5emel">
        <di:waypoint x="1210" y="1128" />
        <di:waypoint x="1240" y="1128" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_04z5qqk_di" bpmnElement="Flow_04z5qqk">
        <di:waypoint x="3370" y="1130" />
        <di:waypoint x="3370" y="900" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1snnhdu_di" bpmnElement="Flow_1snnhdu">
        <di:waypoint x="2810" y="860" />
        <di:waypoint x="2965" y="860" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_07ui2b6_di" bpmnElement="Flow_07ui2b6">
        <di:waypoint x="3420" y="860" />
        <di:waypoint x="3450" y="860" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0tmwcar_di" bpmnElement="Flow_0tmwcar">
        <di:waypoint x="3150" y="1170" />
        <di:waypoint x="3215" y="1170" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_174c3uy_di" bpmnElement="Flow_174c3uy">
        <di:waypoint x="2990" y="885" />
        <di:waypoint x="2990" y="1170" />
        <di:waypoint x="3050" y="1170" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2998" y="1025" width="17" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0k3tms7_di" bpmnElement="Flow_0k3tms7">
        <di:waypoint x="3015" y="860" />
        <di:waypoint x="3080" y="860" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3040" y="842" width="15" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1sokoc1_di" bpmnElement="Flow_1sokoc1">
        <di:waypoint x="400" y="676" />
        <di:waypoint x="520" y="676" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1wmj6yv_di" bpmnElement="Flow_1wmj6yv">
        <di:waypoint x="3940" y="716" />
        <di:waypoint x="3940" y="820" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_1go20ms" bpmnElement="SequenceFlow_05plh83">
        <di:waypoint x="3840" y="860" />
        <di:waypoint x="3890" y="860" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0iu45en_di" bpmnElement="SequenceFlow_0iu45en">
        <di:waypoint x="2280" y="1128" />
        <di:waypoint x="2325" y="1128" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1mk304e_di" bpmnElement="SequenceFlow_1mk304e">
        <di:waypoint x="1630" y="1128" />
        <di:waypoint x="1670" y="1128" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_177t7yd_di" bpmnElement="SequenceFlow_177t7yd">
        <di:waypoint x="2230" y="1204" />
        <di:waypoint x="2230" y="1168" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0urgj1w_di" bpmnElement="SequenceFlow_0urgj1w">
        <di:waypoint x="2230" y="1025" />
        <di:waypoint x="2230" y="1088" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ovjmwf_di" bpmnElement="Flow_0ovjmwf">
        <di:waypoint x="3270" y="676" />
        <di:waypoint x="3890" y="676" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_19ip028_di" bpmnElement="SequenceFlow_19ip028">
        <di:waypoint x="2060" y="1219" />
        <di:waypoint x="2180" y="1219" />
        <di:waypoint x="2180" y="1229" />
        <di:waypoint x="2205" y="1229" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_03q0fqq_di" bpmnElement="SequenceFlow_03q0fqq">
        <di:waypoint x="1360" y="1294" />
        <di:waypoint x="1360" y="1219" />
        <di:waypoint x="1960" y="1219" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1378" y="1193" width="83" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0vwztka_di" bpmnElement="SequenceFlow_0vwztka">
        <di:waypoint x="2010" y="889" />
        <di:waypoint x="2230" y="889" />
        <di:waypoint x="2230" y="975" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0eeyuvr_di" bpmnElement="SequenceFlow_0eeyuvr">
        <di:waypoint x="1270" y="975" />
        <di:waypoint x="1270" y="889" />
        <di:waypoint x="1910" y="889" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1599" y="862" width="83" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_04tfk9g_di" bpmnElement="SequenceFlow_04tfk9g">
        <di:waypoint x="2030" y="1128" />
        <di:waypoint x="2180" y="1128" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1ea2dy1_di" bpmnElement="SequenceFlow_1ea2dy1">
        <di:waypoint x="1770" y="1128" />
        <di:waypoint x="1930" y="1128" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_05nhxsz_di" bpmnElement="SequenceFlow_05nhxsz">
        <di:waypoint x="1490" y="1128" />
        <di:waypoint x="1530" y="1128" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1od0991_di" bpmnElement="SequenceFlow_1od0991">
        <di:waypoint x="1340" y="1128" />
        <di:waypoint x="1390" y="1128" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_11x5t0w_di" bpmnElement="SequenceFlow_11x5t0w">
        <di:waypoint x="1090" y="1025" />
        <di:waypoint x="1090" y="1118" />
        <di:waypoint x="1110" y="1118" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1091" y="1020" width="85" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1razuii_di" bpmnElement="SequenceFlow_1razuii">
        <di:waypoint x="1115" y="1000" />
        <di:waypoint x="1245" y="1000" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1137" y="949" width="88" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0si25t9" bpmnElement="SequenceFlow_1a6viwm">
        <di:waypoint x="1244" y="119" />
        <di:waypoint x="3940" y="119" />
        <di:waypoint x="3940" y="636" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0ayiarj" bpmnElement="SequenceFlow_1socf2f">
        <di:waypoint x="879" y="249" />
        <di:waypoint x="3940" y="249" />
        <di:waypoint x="3940" y="636" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="981" y="222" width="79" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_14ny0mq" bpmnElement="SequenceFlow_0he2ng7">
        <di:waypoint x="854" y="224" />
        <di:waypoint x="854" y="119" />
        <di:waypoint x="1144" y="119" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="968" y="92" width="74" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_07hnq89" bpmnElement="SequenceFlow_1jprzet">
        <di:waypoint x="854" y="651" />
        <di:waypoint x="854" y="274" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="778" y="492" width="74" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_178cf70" bpmnElement="SequenceFlow_1t22r3u">
        <di:waypoint x="879" y="676" />
        <di:waypoint x="1054" y="676" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="891" y="658" width="79" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0fbw0u1" bpmnElement="SequenceFlow_0p9jprw">
        <di:waypoint x="1159" y="1319" />
        <di:waypoint x="1335" y="1319" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1211" y="1293" width="79" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_1tguuyl" bpmnElement="SequenceFlow_0rl17u0">
        <di:waypoint x="1360" y="1399" />
        <di:waypoint x="1360" y="1344" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_07q6wrx" bpmnElement="SequenceFlow_1x6cjbn">
        <di:waypoint x="1134" y="1344" />
        <di:waypoint x="1134" y="1439" />
        <di:waypoint x="1310" y="1439" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1194" y="1442" width="74" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0xg416y" bpmnElement="SequenceFlow_1q0ruio">
        <di:waypoint x="1864" y="651" />
        <di:waypoint x="1864" y="525" />
        <di:waypoint x="1965" y="525" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1873" y="501" width="53" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_1rfxa2d" bpmnElement="SequenceFlow_1obe75u">
        <di:waypoint x="1889" y="676" />
        <di:waypoint x="1965" y="676" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1910" y="658" width="37" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_06he9wo" bpmnElement="SequenceFlow_03ssgsg">
        <di:waypoint x="2598" y="860" />
        <di:waypoint x="2710" y="860" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0mcj737" bpmnElement="SequenceFlow_1lg94ws">
        <di:waypoint x="2169" y="676" />
        <di:waypoint x="2240" y="676" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2186" y="658" width="23" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0i156pu" bpmnElement="SequenceFlow_1hgjjqf">
        <di:waypoint x="2065" y="525" />
        <di:waypoint x="2144" y="525" />
        <di:waypoint x="2144" y="651" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0ukjub9" bpmnElement="SequenceFlow_0h4yrha">
        <di:waypoint x="2065" y="676" />
        <di:waypoint x="2119" y="676" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_1fwmkpx" bpmnElement="SequenceFlow_0v2074l">
        <di:waypoint x="1759" y="701" />
        <di:waypoint x="1759" y="825" />
        <di:waypoint x="2144" y="825" />
        <di:waypoint x="2144" y="701" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1807" y="795" width="15" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_1nrm6dr" bpmnElement="SequenceFlow_0p5415b">
        <di:waypoint x="1784" y="676" />
        <di:waypoint x="1839" y="676" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1781" y="659" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0822vb0" bpmnElement="SequenceFlow_1swrqbx">
        <di:waypoint x="1650" y="701" />
        <di:waypoint x="1650" y="825" />
        <di:waypoint x="2144" y="825" />
        <di:waypoint x="2144" y="701" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1667" y="782" width="72" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_117g1nk" bpmnElement="SequenceFlow_06adcq7">
        <di:waypoint x="1675" y="676" />
        <di:waypoint x="1734" y="676" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1666" y="646" width="78" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_1jqvmh2" bpmnElement="SequenceFlow_0a9ix91">
        <di:waypoint x="1523" y="701" />
        <di:waypoint x="1523" y="824" />
        <di:waypoint x="2144" y="824" />
        <di:waypoint x="2144" y="701" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1551" y="796" width="23" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_13t7cbu" bpmnElement="SequenceFlow_0u6z4xm">
        <di:waypoint x="1548" y="676" />
        <di:waypoint x="1625" y="676" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1577" y="658" width="23" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1hs9m52_di" bpmnElement="Flow_1hs9m52">
        <di:waypoint x="1154" y="676" />
        <di:waypoint x="1498" y="676" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_11x6vxc_di" bpmnElement="SequenceFlow_11x6vxc">
        <di:waypoint x="2010" y="1359" />
        <di:waypoint x="2010" y="1379" />
        <di:waypoint x="2230" y="1379" />
        <di:waypoint x="2230" y="1254" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1nnyp37_di" bpmnElement="SequenceFlow_1nnyp37">
        <di:waypoint x="1385" y="1319" />
        <di:waypoint x="1960" y="1319" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1383" y="1286" width="73" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0frx4kj" bpmnElement="SequenceFlow_1tqs4vm">
        <di:waypoint x="964" y="1025" />
        <di:waypoint x="964" y="1319" />
        <di:waypoint x="1109" y="1319" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1022" y="1293" width="74" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0r199by" bpmnElement="SequenceFlow_0geoxa7">
        <di:waypoint x="989" y="1000" />
        <di:waypoint x="1065" y="1000" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="991" y="962" width="79" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_09ednhb_di" bpmnElement="SequenceFlow_09ednhb">
        <di:waypoint x="880" y="1000" />
        <di:waypoint x="939" y="1000" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0jv4s35_di" bpmnElement="SequenceFlow_0jv4s35">
        <di:waypoint x="2600" y="1128" />
        <di:waypoint x="2632" y="1128" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1lte0p2_di" bpmnElement="SequenceFlow_1lte0p2">
        <di:waypoint x="2010" y="1000" />
        <di:waypoint x="2205" y="1000" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1fgj54e_di" bpmnElement="SequenceFlow_1fgj54e">
        <di:waypoint x="1295" y="1000" />
        <di:waypoint x="1910" y="1000" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1566" y="965" width="73" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ukwmwk_di" bpmnElement="Flow_0ukwmwk">
        <di:waypoint x="702" y="701" />
        <di:waypoint x="702" y="1000" />
        <di:waypoint x="780" y="1000" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_1gxglr1" bpmnElement="SequenceFlow_1x4908g">
        <di:waypoint x="727" y="676" />
        <di:waypoint x="829" y="676" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="718" y="639" width="78" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0s8tz0w_di" bpmnElement="Flow_0s8tz0w">
        <di:waypoint x="620" y="676" />
        <di:waypoint x="677" y="676" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0cgxvw9_di" bpmnElement="SequenceFlow_0cgxvw9">
        <di:waypoint x="3690" y="860" />
        <di:waypoint x="3740" y="860" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0lfauja" bpmnElement="SequenceFlow_19jagu2">
        <di:waypoint x="3180" y="860" />
        <di:waypoint x="3320" y="860" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0xlz9ya_di" bpmnElement="SequenceFlow_0xlz9ya">
        <di:waypoint x="3990" y="860" />
        <di:waypoint x="4052" y="860" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_06bhpo8_di" bpmnElement="SequenceFlow_06bhpo8">
        <di:waypoint x="218" y="676" />
        <di:waypoint x="300" y="676" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1wxtzpf_di" bpmnElement="Flow_1wxtzpf">
        <di:waypoint x="3550" y="860" />
        <di:waypoint x="3590" y="860" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="StartEvent_1yx2wbc_di" bpmnElement="StartEvent_1">
        <dc:Bounds x="182" y="658" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1fj0w3l" bpmnElement="EndEvent_1fet437">
        <dc:Bounds x="4052" y="842" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0m377tn" bpmnElement="ServiceTask_0esqexh">
        <dc:Bounds x="3890" y="820" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0hbpuan" bpmnElement="Activity_0nq1jfu">
        <dc:Bounds x="3890" y="636" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_17kqzsh" bpmnElement="ServiceTask_1b8jo07">
        <dc:Bounds x="3590" y="820" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0oc4eob_di" bpmnElement="ServiceTask_0oc4eob">
        <dc:Bounds x="3740" y="820" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_114gt3b" bpmnElement="Activity_1qheqew">
        <dc:Bounds x="3450" y="820" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0t3dl1a_di" bpmnElement="Activity_1xfw40h" isExpanded="true">
        <dc:Bounds x="824" y="1528" width="690" height="300" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_0dg3u2e_di" bpmnElement="Flow_0dg3u2e">
        <di:waypoint x="1180" y="1740" />
        <di:waypoint x="1340" y="1740" />
        <di:waypoint x="1340" y="1668" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1r4zwpj_di" bpmnElement="Flow_1r4zwpj">
        <di:waypoint x="980" y="1653" />
        <di:waypoint x="980" y="1740" />
        <di:waypoint x="1080" y="1740" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1o5162a_di" bpmnElement="Flow_1o5162a">
        <di:waypoint x="1005" y="1628" />
        <di:waypoint x="1080" y="1628" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_05ddlp1_di" bpmnElement="Flow_05ddlp1">
        <di:waypoint x="900" y="1628" />
        <di:waypoint x="955" y="1628" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0w5y08e_di" bpmnElement="Flow_0w5y08e">
        <di:waypoint x="1390" y="1628" />
        <di:waypoint x="1442" y="1628" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0mssr82_di" bpmnElement="Flow_0mssr82">
        <di:waypoint x="1180" y="1628" />
        <di:waypoint x="1290" y="1628" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Event_05dtp51_di" bpmnElement="Event_1871wws">
        <dc:Bounds x="864" y="1610" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_183elzo_di" bpmnElement="Activity_1kuco63">
        <dc:Bounds x="1080" y="1588" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0olm21z_di" bpmnElement="Activity_0z4q4a2">
        <dc:Bounds x="1290" y="1588" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1cuh8n4_di" bpmnElement="Event_1cuh8n4">
        <dc:Bounds x="1442" y="1610" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_046h11n" bpmnElement="Activity_16c7b8i">
        <dc:Bounds x="1080" y="1700" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0qwpip0_di" bpmnElement="Gateway_0qwpip0" isMarkerVisible="true">
        <dc:Bounds x="955" y="1603" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1xmsfx4_di" bpmnElement="ServiceTask_1xmsfx4">
        <dc:Bounds x="300" y="636" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_00x6qg7" bpmnElement="ServiceTask_0c92c0x">
        <dc:Bounds x="3080" y="820" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_18wlkx8" bpmnElement="ExclusiveGateway_0cbgrln" isMarkerVisible="true">
        <dc:Bounds x="677" y="651" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0ivorsm" bpmnElement="ServiceTask_0l0f9cp">
        <dc:Bounds x="1910" y="960" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0noxpwy" bpmnElement="EndEvent_0y4ojw6">
        <dc:Bounds x="2632" y="1110" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0lmcsm5" bpmnElement="ExclusiveGateway_1ppxatp" isMarkerVisible="true">
        <dc:Bounds x="939" y="975" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1jyfsza" bpmnElement="ServiceTask_0gvlcaf">
        <dc:Bounds x="1960" y="1279" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_01a9709" bpmnElement="ExclusiveGateway_0dlfuar" isMarkerVisible="true">
        <dc:Bounds x="1498" y="651" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1484" y="617" width="81" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0o3xqc1" bpmnElement="ExclusiveGateway_0n8vp20" isMarkerVisible="true">
        <dc:Bounds x="1625" y="651" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1624" y="612" width="54" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_17nwcdo" bpmnElement="ExclusiveGateway_0osusol" isMarkerVisible="true">
        <dc:Bounds x="1734" y="651" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1736" y="616" width="45" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_02zqdk0" bpmnElement="ExclusiveGateway_15ssxrn" isMarkerVisible="true">
        <dc:Bounds x="2119" y="651" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2107" y="711" width="78" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_124m78s" bpmnElement="ServiceTask_1oyqt5x">
        <dc:Bounds x="2498" y="820" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_14byg8k" bpmnElement="ServiceTask_1dz152m">
        <dc:Bounds x="1965" y="636" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1d44uyx" bpmnElement="ExclusiveGateway_1bgp8m0" isMarkerVisible="true">
        <dc:Bounds x="1839" y="651" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1ham7yz" bpmnElement="ServiceTask_176d2o4">
        <dc:Bounds x="1965" y="485" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_14fh20d" bpmnElement="ServiceTask_0iat2h4">
        <dc:Bounds x="1310" y="1399" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0pm35y5" bpmnElement="ExclusiveGateway_0ph0dnn" isMarkerVisible="true">
        <dc:Bounds x="1109" y="1294" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0qdnl2y" bpmnElement="ExclusiveGateway_0yccjgo" isMarkerVisible="true">
        <dc:Bounds x="829" y="651" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1iykju1" bpmnElement="ExclusiveGateway_1od8mbh" isMarkerVisible="true">
        <dc:Bounds x="829" y="224" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_11yge8m" bpmnElement="ServiceTask_1reyo93">
        <dc:Bounds x="1144" y="79" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_024xbgj_di" bpmnElement="ServiceTask_024xbgj">
        <dc:Bounds x="780" y="960" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1wnng49_di" bpmnElement="ExclusiveGateway_1wnng49" isMarkerVisible="true">
        <dc:Bounds x="1065" y="975" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_08y3sof_di" bpmnElement="ServiceTask_08y3sof">
        <dc:Bounds x="1240" y="1088" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0nr9v65_di" bpmnElement="ServiceTask_0nr9v65">
        <dc:Bounds x="1390" y="1088" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_02x0g8i_di" bpmnElement="ServiceTask_02x0g8i">
        <dc:Bounds x="1930" y="1088" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_042ghel_di" bpmnElement="ExclusiveGateway_042ghel" isMarkerVisible="true">
        <dc:Bounds x="1245" y="975" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_17i8bng_di" bpmnElement="ServiceTask_17i8bng">
        <dc:Bounds x="1910" y="849" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0std9p4_di" bpmnElement="ExclusiveGateway_0std9p4" isMarkerVisible="true">
        <dc:Bounds x="1335" y="1294" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_04mglp3_di" bpmnElement="ServiceTask_04mglp3">
        <dc:Bounds x="1960" y="1179" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1ix27h6_di" bpmnElement="Activity_1ix27h6">
        <dc:Bounds x="1054" y="636" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1tp3tk7_di" bpmnElement="Activity_1tp3tk7">
        <dc:Bounds x="3170" y="636" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_04h05uk_di" bpmnElement="Activity_04h05uk">
        <dc:Bounds x="2710" y="820" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0ype123_di" bpmnElement="ExclusiveGateway_0ype123" isMarkerVisible="true">
        <dc:Bounds x="2205" y="975" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1ud0nx6_di" bpmnElement="ExclusiveGateway_1ud0nx6" isMarkerVisible="true">
        <dc:Bounds x="2205" y="1204" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0gmudmt_di" bpmnElement="ServiceTask_0gmudmt">
        <dc:Bounds x="1530" y="1088" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1lejqsk_di" bpmnElement="ServiceTask_1lejqsk">
        <dc:Bounds x="1670" y="1088" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0tvnp2p_di" bpmnElement="ServiceTask_0tvnp2p">
        <dc:Bounds x="2180" y="1088" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1by0glz_di" bpmnElement="ServiceTask_1by0glz">
        <dc:Bounds x="2500" y="1088" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1e5iilu" bpmnElement="Activity_07k0hrv">
        <dc:Bounds x="520" y="636" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0egrm7b_di" bpmnElement="Gateway_0egrm7b" isMarkerVisible="true">
        <dc:Bounds x="2965" y="835" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2946" y="796" width="88" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0x9kkxs" bpmnElement="Activity_0g2rxvs">
        <dc:Bounds x="3050" y="1130" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_07nmtbk" bpmnElement="Activity_1d2p0r0">
        <dc:Bounds x="3320" y="820" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0s6n9lj" bpmnElement="Activity_1r54g4p">
        <dc:Bounds x="3320" y="1130" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0untzmu" bpmnElement="Activity_10xuzzl">
        <dc:Bounds x="1110" y="1088" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_07rctyt" bpmnElement="Activity_0i8bq2k">
        <dc:Bounds x="2240" y="498" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1vs65lw_di" bpmnElement="Event_1vs65lw">
        <dc:Bounds x="3022" y="389" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_187ha31_di" bpmnElement="Gateway_187ha31" isMarkerVisible="true">
        <dc:Bounds x="2615" y="382" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1sdiqav_di" bpmnElement="Gateway_1qeqskf">
        <dc:Bounds x="2492" y="513" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1ckjvbz_di" bpmnElement="Activity_0n3aky9">
        <dc:Bounds x="2800" y="367" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0ly39rz" bpmnElement="Task_076ghgl">
        <dc:Bounds x="2580" y="636" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0lh9xk4_di" bpmnElement="Gateway_0lh9xk4" isMarkerVisible="true">
        <dc:Bounds x="2385" y="513" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1qzwa6o" bpmnElement="Activity_1e4n6ty">
        <dc:Bounds x="2240" y="636" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0qlzxfx" bpmnElement="Gateway_1waqmy8" bioc:stroke="#1e88e5" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#1e88e5">
        <dc:Bounds x="2325" y="1103" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_04yh6c8" bpmnElement="Activity_0wludn8" bioc:stroke="#1e88e5" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#1e88e5">
        <dc:Bounds x="2300" y="1270" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0unmc5i_di" bpmnElement="Event_1xweyjy">
        <dc:Bounds x="2332" y="1192" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1aogrrm" bpmnElement="Activity_0z1qxxj">
        <dc:Bounds x="2830" y="636" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1xtq4tk_di" bpmnElement="Gateway_038fcb7" bioc:stroke="#0d4372" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#0d4372">
        <dc:Bounds x="3215" y="1145" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1n4kv3n_di" bpmnElement="Event_1n4kv3n">
        <dc:Bounds x="3382" y="1272" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_07g4zon" bpmnElement="Activity_0vdnj6a" bioc:stroke="#0d4372" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#0d4372">
        <dc:Bounds x="3190" y="1250" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1kf4243_di" bpmnElement="TextAnnotation_1kf4243">
        <dc:Bounds x="159" y="499" width="110" height="107" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1bl621a_di" bpmnElement="TextAnnotation_1bl621a">
        <dc:Bounds x="329" y="504" width="100" height="96" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1viisul" bpmnElement="TextAnnotation_0w9uln1">
        <dc:Bounds x="2620" y="505" width="200" height="96" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0m8toli" bpmnElement="TextAnnotation_0jkvw4r">
        <dc:Bounds x="3060" y="975" width="170" height="96" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0fo61tn" bpmnElement="TextAnnotation_0sv9rtn">
        <dc:Bounds x="3400" y="719" width="100" height="70" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1mqs82e" bpmnElement="TextAnnotation_1whwevb">
        <dc:Bounds x="1210" y="719" width="100" height="147" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_10k5x5t" bpmnElement="TextAnnotation_0tplpjp">
        <dc:Bounds x="2430" y="969" width="100" height="107" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_14n850v" bpmnElement="TextAnnotation_0f256ta">
        <dc:Bounds x="2348" y="344" width="100" height="93" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1vk832w" bpmnElement="TextAnnotation_0xwu4zg">
        <dc:Bounds x="2269" y="800" width="100" height="93" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_10cme5y" bpmnElement="TextAnnotation_09az3qq">
        <dc:Bounds x="1814" y="322" width="100" height="137" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1ggqjy4" bpmnElement="TextAnnotation_0pj7dm8">
        <dc:Bounds x="2069" y="315" width="100" height="151" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_070pm9q" bpmnElement="TextAnnotation_0bb5etb">
        <dc:Bounds x="664" y="1088" width="220" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0aftfi8" bpmnElement="TextAnnotation_19ewn0k">
        <dc:Bounds x="1437" y="556" width="100" height="53" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1kp2ott_di" bpmnElement="TextAnnotation_1kp2ott">
        <dc:Bounds x="2050" y="1019" width="100" height="40" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0om8mdi_di" bpmnElement="TextAnnotation_0om8mdi">
        <dc:Bounds x="1050" y="487" width="193.99130504148053" height="69.99840459476707" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0yyzp4o_di" bpmnElement="TextAnnotation_0yyzp4o">
        <dc:Bounds x="3110" y="489" width="315" height="71" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0zzm057_di" bpmnElement="TextAnnotation_0zzm057">
        <dc:Bounds x="2620" y="966" width="100" height="68" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1mcd8fb_di" bpmnElement="TextAnnotation_1mcd8fb">
        <dc:Bounds x="580" y="510" width="170" height="40" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0xtct7z_di" bpmnElement="TextAnnotation_0xtct7z">
        <dc:Bounds x="2950" y="280" width="99.99202297383536" height="69.99840459476707" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1o03bez_di" bpmnElement="TextAnnotation_1o03bez">
        <dc:Bounds x="2570" y="322" width="100" height="41" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_09eh8m8" bpmnElement="TextAnnotation_1v50eef">
        <dc:Bounds x="2410" y="1410" width="140" height="41" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_03cehf0_di" bpmnElement="TextAnnotation_03cehf0">
        <dc:Bounds x="2437" y="1191" width="160.99865459076628" height="55.330634278002705" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Association_1x8yz10_di" bpmnElement="Association_1x8yz10">
        <di:waypoint x="3987" y="639" />
        <di:waypoint x="4040" y="598" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_17sxayq" bpmnElement="Association_1pfmuq9">
        <di:waypoint x="3652" y="900" />
        <di:waypoint x="3679" y="979" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1aryvqi_di" bpmnElement="Association_1aryvqi">
        <di:waypoint x="3816" y="900" />
        <di:waypoint x="3864" y="985" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0owczop_di" bpmnElement="Association_0owczop">
        <di:waypoint x="3493" y="900" />
        <di:waypoint x="3503" y="986" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="BPMNShape_1gcjwta" bpmnElement="BoundaryEvent_0eg6pzk">
        <dc:Bounds x="2643" y="698" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Association_0puoigz_di" bpmnElement="Association_0puoigz">
        <di:waypoint x="202" y="658" />
        <di:waypoint x="209" y="606" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0shi7wm_di" bpmnElement="Association_0shi7wm">
        <di:waypoint x="359" y="636" />
        <di:waypoint x="368" y="600" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0b1zou7" bpmnElement="Association_0jdqifh">
        <di:waypoint x="3134" y="900" />
        <di:waypoint x="3140" y="975" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_1u69wmi" bpmnElement="Association_09z4y1z">
        <di:waypoint x="1910" y="986" />
        <di:waypoint x="1310" y="808" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_1p7b2gb" bpmnElement="Association_1pmey4c">
        <di:waypoint x="2531" y="900" />
        <di:waypoint x="2503" y="969" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0wv0e73" bpmnElement="Association_0hg2b22">
        <di:waypoint x="2310" y="716" />
        <di:waypoint x="2316" y="800" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0svtysc" bpmnElement="Association_1iweqye">
        <di:waypoint x="1994" y="636" />
        <di:waypoint x="1900" y="459" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_04wr9m1" bpmnElement="Association_03zgf1a">
        <di:waypoint x="2046" y="485" />
        <di:waypoint x="2069" y="455" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_03xfwz7_di" bpmnElement="Association_03xfwz7">
        <di:waypoint x="2028" y="1092" />
        <di:waypoint x="2073" y="1059" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1ck2wcu_di" bpmnElement="Association_1ck2wcu">
        <di:waypoint x="1104" y="636" />
        <di:waypoint x="1104" y="557" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1rq27vn_di" bpmnElement="Association_1rq27vn">
        <di:waypoint x="3217" y="636" />
        <di:waypoint x="3210" y="560" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_14l1gxe_di" bpmnElement="Association_14l1gxe">
        <di:waypoint x="2733" y="900" />
        <di:waypoint x="2689" y="966" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0mcwc0f_di" bpmnElement="Association_0mcwc0f">
        <di:waypoint x="586" y="636" />
        <di:waypoint x="620" y="550" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_19bnfef_di" bpmnElement="Association_19bnfef">
        <di:waypoint x="3424" y="789" />
        <di:waypoint x="3406" y="820" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0zbhg1a_di" bpmnElement="Association_0zbhg1a">
        <di:waypoint x="2358" y="437" />
        <di:waypoint x="2307" y="498" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1mjwgt8_di" bpmnElement="Association_1mjwgt8">
        <di:waypoint x="2634" y="388" />
        <di:waypoint x="2625" y="363" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0bg7xep_di" bpmnElement="Association_0bg7xep">
        <di:waypoint x="2899" y="373" />
        <di:waypoint x="2950" y="338" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0nea4y2" bpmnElement="Association_0q21223">
        <di:waypoint x="2660" y="636" />
        <di:waypoint x="2685" y="601" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_13qf878" bpmnElement="Association_1pb0mbs">
        <di:waypoint x="2387" y="1350" />
        <di:waypoint x="2443" y="1410" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1qcf3wk_di" bpmnElement="Association_1qcf3wk">
        <di:waypoint x="2437" y="1215" />
        <di:waypoint x="2368" y="1211" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
