<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:bioc="http://bpmn.io/schema/bpmn/biocolor/1.0" xmlns:color="http://www.omg.org/spec/BPMN/non-normative/color/1.0" id="Definitions_0d3x0sy" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="5.0.0">
  <bpmn:process id="SAVDev" name="SAV Dev" isExecutable="true">
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>SequenceFlow_0a09xtg</bpmn:outgoing>
      <bpmn:messageEventDefinition id="MessageEventDefinition_0ewd8zo" messageRef="Message_0fqysoq" />
    </bpmn:startEvent>
    <bpmn:sequenceFlow id="SequenceFlow_0a09xtg" sourceRef="StartEvent_1" targetRef="ServiceTask_0gm089m" />
    <bpmn:endEvent id="EndEvent_00mdgpg">
      <bpmn:incoming>SequenceFlow_1l15t47</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:intermediateCatchEvent id="IntermediateThrowEvent_0499ekx">
      <bpmn:incoming>SequenceFlow_1h7gsgv</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1xywe1m</bpmn:incoming>
      <bpmn:incoming>Flow_183y98x</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1yiyxa7</bpmn:outgoing>
      <bpmn:messageEventDefinition id="MessageEventDefinition_1x6pg0a" messageRef="Message_14qexns" />
    </bpmn:intermediateCatchEvent>
    <bpmn:subProcess id="SubProcess_1o9po8l" triggeredByEvent="true">
      <bpmn:startEvent id="StartEvent_1bsx0ac">
        <bpmn:outgoing>SequenceFlow_1cem39o</bpmn:outgoing>
        <bpmn:errorEventDefinition id="ErrorEventDefinition_1trdp50" errorRef="Error_1oezyn4" camunda:errorMessageVariable="errorTaskId" />
      </bpmn:startEvent>
      <bpmn:userTask id="UserTask_0obzlbe" name="Review Task">
        <bpmn:incoming>SequenceFlow_1jjqfb8</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_08prpyx</bpmn:outgoing>
      </bpmn:userTask>
      <bpmn:endEvent id="EndEvent_1lvotgy">
        <bpmn:incoming>SequenceFlow_1q5714o</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:scriptTask id="ScriptTask_18ao0a7" name="Return to Last Task" camunda:asyncBefore="true" camunda:jobPriority="1" scriptFormat="JavaScript">
        <bpmn:extensionElements>
          <camunda:failedJobRetryTimeCycle>R5/PT5S</camunda:failedJobRetryTimeCycle>
        </bpmn:extensionElements>
        <bpmn:incoming>SequenceFlow_08prpyx</bpmn:incoming>
        <bpmn:incoming>SequenceFlow_0x24x4j</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_1q5714o</bpmn:outgoing>
        <bpmn:script>print('Return to flow is Running');
var errorTaskId = execution.getVariable('errorTaskId');
if(errorTaskId == null){
print('No where to go back to');
}else{          execution.getProcessEngineServices().
getRuntimeService().createProcessInstanceModification(execution.getProcessInstanceId()).startBeforeActivity(errorTaskId).
execute();
}</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="SequenceFlow_1q5714o" sourceRef="ScriptTask_18ao0a7" targetRef="EndEvent_1lvotgy" />
      <bpmn:sequenceFlow id="SequenceFlow_08prpyx" sourceRef="UserTask_0obzlbe" targetRef="ScriptTask_18ao0a7" />
      <bpmn:sequenceFlow id="SequenceFlow_1cem39o" sourceRef="StartEvent_1bsx0ac" targetRef="ExclusiveGateway_1rog5p1" />
      <bpmn:serviceTask id="ServiceTask_0cvm0xc" name="Refresh Token">
        <bpmn:extensionElements>
          <camunda:connector>
            <camunda:inputOutput>
              <camunda:inputParameter name="url">
                <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/realms/protectline/protocol/openid-connect/token'</camunda:script>
              </camunda:inputParameter>
              <camunda:inputParameter name="method">POST</camunda:inputParameter>
              <camunda:inputParameter name="headers">
                <camunda:map>
                  <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                  <camunda:entry key="Accept">application/json</camunda:entry>
                  <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
                </camunda:map>
              </camunda:inputParameter>
              <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
              <camunda:outputParameter name="Output_1b9kukr">
                <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
              </camunda:outputParameter>
            </camunda:inputOutput>
            <camunda:connectorId>http-connector</camunda:connectorId>
          </camunda:connector>
        </bpmn:extensionElements>
        <bpmn:incoming>SequenceFlow_1eo1qjx</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_0x24x4j</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:exclusiveGateway id="ExclusiveGateway_1rog5p1">
        <bpmn:incoming>SequenceFlow_1cem39o</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_1jjqfb8</bpmn:outgoing>
        <bpmn:outgoing>SequenceFlow_1eo1qjx</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="SequenceFlow_1jjqfb8" sourceRef="ExclusiveGateway_1rog5p1" targetRef="UserTask_0obzlbe">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode != 401}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="SequenceFlow_1eo1qjx" sourceRef="ExclusiveGateway_1rog5p1" targetRef="ServiceTask_0cvm0xc">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode == 401}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="SequenceFlow_0x24x4j" sourceRef="ServiceTask_0cvm0xc" targetRef="ScriptTask_18ao0a7" />
    </bpmn:subProcess>
    <bpmn:serviceTask id="ServiceTask_0gm089m" name="Get keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/realms/Protectline/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1tcqe5d">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0a09xtg</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_13xo6fd</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_13xo6fd" sourceRef="ServiceTask_0gm089m" targetRef="ServiceTask_0vbo0zx" />
    <bpmn:serviceTask id="ServiceTask_0whs6p4" name="Add comment ticket end Intervention">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var afterSalesCammunda = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto = S(afterSalesCammunda).prop('afterSalesRequestDto');
var ticketId = S(afterSalesRequestDto).prop("ticketId").value();
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var endInterventionTeamToolDto = execution.getVariable('endInterventionTeamToolDto');
var comment = '';
var planner = '';

if (endInterventionTeamToolDto != null &amp;&amp; S(endInterventionTeamToolDto).hasProp("shortSubscription")) {
  var shortSubscription = S(endInterventionTeamToolDto).prop("shortSubscription");
  var afterSalesDto = S(shortSubscription).prop("afterSales");

  var interventionReport = S(afterSalesDto).prop("interventionReport").value();
  if (interventionReport != null) {
    comment = interventionReport;
    planner = "gestionnaireevent@protectline.fr";
  }
}
if (endInterventionTeamToolDto != null &amp;&amp; S(endInterventionTeamToolDto).hasProp("status")) {
  var status = S(endInterventionTeamToolDto).prop("status");
  if (S(status).hasProp("criURL")) {
    var criURL = S(status).prop("criURL").value();
    if (criURL) {
      comment += '\nURL CRI : ' + new java.net.URI(criURL).toURL();
    }
  }
}


var jsonPayload = JSON.stringify({
  comment: comment,
  email: planner
});

jsonPayload;</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1e1tjg3">
              <camunda:script scriptFormat="JavaScript">print('Add comment ticket end Intervention');
var resp = connector.getVariable('response')
print('resp Add comment ticket end Intervention : ' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1un1tcg</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_15vemhq</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0ipc575</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0ipc575" sourceRef="ServiceTask_0whs6p4" targetRef="ServiceTask_0p1vbi6" />
    <bpmn:intermediateCatchEvent id="IntermediateCatchEvent_0shx360">
      <bpmn:incoming>Flow_0fba909</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1302cr0</bpmn:outgoing>
      <bpmn:messageEventDefinition id="MessageEventDefinition_1quh0kv" messageRef="Message_0lcj4ha" />
    </bpmn:intermediateCatchEvent>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0f9h9t6">
      <bpmn:incoming>SequenceFlow_1yiyxa7</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_14v2apk</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_00l23oe</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_02fa1d9</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="ServiceTask_063q40r" name="Add Comment Ticket Cancel Appointment">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var afterSalesCammunda = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto = S(afterSalesCammunda).prop('afterSalesRequestDto');
var ticketId = S(afterSalesRequestDto).prop("ticketId").value();
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");
var cancelAppointment = S(subscription).prop("cancelAppointment");
var reasonCode = S(cancelAppointment).prop("reasonCode").value();
var reasonLabel = S(cancelAppointment).prop("reasonLabel").value();
var planner = S(cancelAppointment).prop("planner").value();
var comment= "Annulation du RDV : " + reasonCode + " - " + reasonLabel;

'{"comment":"' + comment + '"' +
',"email":"' + planner + '"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('Add Comment Ticket Cancel Appointment');
var resp = connector.getVariable('response')
print('resp Add Comment Ticket Cancel Appointment : ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0nf2535</bpmn:incoming>
      <bpmn:outgoing>Flow_0tcpiaw</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0nf2535" name="Cancel Appointment" sourceRef="ExclusiveGateway_0g6rr69" targetRef="ServiceTask_063q40r">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnInstallStatus== 'CANCELED_APPOINTMENT'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_14v2apk" name="Validate intervention&#10;&#10;" sourceRef="ExclusiveGateway_0f9h9t6" targetRef="InclusiveGateway_1ehx8ez">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnPlanifStatus== 'VALIDATED_INTERVENTION'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1h7gsgv" name="reasonCode in [53, 54, 55, 56]" sourceRef="Gateway_1gkq9de" targetRef="IntermediateThrowEvent_0499ekx">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${reasonCode=="53" || reasonCode=="54" || reasonCode=="55" || reasonCode=="56"}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_0p1vbi6" name="Close Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var afterSalesCammunda = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto = S(afterSalesCammunda).prop('afterSalesRequestDto');
var ticketId = S(afterSalesRequestDto).prop("ticketId").value();
url_tb+'/api/support/v1/ticket/' + ticketId</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"stateId":4}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1e1tjg3">
              <camunda:script scriptFormat="JavaScript">print('fermer ticket zammad api');
var resp = connector.getVariable('response')
print('resp fermer ticket zammad : ' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0ipc575</bpmn:incoming>
      <bpmn:incoming>Flow_1wv7u7k</bpmn:incoming>
      <bpmn:incoming>Flow_03f0r23</bpmn:incoming>
      <bpmn:incoming>Flow_17bsu40</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1l15t47</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1l15t47" sourceRef="ServiceTask_0p1vbi6" targetRef="EndEvent_00mdgpg" />
    <bpmn:serviceTask id="ServiceTask_1uakyl7" name="Add Comment Ticket Unreachable Customer">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var afterSalesCammunda = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto = S(afterSalesCammunda).prop('afterSalesRequestDto');
var ticketId = S(afterSalesRequestDto).prop("ticketId").value();
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");
var unreachableCustomer = S(subscription).prop("unreachableCustomer");

var numberOfCalls = S(unreachableCustomer).prop("numberOfCalls").value();
var recall = S(unreachableCustomer).prop("recall").value();
var planner = S(unreachableCustomer).prop("planner").value();
var comment = "Client injoignable : " + "\\n" + " nombre d’appel effectué :  " + numberOfCalls + "\\n" + "Date de rappel prévu : " + recall;

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***CancelAppointment *** Add Comment Ticket***');
var resp = connector.getVariable('response')
print('resp CancelAppointment *** Add Comment Ticket  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_00l23oe</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1xywe1m</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_00l23oe" name="Unreachable Customer" sourceRef="ExclusiveGateway_0f9h9t6" targetRef="ServiceTask_1uakyl7">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnPlanifStatus== 'UNREACHABLE_CUSTOMER'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1xywe1m" sourceRef="ServiceTask_1uakyl7" targetRef="IntermediateThrowEvent_0499ekx" />
    <bpmn:inclusiveGateway id="InclusiveGateway_1ehx8ez">
      <bpmn:incoming>SequenceFlow_14v2apk</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0cxxz8q</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1qf1hqz</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:intermediateCatchEvent id="IntermediateCatchEvent_1g7evjk">
      <bpmn:incoming>SequenceFlow_1qf1hqz</bpmn:incoming>
      <bpmn:outgoing>Flow_1jis34w</bpmn:outgoing>
      <bpmn:messageEventDefinition id="MessageEventDefinition_002r4tc" messageRef="Message_1g82wb4" />
    </bpmn:intermediateCatchEvent>
    <bpmn:sequenceFlow id="SequenceFlow_02fa1d9" name="Cancel Intervention" sourceRef="ExclusiveGateway_0f9h9t6" targetRef="Activity_07260vw">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnPlanifStatus== 'CANCELED_INTERVENTION'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_1s92zes" name="Update data Customer and Site">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/interventions/updateDataCustomer'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"afterSalesCammunda":' + execution.getVariable('afterSalesCammundaDto') +',"toolPlanificationDto":' + execution.getVariable('toolPlanificationDto') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***CancelAppointment *** Add Comment Ticket***');
var resp = connector.getVariable('response')
print('resp CancelAppointment *** Add Comment Ticket  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
execution.setVariable('updateDataError',false);
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
execution.setVariable('updateDataError',true);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0tlrqib</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1070r1r</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1k7bw8z</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:userTask id="UserTask_1h3z8gn" name="Review Task">
      <bpmn:incoming>SequenceFlow_01yf43r</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_06xqczc</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:userTask id="UserTask_1lhl2u6" name="Review Task">
      <bpmn:incoming>SequenceFlow_059mkk3</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1070r1r</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_06q01tu">
      <bpmn:incoming>SequenceFlow_0sodgtf</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0tlrqib</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_01yf43r</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1b438ge">
      <bpmn:incoming>SequenceFlow_1k7bw8z</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_059mkk3</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1lf7fm8</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:endEvent id="EndEvent_0eiqx34">
      <bpmn:incoming>SequenceFlow_1lf7fm8</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="SequenceFlow_0tlrqib" sourceRef="ExclusiveGateway_06q01tu" targetRef="ServiceTask_1s92zes">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!addCommentError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1070r1r" sourceRef="UserTask_1lhl2u6" targetRef="ServiceTask_1s92zes" />
    <bpmn:sequenceFlow id="SequenceFlow_1k7bw8z" sourceRef="ServiceTask_1s92zes" targetRef="ExclusiveGateway_1b438ge" />
    <bpmn:sequenceFlow id="SequenceFlow_01yf43r" sourceRef="ExclusiveGateway_06q01tu" targetRef="UserTask_1h3z8gn">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${addCommentError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_059mkk3" sourceRef="ExclusiveGateway_1b438ge" targetRef="UserTask_1lhl2u6">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${updateDataError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1lf7fm8" sourceRef="ExclusiveGateway_1b438ge" targetRef="EndEvent_0eiqx34" />
    <bpmn:serviceTask id="ServiceTask_18tpia1" name="Add Comment Ticket validated intervention" camunda:asyncAfter="true">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var afterSalesCammunda = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto = S(afterSalesCammunda).prop('afterSalesRequestDto');
var ticketId = S(afterSalesRequestDto).prop("ticketId").value();
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");
var validatedIntervention = S(subscription).prop("validatedIntervention");

var installationDate = S(validatedIntervention).prop("installationDate").value();
var installer = S(validatedIntervention).prop("installer").value();
var planner = S(validatedIntervention).prop("planner").value();
var comment = "Intervention planifiée pour le "+installationDate+" et réalisée par "+installer;

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***CancelAppointment *** Add Comment Ticket***');
var resp = connector.getVariable('response');
print('resp CancelAppointment *** Add Comment Ticket  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
execution.setVariable('addCommentError',false);
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
execution.setVariable('addCommentError',true);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0cxxz8q</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_06xqczc</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0sodgtf</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0sodgtf" sourceRef="ServiceTask_18tpia1" targetRef="ExclusiveGateway_06q01tu" />
    <bpmn:sequenceFlow id="SequenceFlow_0cxxz8q" sourceRef="InclusiveGateway_1ehx8ez" targetRef="ServiceTask_18tpia1">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_06xqczc" sourceRef="UserTask_1h3z8gn" targetRef="ServiceTask_18tpia1" />
    <bpmn:sequenceFlow id="SequenceFlow_1yiyxa7" sourceRef="IntermediateThrowEvent_0499ekx" targetRef="ExclusiveGateway_0f9h9t6" />
    <bpmn:serviceTask id="ServiceTask_0n89uuv" name="Add Comment Ticket Devices">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var afterSalesCammunda = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto = S(afterSalesCammunda).prop('afterSalesRequestDto');
var ticketId = S(afterSalesRequestDto).prop("ticketId").value();
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var comment = "Equipement(s) mis en SAV : " + execution.getVariable('codeDescriptionFromListDevice');

print('***Email userEmail ***'+execution.getVariable('userEmail'));

'{"comment":"' + comment+ '"' +
',"email":"' + execution.getVariable('userEmail') +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_28o3f9u">
              <camunda:script scriptFormat="JavaScript">print('***Add comment containing equipment list to zammad ticket ***');
var resp = connector.getVariable('response')
print('resp comment ticket' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');
execution.setVariable('isValidData','true');
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1e3aygy</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1jidq3m</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1jidq3m" sourceRef="ServiceTask_0n89uuv" targetRef="ServiceTask_0xe0swy" />
    <bpmn:sequenceFlow id="SequenceFlow_1un1tcg" sourceRef="ExclusiveGateway_1xwu451" targetRef="ServiceTask_0whs6p4" />
    <bpmn:exclusiveGateway id="ExclusiveGateway_0g6rr69">
      <bpmn:incoming>Flow_1jis34w</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0en3zul</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_15vemhq</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0nf2535</bpmn:outgoing>
      <bpmn:outgoing>Flow_17714wi</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0en3zul" name="= 0 || 25" sourceRef="ExclusiveGateway_0g6rr69" targetRef="Activity_1kxne4s">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${statusCode != "" &amp;&amp; (statusCode=="0" || statusCode=="25")}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_15vemhq" name="&#60;&#62; 0 | 25" sourceRef="ExclusiveGateway_0g6rr69" targetRef="ServiceTask_0whs6p4">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${statusCode != "" &amp;&amp; (statusCode!="0" || statusCode!="25")}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_0vbo0zx" name="Add Comment Intervention Number">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var afterSalesCammunda = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto = S(afterSalesCammunda).prop('afterSalesRequestDto');
var ticketId = S(afterSalesRequestDto).prop("ticketId").value();
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var afterSalesCammunda = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto = S(afterSalesCammunda).prop('afterSalesRequestDto');
var interventionNumber = S(afterSalesRequestDto).prop("interventionNumber").value();
var comment= "N° de DI : " + interventionNumber;

'{"comment":"' + comment + '"' +
',"email":"gestionnaireevent@protectline.fr"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_28o3f9u">
              <camunda:script scriptFormat="JavaScript">print('***Add comment containing equipment list to zammad ticket ***');
var resp = connector.getVariable('response')
print('resp comment ticket' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');
execution.setVariable('isValidData','true');
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_13xo6fd</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_06kadl7</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_06kadl7" sourceRef="ServiceTask_0vbo0zx" targetRef="Activity_0016vfz" />
    <bpmn:serviceTask id="ServiceTask_0xe0swy" name="Send Notification">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/notifications/email/aftersales'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"afterSalesCammundaDto":' + execution.getVariable('afterSalesCammundaDto') +',"paidIntervention":' + execution.getVariable('paidIntervention') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('*** Send Notification ***');
var resp = connector.getVariable('response')
print('resp Send Notification *** ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1jidq3m</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1oe3z3w</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1oe3z3w" sourceRef="ServiceTask_0xe0swy" targetRef="ExclusiveGateway_1l4dokz" />
    <bpmn:sequenceFlow id="SequenceFlow_1qf1hqz" sourceRef="InclusiveGateway_1ehx8ez" targetRef="IntermediateCatchEvent_1g7evjk" />
    <bpmn:sequenceFlow id="SequenceFlow_1302cr0" sourceRef="IntermediateCatchEvent_0shx360" targetRef="ExclusiveGateway_103yuhn" />
    <bpmn:exclusiveGateway id="ExclusiveGateway_103yuhn">
      <bpmn:incoming>SequenceFlow_1302cr0</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0i83824</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1tq7rah</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0i83824" sourceRef="ExclusiveGateway_103yuhn" targetRef="ServiceTask_142wdgh">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${paidIntervention==true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_142wdgh" name="Apply charge sav">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/interventions/one-shot-charge-instance-no-intervention'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('afterSalesCammundaDto');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***Calculate Intervention fee***');
var resp = connector.getVariable('response')
print('resp Calculate Intervention fee  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0i83824</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0m3bcer</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0m3bcer" sourceRef="ServiceTask_142wdgh" targetRef="Activity_02m80of" />
    <bpmn:sequenceFlow id="SequenceFlow_1tq7rah" sourceRef="ExclusiveGateway_103yuhn" targetRef="Activity_02m80of">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${paidIntervention==false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_0016vfz" name="Get Comment device">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/interventions/getCommentFromDevicesList'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"afterSalesCammundaDto":' + execution.getVariable('afterSalesCammundaDto') + ',"userEmail":"' + execution.getVariable('userEmail') +'"}'</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_17ndt2c">
              <camunda:script scriptFormat="JavaScript">print('Get codeDescriptionFromDeviceList');
var resp = connector.getVariable('response')
print('resp codeDescriptionFromDeviceList' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
execution.setVariable("codeDescriptionFromListDevice", resp);
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_06kadl7</bpmn:incoming>
      <bpmn:outgoing>Flow_1e3aygy</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1e3aygy" sourceRef="Activity_0016vfz" targetRef="ServiceTask_0n89uuv" />
    <bpmn:inclusiveGateway id="ExclusiveGateway_1l4dokz">
      <bpmn:incoming>SequenceFlow_1oe3z3w</bpmn:incoming>
      <bpmn:outgoing>Flow_1jqf7ov</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1ik00px</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:serviceTask id="Activity_1p1leg7" name="Send Message to Logistic">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_intervention');
url_tb+'/api/interventions/v1/camunda/sav/send-event-new-intervention-logistics'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var devicesLogistics = execution.getVariable('devicesLogistics');
var afterSalesCammundaDto = execution.getVariable('afterSalesCammundaDto');
var logisticsAfterSales = S(afterSalesCammundaDto).prop('devices', S(devicesLogistics));

logisticsAfterSales.toString();</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_17ndt2c">
              <camunda:script scriptFormat="JavaScript">print('Demande sav logistique api');
var resp = connector.getVariable('response')
print('resp Demande une intervention' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0lji7w7</bpmn:incoming>
      <bpmn:incoming>Flow_1ponany</bpmn:incoming>
      <bpmn:outgoing>Flow_0fba909</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_07k1nml" name="Delete device">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">DELETE</camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_crm_device = execution.getVariable('url_crm_device');
var deviceLogisticsId = S(execution.getVariable('deviceLogisticsId')).stringValue();

url_crm_device + '/api/device/v1/' + deviceLogisticsId + '/delete'</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2jt0tjf">
              <camunda:script scriptFormat="JavaScript">print('Delete device api');
var resp = connector.getVariable('response')
print('resp Delete device api' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0r7ehyv</bpmn:incoming>
      <bpmn:outgoing>Flow_0lji7w7</bpmn:outgoing>
      <bpmn:multiInstanceLoopCharacteristics camunda:collection="${S(deviceConnectedLogisticsId).elements()}" camunda:elementVariable="deviceLogisticsId" />
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="Gateway_1ifgsof" default="Flow_1ponany">
      <bpmn:incoming>Flow_1jqf7ov</bpmn:incoming>
      <bpmn:outgoing>Flow_1ponany</bpmn:outgoing>
      <bpmn:outgoing>Flow_0r7ehyv</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_0lji7w7" sourceRef="Activity_07k1nml" targetRef="Activity_1p1leg7" />
    <bpmn:sequenceFlow id="Flow_1ponany" name="No" sourceRef="Gateway_1ifgsof" targetRef="Activity_1p1leg7" />
    <bpmn:sequenceFlow id="Flow_0r7ehyv" name="Yes" sourceRef="Gateway_1ifgsof" targetRef="Activity_07k1nml">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">var deviceConnectedLogisticsId  = S(execution.getVariable('deviceConnectedLogisticsId'));
!(deviceConnectedLogisticsId.isNull() || deviceConnectedLogisticsId.elements().isEmpty())</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0fba909" sourceRef="Activity_1p1leg7" targetRef="IntermediateCatchEvent_0shx360" />
    <bpmn:sequenceFlow id="Flow_1jqf7ov" name="LOGISTIQUE" sourceRef="ExclusiveGateway_1l4dokz" targetRef="Gateway_1ifgsof">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${interventionType=="MULTI" || interventionType=="LOGISTIQUE"}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1jis34w" sourceRef="IntermediateCatchEvent_1g7evjk" targetRef="ExclusiveGateway_0g6rr69" />
    <bpmn:endEvent id="Event_0213vqj">
      <bpmn:incoming>Flow_030u886</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:inclusiveGateway id="ExclusiveGateway_1xwu451">
      <bpmn:incoming>Flow_1byutex</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1un1tcg</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0se50t1</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:exclusiveGateway id="Gateway_1gkq9de">
      <bpmn:incoming>Flow_0tcpiaw</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1h7gsgv</bpmn:outgoing>
      <bpmn:outgoing>Flow_1wv7u7k</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_0tcpiaw" sourceRef="ServiceTask_063q40r" targetRef="Gateway_1gkq9de" />
    <bpmn:sequenceFlow id="Flow_1wv7u7k" name="reasonCode = 52" sourceRef="Gateway_1gkq9de" targetRef="ServiceTask_0p1vbi6">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${reasonCode=="52"}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_07260vw" name="Add Comment Ticket Cancel Intervention">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var afterSalesCammunda = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto = S(afterSalesCammunda).prop('afterSalesRequestDto');
var ticketId = S(afterSalesRequestDto).prop("ticketId").value();
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");
var cancelIntervention = S(subscription).prop("cancelIntervention");
var reasonCode = S(cancelIntervention).prop("reasonCode").value();
var reasonLabel = S(cancelIntervention).prop("reasonLabel").value();
var comment= "Annulation de l'intervention : " + reasonCode + " - " + reasonLabel;

var planner = "gestionnaireevent@protectline.fr"; // valeur par défaut
 if (cancelIntervention.hasProp("planner")) {
    var plannerValue = cancelIntervention.prop("planner").value();
    if (plannerValue != null) {
      planner = plannerValue;
    }
  }

'{"comment":"' + comment + '"' +
',"email":"' + planner + '"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('Add Comment Ticket Cancel Intervention');
var resp = connector.getVariable('response')
print('resp Add Comment Ticket Cancel Intervention : ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_02fa1d9</bpmn:incoming>
      <bpmn:incoming>Flow_17714wi</bpmn:incoming>
      <bpmn:outgoing>Flow_03f0r23</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_17714wi" name="Cancel Intervention &#38;&#38; reasonCode = 43" sourceRef="ExclusiveGateway_0g6rr69" targetRef="Activity_07260vw">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnInstallStatus== 'CANCELED_INTERVENTION'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_03f0r23" sourceRef="Activity_07260vw" targetRef="ServiceTask_0p1vbi6" />
    <bpmn:serviceTask id="Activity_02m80of" name="Add comment ticket end Intervention logistique">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var afterSalesCammunda = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto = S(afterSalesCammunda).prop('afterSalesRequestDto');
var ticketId = S(afterSalesRequestDto).prop("ticketId").value();
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var endInterventionLogistiqueDto = execution.getVariable('endInterventionLogistiqueDto');

if(endInterventionLogistiqueDto != null &amp;&amp; S(endInterventionLogistiqueDto).hasProp("subscription")){
var subscription = S(endInterventionLogistiqueDto).prop("subscription");
var delivery = S(subscription).prop("delivery");
var code = S(delivery).prop("code").value();
var description = S(delivery).prop("description").value();
var receiveDate = S(delivery).prop("receiveDate").value();
if(code != null){
var comment = description + "\\n colis envoyé le : " + receiveDate;
var planner = "gestionnaireevent@protectline.fr";
}
}
'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1e1tjg3">
              <camunda:script scriptFormat="JavaScript">print('Add comment ticket end Intervention logistique');
var resp = connector.getVariable('response')
print('resp Add comment ticket end Intervention logistique : ' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0m3bcer</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1tq7rah</bpmn:incoming>
      <bpmn:outgoing>Flow_17bsu40</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_17bsu40" sourceRef="Activity_02m80of" targetRef="ServiceTask_0p1vbi6" />
    <bpmn:sequenceFlow id="SequenceFlow_1ik00px" name="INSTALLATION" sourceRef="ExclusiveGateway_1l4dokz" targetRef="Activity_0ebgpak">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${interventionType=="MULTI" || interventionType=="INSTALLATION"}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:callActivity id="Activity_04wjc00" name="Digit Interventions" calledElement="digit_interventions">
      <bpmn:extensionElements>
        <camunda:in businessKey="#{execution.processBusinessKey}" />
        <camunda:out variables="all" />
        <camunda:inputOutput>
          <camunda:inputParameter name="contractId">
            <camunda:script scriptFormat="JavaScript">var afterSalesCammundaDto = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto= S(afterSalesCammundaDto ).prop("afterSalesRequestDto"); S(afterSalesRequestDto).prop("subscriptionId").value()</camunda:script>
          </camunda:inputParameter>
          <camunda:inputParameter name="interventionType">SAV</camunda:inputParameter>
          <camunda:inputParameter name="customerId">
            <camunda:script scriptFormat="JavaScript">var afterSalesCammundaDto = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto= S(afterSalesCammundaDto ).prop("afterSalesRequestDto"); S(afterSalesRequestDto).prop("customerId").value()</camunda:script>
          </camunda:inputParameter>
          <camunda:inputParameter name="interventionNumber">
            <camunda:script scriptFormat="JavaScript">var afterSalesCammundaDto = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto= S(afterSalesCammundaDto ).prop("afterSalesRequestDto"); S(afterSalesRequestDto).prop("interventionNumber").value()</camunda:script>
          </camunda:inputParameter>
        </camunda:inputOutput>
        <camunda:in source="SAVDev" target="interventionNumber" local="true" />
        <camunda:in source="SAVDev" target="customerId" local="true" />
        <camunda:in source="SAVDev" target="interventionType" local="true" />
        <camunda:in source="SAVDev" target="contractId" local="true" />
        <camunda:in variables="all" />
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0ej926i</bpmn:incoming>
      <bpmn:outgoing>Flow_1afzkot</bpmn:outgoing>
    </bpmn:callActivity>
    <bpmn:sequenceFlow id="Flow_0ej926i" sourceRef="Gateway_1oa3xfz" targetRef="Activity_04wjc00" />
    <bpmn:parallelGateway id="Gateway_1oa3xfz">
      <bpmn:incoming>Flow_0zbggwu</bpmn:incoming>
      <bpmn:outgoing>Flow_0ej926i</bpmn:outgoing>
      <bpmn:outgoing>Flow_183y98x</bpmn:outgoing>
    </bpmn:parallelGateway>
    <bpmn:serviceTask id="Activity_0ebgpak" name="Send Intervention to TeamTool">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_intervention');
url_tb+'/api/interventions/v1/camunda/sav/send-event-new-intervention'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var devicesInstallation = execution.getVariable('devicesInstallation');
var afterSalesCammundaDto = execution.getVariable('afterSalesCammundaDto');
var installationAfterSales = S(afterSalesCammundaDto).prop('devices', S(devicesInstallation));

installationAfterSales.toString();</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_17ndt2c">
              <camunda:script scriptFormat="JavaScript">print('Demande une intervention api');
var resp = connector.getVariable('response')
print('resp Demande une intervention' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1ik00px</bpmn:incoming>
      <bpmn:outgoing>Flow_0zbggwu</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_183y98x" sourceRef="Gateway_1oa3xfz" targetRef="IntermediateThrowEvent_0499ekx" />
    <bpmn:sequenceFlow id="Flow_0zbggwu" sourceRef="Activity_0ebgpak" targetRef="Gateway_1oa3xfz" />
    <bpmn:serviceTask id="Activity_1kxne4s" name="Update status maintenance to CLOSED">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_contract');
var afterSalesCammunda = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto = S(afterSalesCammunda).prop('afterSalesRequestDto');
var contractId = afterSalesRequestDto.prop('subscriptionId').value();
var customerId = afterSalesRequestDto.prop('customerId').value();

url_tb+'/api/contract/v2/' + customerId + '/contracts/' + contractId + '/maintenance/event/update';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PUT</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"status": "CLOSED"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1712bc2">
              <camunda:script scriptFormat="JavaScript">print('Update status maintenance to CLOSED');
var response = connector.getVariable('response')
print("resp Update status maintenance to CLOSED : " + response);
var respHeader = connector.getVariable("headers");
var respStatusCode = connector.getVariable("statusCode");
print("status code" + respStatusCode);
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0en3zul</bpmn:incoming>
      <bpmn:outgoing>Flow_0bc4ynt</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_19hmbxq" name="Create new maintenance">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="javascript">var url_tb= execution.getVariable('url_crm_contract');
var afterSalesCammunda = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto = S(afterSalesCammunda).prop('afterSalesRequestDto');
var contractId = afterSalesRequestDto.prop('subscriptionId').value();
var customerId = afterSalesRequestDto.prop('customerId').value();

url_tb+'/api/contract/v2/' + customerId + '/contracts/' + contractId + '/maintenance';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:outputParameter name="Output_0m638gf">
              <camunda:script scriptFormat="JavaScript">print('Create new maintenance');
var response = connector.getVariable('response')
print("resp Create new maintenance " + response);
var respHeader = connector.getVariable("headers");
var respStatusCode = connector.getVariable("statusCode");
print("status code" + respStatusCode);
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0bc4ynt</bpmn:incoming>
      <bpmn:outgoing>Flow_1byutex</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1byutex" sourceRef="Activity_19hmbxq" targetRef="ExclusiveGateway_1xwu451" />
    <bpmn:sequenceFlow id="Flow_0bc4ynt" sourceRef="Activity_1kxne4s" targetRef="Activity_19hmbxq" />
    <bpmn:endEvent id="Event_1djd4y4">
      <bpmn:incoming>Flow_1afzkot</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_1afzkot" sourceRef="Activity_04wjc00" targetRef="Event_1djd4y4" />
    <bpmn:sequenceFlow id="SequenceFlow_0se50t1" name="paidIntervention=true" sourceRef="ExclusiveGateway_1xwu451" targetRef="Activity_02prgf0">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${paidIntervention==true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_02prgf0" name="Apply charge sav">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_contract');
var afterSalesCammunda = execution.getVariable('afterSalesCammundaDto');
var afterSalesRequestDto = S(afterSalesCammunda).prop('afterSalesRequestDto');
var contractId = afterSalesRequestDto.prop('subscriptionId').value();
var customerId = afterSalesRequestDto.prop('customerId').value();

url_tb+'/api/contract/v2/'+customerId+'/contracts/'+contractId+'/applyOneShotChargeInstance';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">function formatDate(dateString) {
    if (!dateString) return '';
    try {
        const date = new Date(dateString);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    } catch (e) {
        console.error('Error formatting date:', e);
        return '';
    }
}

const formattedDate = formatDate(new Date());


var output = {
    "oneShotCharge": "CH_OS_SAV_OS",
    "quantity": 1,
    "operationDate": formattedDate
}

JSON.stringify(output);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('apply charge sav api');
var resp = connector.getVariable('response')
print('resp create one shot charge' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, 'Failed to execute the Apply charge sav API.');
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0se50t1</bpmn:incoming>
      <bpmn:outgoing>Flow_030u886</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_030u886" sourceRef="Activity_02prgf0" targetRef="Event_0213vqj" />
    <bpmn:textAnnotation id="TextAnnotation_0l7bqfw">
      <bpmn:text>Après création de la demande de SAV via le CRM, le processus est instancié</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1fdg3f2" sourceRef="StartEvent_1" targetRef="TextAnnotation_0l7bqfw" />
    <bpmn:textAnnotation id="TextAnnotation_006zi8v">
      <bpmn:text>récupération du token afin de pouvoir consommer les API de façon sécurisé</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0u4qsp7" sourceRef="ServiceTask_0gm089m" targetRef="TextAnnotation_006zi8v" />
    <bpmn:textAnnotation id="TextAnnotation_16upg77">
      <bpmn:text>Si le SAV concerne plusieurs équipements nécessitant à la fois une intervention d’un tech et une intervention logistique.</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0dpo999" sourceRef="ExclusiveGateway_1l4dokz" targetRef="TextAnnotation_16upg77" />
    <bpmn:textAnnotation id="TextAnnotation_148pc9p">
      <bpmn:text>Envoie une demande d'intervention Logistique à Team Tool Logistique</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_15moqjw">
      <bpmn:text>Envoie une demande d'intervention technique à Team Tool Planification</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_1w4xxmq">
      <bpmn:text>En attente de la clôture d'intervention de Team Tool Logistique</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_085g27v" sourceRef="IntermediateCatchEvent_0shx360" targetRef="TextAnnotation_1w4xxmq" />
    <bpmn:textAnnotation id="TextAnnotation_0pfr3fy">
      <bpmn:text>En attente de la clôture d'intervention de Team Tool Planification</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1wippbq" sourceRef="IntermediateThrowEvent_0499ekx" targetRef="TextAnnotation_0pfr3fy" />
    <bpmn:textAnnotation id="TextAnnotation_17xkelw">
      <bpmn:text>Ajout du commentaire au ticket Zammad</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0wp0q20" sourceRef="ServiceTask_0whs6p4" targetRef="TextAnnotation_17xkelw" />
    <bpmn:textAnnotation id="TextAnnotation_0zcc5xx">
      <bpmn:text>Fermeture du ticket</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_03gkpn7" sourceRef="ServiceTask_0p1vbi6" targetRef="TextAnnotation_0zcc5xx" />
    <bpmn:textAnnotation id="TextAnnotation_01jz81g">
      <bpmn:text>Ajout de commentaire lorsque le client est injoignable</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0bm7vfd" sourceRef="ServiceTask_1uakyl7" targetRef="TextAnnotation_01jz81g" />
    <bpmn:textAnnotation id="TextAnnotation_0xcr39d">
      <bpmn:text>Mise à jour donnees customer et souscription suite à la modification de donnees planification</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1ovop5v" sourceRef="ServiceTask_1s92zes" targetRef="TextAnnotation_0xcr39d" />
    <bpmn:textAnnotation id="TextAnnotation_0zu3657">
      <bpmn:text>Ajout des equipements de SAV en commentaire du ticket</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_188i11r" sourceRef="ServiceTask_0n89uuv" targetRef="TextAnnotation_0zu3657" />
    <bpmn:textAnnotation id="TextAnnotation_0uskw2y">
      <bpmn:text>Si l'intervention payante a bien ou lien ,on affecte une one shot charge au contrat</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_1y6ysw3">
      <bpmn:text>Ajouter le numéro d'intervention en commentaire du ticket</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0pghttm" sourceRef="ServiceTask_0vbo0zx" targetRef="TextAnnotation_1y6ysw3" />
    <bpmn:textAnnotation id="TextAnnotation_0wnok2j">
      <bpmn:text>Envoi d'un email de confirmation de prise en compte de a demande au client</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_00ievd7" sourceRef="ServiceTask_0xe0swy" targetRef="TextAnnotation_0wnok2j" />
    <bpmn:textAnnotation id="TextAnnotation_1tnif9v">
      <bpmn:text>Si l'intervention payante a bien ou lien ,on affecte une one shot charge au contrat</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1jryjpl" sourceRef="ServiceTask_142wdgh" targetRef="TextAnnotation_1tnif9v" />
    <bpmn:textAnnotation id="TextAnnotation_0496x0g">
      <bpmn:text>Recuperer le commentaire à partir de la liste des devices</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0bcbaf0" sourceRef="Activity_0016vfz" targetRef="TextAnnotation_0496x0g" />
    <bpmn:textAnnotation id="TextAnnotation_0akult9">
      <bpmn:text>Supprimer l'équipement</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_17i64sb">
      <bpmn:text>S'il y'a  des produits connectés</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1fgytc7" sourceRef="TextAnnotation_0akult9" targetRef="Activity_07k1nml" />
    <bpmn:association id="Association_1ny7ree" sourceRef="TextAnnotation_17i64sb" targetRef="Gateway_1ifgsof" />
    <bpmn:association id="Association_1nnjbdu" sourceRef="TextAnnotation_148pc9p" targetRef="Activity_1p1leg7" />
    <bpmn:association id="Association_0zsf8vu" associationDirection="None" sourceRef="Activity_0ebgpak" targetRef="TextAnnotation_15moqjw" />
    <bpmn:association id="Association_0x4zd6l" sourceRef="Activity_02prgf0" targetRef="TextAnnotation_0uskw2y" />
  </bpmn:process>
  <bpmn:message id="Message_0fqysoq" name="startSavDev" />
  <bpmn:message id="Message_14qexns" name="planifProcessReturn" />
  <bpmn:error id="Error_1oezyn4" name="Error_142koqu" errorCode="CheckError" />
  <bpmn:message id="Message_0lcj4ha" name="savLogistiqueProcessReturnDev" />
  <bpmn:message id="Message_1g82wb4" name="savInstallProcessReturnDev" />
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="SAVDev">
      <bpmndi:BPMNEdge id="Flow_030u886_di" bpmnElement="Flow_030u886">
        <di:waypoint x="2920" y="1000" />
        <di:waypoint x="3022" y="1000" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0se50t1_di" bpmnElement="SequenceFlow_0se50t1">
        <di:waypoint x="2760" y="878" />
        <di:waypoint x="2760" y="990" />
        <di:waypoint x="2820" y="990" />
        <bpmndi:BPMNLabel color:color="#0d4372">
          <dc:Bounds x="2737" y="860" width="86" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1afzkot_di" bpmnElement="Flow_1afzkot">
        <di:waypoint x="1020" y="832" />
        <di:waypoint x="1072" y="832" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0bc4ynt_di" bpmnElement="Flow_0bc4ynt">
        <di:waypoint x="2550" y="853" />
        <di:waypoint x="2600" y="853" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1byutex_di" bpmnElement="Flow_1byutex">
        <di:waypoint x="2700" y="853" />
        <di:waypoint x="2735" y="853" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0zbggwu_di" bpmnElement="Flow_0zbggwu">
        <di:waypoint x="860" y="940" />
        <di:waypoint x="942" y="940" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_183y98x_di" bpmnElement="Flow_183y98x">
        <di:waypoint x="992" y="940" />
        <di:waypoint x="1112" y="940" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ej926i_di" bpmnElement="Flow_0ej926i">
        <di:waypoint x="967" y="915" />
        <di:waypoint x="967" y="872" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1ik00px_di" bpmnElement="SequenceFlow_1ik00px">
        <di:waypoint x="641" y="721" />
        <di:waypoint x="641" y="940" />
        <di:waypoint x="760" y="940" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="651" y="923" width="77" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_17bsu40_di" bpmnElement="Flow_17bsu40">
        <di:waypoint x="2621" y="430" />
        <di:waypoint x="3120" y="430" />
        <di:waypoint x="3120" y="690" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_03f0r23_di" bpmnElement="Flow_03f0r23" bioc:stroke="#1e88e5" color:border-color="#1e88e5">
        <di:waypoint x="2381" y="530" />
        <di:waypoint x="3100" y="530" />
        <di:waypoint x="3100" y="690" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_17714wi_di" bpmnElement="Flow_17714wi" bioc:stroke="#1e88e5" color:border-color="#1e88e5">
        <di:waypoint x="2320" y="839" />
        <di:waypoint x="2320" y="570" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2227" y="792" width="85" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1wv7u7k_di" bpmnElement="Flow_1wv7u7k" bioc:stroke="#1e88e5" color:border-color="#1e88e5">
        <di:waypoint x="2000" y="1015" />
        <di:waypoint x="2000" y="1150" />
        <di:waypoint x="3100" y="1150" />
        <di:waypoint x="3100" y="770" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2007" y="1024" width="85" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0tcpiaw_di" bpmnElement="Flow_0tcpiaw" bioc:stroke="#1e88e5" color:border-color="#1e88e5">
        <di:waypoint x="2120" y="990" />
        <di:waypoint x="2025" y="990" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1jis34w_di" bpmnElement="Flow_1jis34w">
        <di:waypoint x="1984" y="853" />
        <di:waypoint x="2306" y="853" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1jqf7ov_di" bpmnElement="Flow_1jqf7ov">
        <di:waypoint x="666" y="696" />
        <di:waypoint x="776" y="696" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="687" y="678" width="68" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0fba909_di" bpmnElement="Flow_0fba909">
        <di:waypoint x="1130" y="696" />
        <di:waypoint x="1162" y="696" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_02cvmoq" bpmnElement="Flow_0r7ehyv" bioc:stroke="#0d4372" color:border-color="#0d4372">
        <di:waypoint x="826" y="696" />
        <di:waypoint x="880" y="696" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="845" y="678" width="19" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0fl49ea" bpmnElement="Flow_1ponany">
        <di:waypoint x="801" y="721" />
        <di:waypoint x="801" y="780" />
        <di:waypoint x="1080" y="780" />
        <di:waypoint x="1080" y="736" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="933" y="762" width="15" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0mrcorx" bpmnElement="Flow_0lji7w7">
        <di:waypoint x="980" y="696" />
        <di:waypoint x="1030" y="696" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1e3aygy_di" bpmnElement="Flow_1e3aygy">
        <di:waypoint x="641" y="277" />
        <di:waypoint x="641" y="360" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1tq7rah_di" bpmnElement="SequenceFlow_1tq7rah">
        <di:waypoint x="1446" y="430" />
        <di:waypoint x="2521" y="430" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0m3bcer_di" bpmnElement="SequenceFlow_0m3bcer">
        <di:waypoint x="1726" y="320" />
        <di:waypoint x="2571" y="320" />
        <di:waypoint x="2571" y="390" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0i83824_di" bpmnElement="SequenceFlow_0i83824">
        <di:waypoint x="1421" y="405" />
        <di:waypoint x="1421" y="320" />
        <di:waypoint x="1626" y="320" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1302cr0_di" bpmnElement="SequenceFlow_1302cr0">
        <di:waypoint x="1180" y="678" />
        <di:waypoint x="1180" y="430" />
        <di:waypoint x="1396" y="430" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1qf1hqz_di" bpmnElement="SequenceFlow_1qf1hqz">
        <di:waypoint x="1446" y="853" />
        <di:waypoint x="1948" y="853" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1oe3z3w_di" bpmnElement="SequenceFlow_1oe3z3w">
        <di:waypoint x="641" y="596" />
        <di:waypoint x="641" y="671" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_06kadl7_di" bpmnElement="SequenceFlow_06kadl7">
        <di:waypoint x="533" y="237" />
        <di:waypoint x="591" y="237" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_15vemhq_di" bpmnElement="SequenceFlow_15vemhq">
        <di:waypoint x="2340" y="837" />
        <di:waypoint x="2340" y="730" />
        <di:waypoint x="2830" y="730" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2347" y="805" width="44" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0en3zul_di" bpmnElement="SequenceFlow_0en3zul">
        <di:waypoint x="2356" y="853" />
        <di:waypoint x="2450" y="853" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2360" y="835" width="40" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1un1tcg_di" bpmnElement="SequenceFlow_1un1tcg">
        <di:waypoint x="2785" y="853" />
        <di:waypoint x="2880" y="853" />
        <di:waypoint x="2880" y="770" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2078" y="812" width="57" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1jidq3m_di" bpmnElement="SequenceFlow_1jidq3m">
        <di:waypoint x="641" y="440" />
        <di:waypoint x="641" y="516" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1yiyxa7_di" bpmnElement="SequenceFlow_1yiyxa7">
        <di:waypoint x="1148" y="940" />
        <di:waypoint x="1220" y="940" />
        <di:waypoint x="1220" y="910" />
        <di:waypoint x="1291" y="910" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_06xqczc_di" bpmnElement="SequenceFlow_06xqczc">
        <di:waypoint x="1451" y="656" />
        <di:waypoint x="1451" y="686" />
        <di:waypoint x="1421" y="686" />
        <di:waypoint x="1421" y="716" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0cxxz8q_di" bpmnElement="SequenceFlow_0cxxz8q">
        <di:waypoint x="1421" y="828" />
        <di:waypoint x="1421" y="796" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0sodgtf_di" bpmnElement="SequenceFlow_0sodgtf">
        <di:waypoint x="1471" y="766" />
        <di:waypoint x="1516" y="766" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1lf7fm8_di" bpmnElement="SequenceFlow_1lf7fm8">
        <di:waypoint x="2167" y="756" />
        <di:waypoint x="2214" y="756" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_059mkk3_di" bpmnElement="SequenceFlow_059mkk3">
        <di:waypoint x="2142" y="731" />
        <di:waypoint x="2142" y="626" />
        <di:waypoint x="2092" y="626" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_01yf43r_di" bpmnElement="SequenceFlow_01yf43r">
        <di:waypoint x="1541" y="741" />
        <di:waypoint x="1541" y="616" />
        <di:waypoint x="1501" y="616" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1k7bw8z_di" bpmnElement="SequenceFlow_1k7bw8z">
        <di:waypoint x="2082" y="756" />
        <di:waypoint x="2117" y="756" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1070r1r_di" bpmnElement="SequenceFlow_1070r1r">
        <di:waypoint x="2032" y="666" />
        <di:waypoint x="2032" y="716" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0tlrqib_di" bpmnElement="SequenceFlow_0tlrqib">
        <di:waypoint x="1566" y="766" />
        <di:waypoint x="1589" y="766" />
        <di:waypoint x="1589" y="756" />
        <di:waypoint x="1982" y="756" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_02fa1d9_di" bpmnElement="SequenceFlow_02fa1d9">
        <di:waypoint x="1316" y="885" />
        <di:waypoint x="1316" y="530" />
        <di:waypoint x="2281" y="530" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1581" y="496" width="58" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1xywe1m_di" bpmnElement="SequenceFlow_1xywe1m">
        <di:waypoint x="1466" y="1083" />
        <di:waypoint x="1120" y="1083" />
        <di:waypoint x="1120" y="955" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_00l23oe_di" bpmnElement="SequenceFlow_00l23oe">
        <di:waypoint x="1316" y="935" />
        <di:waypoint x="1316" y="1066" />
        <di:waypoint x="1466" y="1066" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1358" y="1035" width="63" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1l15t47_di" bpmnElement="SequenceFlow_1l15t47">
        <di:waypoint x="3150" y="730" />
        <di:waypoint x="3196" y="730" />
        <di:waypoint x="3196" y="740" />
        <di:waypoint x="3242" y="740" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1h7gsgv_di" bpmnElement="SequenceFlow_1h7gsgv" bioc:stroke="#1e88e5" color:border-color="#1e88e5">
        <di:waypoint x="1975" y="990" />
        <di:waypoint x="1140" y="990" />
        <di:waypoint x="1140" y="955" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1880" y="936" width="74" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_14v2apk_di" bpmnElement="SequenceFlow_14v2apk">
        <di:waypoint x="1341" y="910" />
        <di:waypoint x="1421" y="910" />
        <di:waypoint x="1421" y="878" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1351" y="815" width="58" height="53" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0nf2535_di" bpmnElement="SequenceFlow_0nf2535" bioc:stroke="#1e88e5" color:border-color="#1e88e5">
        <di:waypoint x="2331" y="878" />
        <di:waypoint x="2331" y="990" />
        <di:waypoint x="2220" y="990" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2260" y="1004" width="62" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0ipc575_di" bpmnElement="SequenceFlow_0ipc575">
        <di:waypoint x="2930" y="730" />
        <di:waypoint x="3050" y="730" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_13xo6fd_di" bpmnElement="SequenceFlow_13xo6fd">
        <di:waypoint x="397" y="237" />
        <di:waypoint x="433" y="237" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0a09xtg_di" bpmnElement="SequenceFlow_0a09xtg">
        <di:waypoint x="192" y="237" />
        <di:waypoint x="297" y="237" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="StartEvent_1j014zf_di" bpmnElement="StartEvent_1">
        <dc:Bounds x="156" y="219" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_00mdgpg_di" bpmnElement="EndEvent_00mdgpg">
        <dc:Bounds x="3242" y="722" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_0apgq6m_di" bpmnElement="IntermediateThrowEvent_0499ekx">
        <dc:Bounds x="1112" y="922" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="550" y="345" width="81" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="SubProcess_1o9po8l_di" bpmnElement="SubProcess_1o9po8l" isExpanded="true">
        <dc:Bounds x="610" y="1318" width="740" height="363" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="SequenceFlow_0x24x4j_di" bpmnElement="SequenceFlow_0x24x4j">
        <di:waypoint x="980" y="1622" />
        <di:waypoint x="1045" y="1622" />
        <di:waypoint x="1045" y="1530" />
        <di:waypoint x="1110" y="1530" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1eo1qjx_di" bpmnElement="SequenceFlow_1eo1qjx">
        <di:waypoint x="780" y="1525" />
        <di:waypoint x="780" y="1622" />
        <di:waypoint x="880" y="1622" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1jjqfb8_di" bpmnElement="SequenceFlow_1jjqfb8">
        <di:waypoint x="805" y="1500" />
        <di:waypoint x="890" y="1500" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1cem39o_di" bpmnElement="SequenceFlow_1cem39o">
        <di:waypoint x="695" y="1500" />
        <di:waypoint x="755" y="1500" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_08prpyx_di" bpmnElement="SequenceFlow_08prpyx">
        <di:waypoint x="990" y="1500" />
        <di:waypoint x="1110" y="1500" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1q5714o_di" bpmnElement="SequenceFlow_1q5714o">
        <di:waypoint x="1210" y="1500" />
        <di:waypoint x="1282" y="1500" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="StartEvent_1bsx0ac_di" bpmnElement="StartEvent_1bsx0ac">
        <dc:Bounds x="659" y="1482" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_0obzlbe_di" bpmnElement="UserTask_0obzlbe">
        <dc:Bounds x="890" y="1460" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_1lvotgy_di" bpmnElement="EndEvent_1lvotgy">
        <dc:Bounds x="1282" y="1482" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ScriptTask_18ao0a7_di" bpmnElement="ScriptTask_18ao0a7">
        <dc:Bounds x="1110" y="1460" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0cvm0xc_di" bpmnElement="ServiceTask_0cvm0xc">
        <dc:Bounds x="880" y="1582" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1rog5p1_di" bpmnElement="ExclusiveGateway_1rog5p1" isMarkerVisible="true">
        <dc:Bounds x="755" y="1475" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0gm089m_di" bpmnElement="ServiceTask_0gm089m">
        <dc:Bounds x="297" y="197" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0whs6p4_di" bpmnElement="ServiceTask_0whs6p4" bioc:stroke="#1e88e5" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#1e88e5">
        <dc:Bounds x="2830" y="690" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_0shx360_di" bpmnElement="IntermediateCatchEvent_0shx360">
        <dc:Bounds x="1162" y="678" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0f9h9t6_di" bpmnElement="ExclusiveGateway_0f9h9t6" isMarkerVisible="true">
        <dc:Bounds x="1291" y="885" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_063q40r_di" bpmnElement="ServiceTask_063q40r" bioc:stroke="#1e88e5" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#1e88e5">
        <dc:Bounds x="2120" y="950" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0p1vbi6_di" bpmnElement="ServiceTask_0p1vbi6">
        <dc:Bounds x="3050" y="690" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1uakyl7_di" bpmnElement="ServiceTask_1uakyl7">
        <dc:Bounds x="1466" y="1026" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="InclusiveGateway_1ehx8ez_di" bpmnElement="InclusiveGateway_1ehx8ez">
        <dc:Bounds x="1396" y="828" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_1g7evjk_di" bpmnElement="IntermediateCatchEvent_1g7evjk">
        <dc:Bounds x="1948" y="835" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1s92zes_di" bpmnElement="ServiceTask_1s92zes">
        <dc:Bounds x="1982" y="716" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_1h3z8gn_di" bpmnElement="UserTask_1h3z8gn">
        <dc:Bounds x="1401" y="576" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_1lhl2u6_di" bpmnElement="UserTask_1lhl2u6">
        <dc:Bounds x="1992" y="586" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_06q01tu_di" bpmnElement="ExclusiveGateway_06q01tu" isMarkerVisible="true">
        <dc:Bounds x="1516" y="741" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1b438ge_di" bpmnElement="ExclusiveGateway_1b438ge" isMarkerVisible="true">
        <dc:Bounds x="2117" y="731" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_0eiqx34_di" bpmnElement="EndEvent_0eiqx34">
        <dc:Bounds x="2214" y="738" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_18tpia1_di" bpmnElement="ServiceTask_18tpia1">
        <dc:Bounds x="1371" y="716" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0n89uuv_di" bpmnElement="ServiceTask_0n89uuv">
        <dc:Bounds x="591" y="360" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0g6rr69_di" bpmnElement="ExclusiveGateway_0g6rr69" isMarkerVisible="true" bioc:stroke="#1e88e5" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#1e88e5">
        <dc:Bounds x="2306" y="828" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0vbo0zx_di" bpmnElement="ServiceTask_0vbo0zx" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="433" y="197" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0xe0swy_di" bpmnElement="ServiceTask_0xe0swy">
        <dc:Bounds x="591" y="516" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_103yuhn_di" bpmnElement="ExclusiveGateway_103yuhn" isMarkerVisible="true">
        <dc:Bounds x="1396" y="405" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_142wdgh_di" bpmnElement="ServiceTask_142wdgh">
        <dc:Bounds x="1626" y="280" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0016vfz_di" bpmnElement="Activity_0016vfz">
        <dc:Bounds x="591" y="197" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1hvwjqd_di" bpmnElement="ExclusiveGateway_1l4dokz">
        <dc:Bounds x="616" y="671" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0rp7d0j" bpmnElement="Activity_1p1leg7">
        <dc:Bounds x="1030" y="656" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_179eh5z" bpmnElement="Activity_07k1nml">
        <dc:Bounds x="880" y="656" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_17rd1q1" bpmnElement="Gateway_1ifgsof" isMarkerVisible="true">
        <dc:Bounds x="776" y="671" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0213vqj_di" bpmnElement="Event_0213vqj" bioc:stroke="#0d4372" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#0d4372">
        <dc:Bounds x="3022" y="982" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0kx8vb9_di" bpmnElement="ExclusiveGateway_1xwu451" bioc:stroke="#0d4372" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#0d4372">
        <dc:Bounds x="2735" y="828" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1gkq9de_di" bpmnElement="Gateway_1gkq9de" isMarkerVisible="true" bioc:stroke="#1e88e5" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#1e88e5">
        <dc:Bounds x="1975" y="965" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_16ttc6n" bpmnElement="Activity_07260vw" bioc:stroke="#1e88e5" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#1e88e5">
        <dc:Bounds x="2281" y="490" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1u5rfzg" bpmnElement="Activity_02m80of" bioc:stroke="#1e88e5" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#1e88e5">
        <dc:Bounds x="2521" y="390" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1e9tqqt" bpmnElement="Activity_04wjc00" bioc:stroke="#0d4372" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#0d4372">
        <dc:Bounds x="920" y="792" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1ay6d9f_di" bpmnElement="Gateway_1oa3xfz" bioc:stroke="#0d4372" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#0d4372">
        <dc:Bounds x="942" y="915" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_059tnpm" bpmnElement="Activity_0ebgpak">
        <dc:Bounds x="760" y="900" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1vkhsqa" bpmnElement="Activity_1kxne4s" bioc:stroke="#1e88e5" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#1e88e5">
        <dc:Bounds x="2450" y="813" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0pn8rgc" bpmnElement="Activity_19hmbxq" bioc:stroke="#1e88e5" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#1e88e5">
        <dc:Bounds x="2600" y="813" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1djd4y4_di" bpmnElement="Event_1djd4y4">
        <dc:Bounds x="1072" y="814" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_02prgf0_di" bpmnElement="Activity_02prgf0">
        <dc:Bounds x="2820" y="960" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0l7bqfw_di" bpmnElement="TextAnnotation_0l7bqfw">
        <dc:Bounds x="160" y="52" width="100" height="96" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_006zi8v_di" bpmnElement="TextAnnotation_006zi8v">
        <dc:Bounds x="457" y="52" width="100" height="96" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_16upg77_di" bpmnElement="TextAnnotation_16upg77">
        <dc:Bounds x="370" y="630" width="150" height="98" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_148pc9p_di" bpmnElement="TextAnnotation_148pc9p">
        <dc:Bounds x="1190" y="732" width="100" height="96" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_15moqjw_di" bpmnElement="TextAnnotation_15moqjw">
        <dc:Bounds x="680" y="784" width="100" height="96" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1w4xxmq_di" bpmnElement="TextAnnotation_1w4xxmq">
        <dc:Bounds x="956" y="304" width="100" height="82" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0pfr3fy_di" bpmnElement="TextAnnotation_0pfr3fy">
        <dc:Bounds x="980" y="1016" width="100" height="82" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_17xkelw_di" bpmnElement="TextAnnotation_17xkelw">
        <dc:Bounds x="2740" y="582" width="100" height="68" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0zcc5xx_di" bpmnElement="TextAnnotation_0zcc5xx">
        <dc:Bounds x="2940" y="620" width="100" height="40" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_01jz81g_di" bpmnElement="TextAnnotation_01jz81g">
        <dc:Bounds x="1677" y="1030" width="100" height="68" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0xcr39d_di" bpmnElement="TextAnnotation_0xcr39d">
        <dc:Bounds x="1800" y="564" width="100" height="124" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0zu3657_di" bpmnElement="TextAnnotation_0zu3657">
        <dc:Bounds x="721" y="340" width="100" height="82" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0uskw2y_di" bpmnElement="TextAnnotation_0uskw2y">
        <dc:Bounds x="2910" y="830" width="100" height="105" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1y6ysw3_di" bpmnElement="TextAnnotation_1y6ysw3">
        <dc:Bounds x="667" y="62" width="100" height="96" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0wnok2j_di" bpmnElement="TextAnnotation_0wnok2j">
        <dc:Bounds x="458" y="470" width="99.99274099883856" height="95.23809523809524" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1tnif9v_di" bpmnElement="TextAnnotation_1tnif9v">
        <dc:Bounds x="1700" y="150" width="100" height="93" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0496x0g_di" bpmnElement="TextAnnotation_0496x0g">
        <dc:Bounds x="750" y="229" width="100" height="75" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0rk835s" bpmnElement="TextAnnotation_0akult9">
        <dc:Bounds x="850" y="589" width="100" height="41" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1p3fjg3" bpmnElement="TextAnnotation_17i64sb" bioc:stroke="#0d4372" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#0d4372">
        <dc:Bounds x="727" y="505" width="229" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Association_1fdg3f2_di" bpmnElement="Association_1fdg3f2">
        <di:waypoint x="178" y="220" />
        <di:waypoint x="197" y="148" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0u4qsp7_di" bpmnElement="Association_0u4qsp7">
        <di:waypoint x="390" y="198" />
        <di:waypoint x="457" y="144" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0dpo999_di" bpmnElement="Association_0dpo999">
        <di:waypoint x="619" y="693" />
        <di:waypoint x="520" y="677" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_085g27v_di" bpmnElement="Association_085g27v">
        <di:waypoint x="1172" y="680" />
        <di:waypoint x="1025" y="386" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1wippbq_di" bpmnElement="Association_1wippbq">
        <di:waypoint x="1114" y="949" />
        <di:waypoint x="1063" y="1016" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0wp0q20_di" bpmnElement="Association_0wp0q20">
        <di:waypoint x="2849" y="690" />
        <di:waypoint x="2818" y="650" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_03gkpn7_di" bpmnElement="Association_03gkpn7">
        <di:waypoint x="3054" y="692" />
        <di:waypoint x="3014" y="660" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0bm7vfd_di" bpmnElement="Association_0bm7vfd">
        <di:waypoint x="1566" y="1066" />
        <di:waypoint x="1677" y="1064" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1ovop5v_di" bpmnElement="Association_1ovop5v">
        <di:waypoint x="1983" y="721" />
        <di:waypoint x="1900" y="662" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_188i11r_di" bpmnElement="Association_188i11r">
        <di:waypoint x="691" y="393" />
        <di:waypoint x="721" y="388" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0pghttm_di" bpmnElement="Association_0pghttm">
        <di:waypoint x="533" y="210" />
        <di:waypoint x="667" y="137" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_00ievd7_di" bpmnElement="Association_00ievd7">
        <di:waypoint x="591" y="541" />
        <di:waypoint x="558" y="533" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1jryjpl_di" bpmnElement="Association_1jryjpl">
        <di:waypoint x="1700" y="280" />
        <di:waypoint x="1723" y="243" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0bcbaf0_di" bpmnElement="Association_0bcbaf0">
        <di:waypoint x="691" y="239" />
        <di:waypoint x="750" y="241" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0v6xkyh" bpmnElement="Association_1fgytc7">
        <di:waypoint x="912" y="630" />
        <di:waypoint x="928" y="656" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0v02rz7" bpmnElement="Association_1ny7ree">
        <di:waypoint x="779" y="535" />
        <di:waypoint x="799" y="673" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1nnjbdu_di" bpmnElement="Association_1nnjbdu">
        <di:waypoint x="1190" y="752" />
        <di:waypoint x="1130" y="719" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0zsf8vu_di" bpmnElement="Association_0zsf8vu">
        <di:waypoint x="775" y="900" />
        <di:waypoint x="758" y="880" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0x4zd6l_di" bpmnElement="Association_0x4zd6l">
        <di:waypoint x="2870" y="960" />
        <di:waypoint x="2910" y="925" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
