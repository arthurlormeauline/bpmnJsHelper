<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:bioc="http://bpmn.io/schema/bpmn/biocolor/1.0" xmlns:color="http://www.omg.org/spec/BPMN/non-normative/color/1.0" id="Definitions_0wkfit1" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="5.31.0">
  <bpmn:process id="option" name="Subscription Options" isExecutable="true">
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>SequenceFlow_1ss1f7o</bpmn:outgoing>
      <bpmn:messageEventDefinition messageRef="Message_04x214t" />
    </bpmn:startEvent>
    <bpmn:sequenceFlow id="SequenceFlow_1ss1f7o" sourceRef="StartEvent_1" targetRef="ServiceTask_0o2ywp3" />
    <bpmn:serviceTask id="ServiceTask_1rsj9xj" name="Add Delegation CEGEDEV">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/add'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToServiceOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('add delegation cegedev');
var resp = connector.getVariable('response')
print('add delegation cgdev' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1z0s6za</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1ocpgem</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1ocpgem" sourceRef="ServiceTask_1rsj9xj" targetRef="ServiceTask_091muom" />
    <bpmn:serviceTask id="ServiceTask_091muom" name="CreateÂ Opencell Service">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/service-activate'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToServiceOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create opencell service');
var resp = connector.getVariable('response')
print('resp create opencellservice' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1ocpgem</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_07dhm1g</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_07dhm1g" sourceRef="ServiceTask_091muom" targetRef="ServiceTask_1s3gc2y" />
    <bpmn:sequenceFlow id="SequenceFlow_1jg58k7" name="If Service" sourceRef="ExclusiveGateway_0dib119" targetRef="IntermediateThrowEvent_1jo9oz2">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${existService}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0s8o9qw" name="if endDate = null">
      <bpmn:incoming>SequenceFlow_1itnrin</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0tdub7k</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_08d483e</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0tdub7k" sourceRef="ExclusiveGateway_0s8o9qw" targetRef="InclusiveGateway_1vnp14s">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">execution.getVariable('endDate') == null;</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:endEvent id="EndEvent_0haikm9">
      <bpmn:incoming>SequenceFlow_1msruwu</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask id="ServiceTask_0e82rwa" name="Close Zammad ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/close-ticket'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscribeToOption":' + execution.getVariable('subscribeToOption') +
',"ticketId":"' + execution.getVariable('ticketNumber') +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('close zammad ticket');
var resp = connector.getVariable('response')
print('resp close zammad ticket' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0odaa77</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1msruwu</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1msruwu" sourceRef="ServiceTask_0e82rwa" targetRef="EndEvent_0haikm9" />
    <bpmn:serviceTask id="ServiceTask_0o6rxdb" name="Terminate Delegation CEGEDEV">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/delete'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToServiceOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('Terminate delegation cegdev');
var resp = connector.getVariable('response')
print('resp terminate delegation degedev' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0wkac3r</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1gdt02x</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1gdt02x" sourceRef="ServiceTask_0o6rxdb" targetRef="ServiceTask_0axjyuk" />
    <bpmn:serviceTask id="ServiceTask_1ddt8sv" name="Terminate Opencell Service">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/service-terminate'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToServiceOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('terminate opencell service');
var resp = connector.getVariable('response')
print('resp terminate opencell service' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1k6dvtr</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1go1pwb</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1go1pwb" sourceRef="ServiceTask_1ddt8sv" targetRef="InclusiveGateway_1vnp14s" />
    <bpmn:inclusiveGateway id="ExclusiveGateway_0dib119" name="Option Type">
      <bpmn:incoming>Flow_16sgjm5</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1jg58k7</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0xms4zq</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0mcftxs</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0xms4zq" name="If Installation is neccessarry" sourceRef="ExclusiveGateway_0dib119" targetRef="ServiceTask_0kfhnxf">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${existInstallation}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0mcftxs" name="If Installation isÂ  not neccessarry" sourceRef="ExclusiveGateway_0dib119" targetRef="ServiceTask_0kx4vis">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${existLogistique}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:inclusiveGateway id="InclusiveGateway_1vnp14s" name="Option Type">
      <bpmn:incoming>SequenceFlow_0tdub7k</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1go1pwb</bpmn:incoming>
      <bpmn:incoming>Flow_0fo1naw</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0jo2tv3</bpmn:incoming>
      <bpmn:incoming>Flow_1ho9q1r</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0odaa77</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0odaa77" sourceRef="InclusiveGateway_1vnp14s" targetRef="ServiceTask_0e82rwa" />
    <bpmn:serviceTask id="ServiceTask_0kfhnxf" name="Send Intervention to TeamTool">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/send-option-installation'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToInstallationOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('send intervention to teamTool');
var resp = connector.getVariable('response')
print('resp send intervention de team tool' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0xms4zq</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_08c5cml</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_08c5cml" sourceRef="ServiceTask_0kfhnxf" targetRef="Gateway_038fcb7" />
    <bpmn:intermediateCatchEvent id="IntermediateThrowEvent_0604xxg">
      <bpmn:incoming>SequenceFlow_0ai54j5</bpmn:incoming>
      <bpmn:outgoing>Flow_033cjnj</bpmn:outgoing>
      <bpmn:messageEventDefinition messageRef="Message_0lcj4ha" />
    </bpmn:intermediateCatchEvent>
    <bpmn:serviceTask id="ServiceTask_00nvo5y" name="CreateÂ Opencell Service">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/installation/create-service'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"endOptionsInstallationEvent":'+execution.getVariable('endOptionsInstallationEvent')+',"subscribeToOption": '+execution.getVariable('subscribeToOption')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create opencell service api');
var resp = connector.getVariable('response')
print('resp create opencell service' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_14h8ih3</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1tc761p</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1tc761p" sourceRef="ServiceTask_00nvo5y" targetRef="Gateway_1x96nzg" />
    <bpmn:serviceTask id="ServiceTask_0nczyzc" name="Create One Shot Charge">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/installation/create-oneshotcharge'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"endOptionsInstallationEvent":'+execution.getVariable('endOptionsInstallationEvent')+',"subscribeToOption": '+execution.getVariable('subscribeToOption')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create One shot charge api');
var resp = connector.getVariable('response')
print('resp create one shot charge' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1jbps7x</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1h9zj4s</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1h9zj4s" sourceRef="ServiceTask_0nczyzc" targetRef="ServiceTask_1iq8up2" />
    <bpmn:serviceTask id="ServiceTask_1iq8up2" name="Close Order Options">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/installation/close-order-option'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"endOptionsInstallation":' + execution.getVariable('endOptionsInstallationEvent') + ',"subscribeToOption":'+ execution.getVariable('subscribeToInstallationOptions') + '}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('close order option api');
var resp = connector.getVariable('response')
print('resp close order option' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1h9zj4s</bpmn:incoming>
      <bpmn:incoming>Flow_11f4rxe</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1lg1t9y</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_07jftby</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_07jftby" sourceRef="ServiceTask_1iq8up2" targetRef="Gateway_1l7woq8" />
    <bpmn:subProcess id="SubProcess_0mmrcxb" triggeredByEvent="true">
      <bpmn:userTask id="UserTask_0bf3iim" name="Review Task">
        <bpmn:incoming>SequenceFlow_1waihu6</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_0e4k2j3</bpmn:outgoing>
      </bpmn:userTask>
      <bpmn:scriptTask id="ScriptTask_19nyshb" name="Return to Last Task" camunda:asyncBefore="true" scriptFormat="JavaScript">
        <bpmn:incoming>SequenceFlow_0e4k2j3</bpmn:incoming>
        <bpmn:incoming>SequenceFlow_08d6zrk</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_0xwilxw</bpmn:outgoing>
        <bpmn:script>print('Return to flow is Running');
var errorTaskId = execution.getVariable('errorTaskId');
if(errorTaskId == null){
print('No where to go back to');
}else{          execution.getProcessEngineServices().
getRuntimeService().createProcessInstanceModification(execution.getProcessInstanceId()).startBeforeActivity(errorTaskId).
execute();
}</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:endEvent id="EndEvent_1e2jido">
        <bpmn:incoming>SequenceFlow_0xwilxw</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:sequenceFlow id="SequenceFlow_0xwilxw" sourceRef="ScriptTask_19nyshb" targetRef="EndEvent_1e2jido" />
      <bpmn:sequenceFlow id="SequenceFlow_0e4k2j3" sourceRef="UserTask_0bf3iim" targetRef="ScriptTask_19nyshb" />
      <bpmn:sequenceFlow id="SequenceFlow_0zlftus" sourceRef="StartEvent_0i3ud0x" targetRef="ExclusiveGateway_1xt5hlf" />
      <bpmn:startEvent id="StartEvent_0i3ud0x">
        <bpmn:outgoing>SequenceFlow_0zlftus</bpmn:outgoing>
        <bpmn:errorEventDefinition id="ErrorEventDefinition_0gr2i8b" errorRef="Error_07m3rlu" camunda:errorMessageVariable="errorTaskId" />
      </bpmn:startEvent>
      <bpmn:exclusiveGateway id="ExclusiveGateway_1xt5hlf">
        <bpmn:incoming>SequenceFlow_0zlftus</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_1waihu6</bpmn:outgoing>
        <bpmn:outgoing>SequenceFlow_1vm1bzx</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="SequenceFlow_1waihu6" sourceRef="ExclusiveGateway_1xt5hlf" targetRef="UserTask_0bf3iim">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode != 401}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:serviceTask id="ServiceTask_0dohh4b" name="Refresh Token">
        <bpmn:extensionElements>
          <camunda:connector>
            <camunda:inputOutput>
              <camunda:inputParameter name="url">
                <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/realms/Protectline/protocol/openid-connect/token'</camunda:script>
              </camunda:inputParameter>
              <camunda:inputParameter name="method">POST</camunda:inputParameter>
              <camunda:inputParameter name="headers">
                <camunda:map>
                  <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                  <camunda:entry key="Accept">application/json</camunda:entry>
                  <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
                </camunda:map>
              </camunda:inputParameter>
              <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
              <camunda:outputParameter name="Output_1b9kukr">
                <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
              </camunda:outputParameter>
            </camunda:inputOutput>
            <camunda:connectorId>http-connector</camunda:connectorId>
          </camunda:connector>
        </bpmn:extensionElements>
        <bpmn:incoming>SequenceFlow_1vm1bzx</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_08d6zrk</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="SequenceFlow_08d6zrk" sourceRef="ServiceTask_0dohh4b" targetRef="ScriptTask_19nyshb" />
      <bpmn:sequenceFlow id="SequenceFlow_1vm1bzx" sourceRef="ExclusiveGateway_1xt5hlf" targetRef="ServiceTask_0dohh4b">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode == 401}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
    </bpmn:subProcess>
    <bpmn:serviceTask id="Activity_0jsxg0g" name="Notification Customer">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscribeToOption = JSON.parse(execution.getVariable('subscribeToOption'));

var body = {
            date: subscribeToOption.date,
            contractId: subscribeToOption.contractId,
            customerId: subscribeToOption.customerId,
            interventionNumber: subscribeToOption.id,
            offerId: subscribeToOption.offerId,
            freeIntervention: subscribeToOption.freeIntervention,
            optionsSubscribed: subscribeToOption.optionsSubscribed,
        };
JSON.stringify(body);
</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_notifications');
url_tb+'/api/v1/notifications/email/options'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1712bc2">
              <camunda:script scriptFormat="JavaScript">print('send option Email');
var response = connector.getVariable('response')
print("resp send email Options order to OpenCell" + response);
var respHeader = connector.getVariable("headers");
var respStatusCode = connector.getVariable("statusCode");
print("status code" + respStatusCode);
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.getId();
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0cqqqmy</bpmn:incoming>
      <bpmn:outgoing>Flow_16sgjm5</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_16sgjm5" sourceRef="Activity_0jsxg0g" targetRef="ExclusiveGateway_0dib119" />
    <bpmn:exclusiveGateway id="ExclusiveGateway_1ngiyzg" default="Flow_0kiz9q8">
      <bpmn:incoming>SequenceFlow_0dpa2b5</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_14h8ih3</bpmn:outgoing>
      <bpmn:outgoing>Flow_0kiz9q8</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_14h8ih3" name="Successful Intervention" sourceRef="ExclusiveGateway_1ngiyzg" targetRef="ServiceTask_00nvo5y">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnInstallStatus== 'ACCEPTED'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_1s3gc2y" name="Close Order Options">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/close-order-option'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToServiceOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('close order option api');
var resp = connector.getVariable('response')
print('resp close order option' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_07dhm1g</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1itnrin</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1itnrin" sourceRef="ServiceTask_1s3gc2y" targetRef="ExclusiveGateway_0s8o9qw" />
    <bpmn:serviceTask id="ServiceTask_0kx4vis" name="Send Message to Logistic">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/logistics/send-option-logistics'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToLogisticOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">/* function to add 6 days to the date of subs option*/
function addDays(date, days) {
  var result = new Date(date);
  result.setDate(result.getDate() + days);
  return result;
}


print('send intervention to teamTool');
var resp = connector.getVariable('response')
print('resp send intervention de team tool' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* set date + 6 */
var today = new Date();
print(today);
var d= addDays(today ,6);

d.toLocaleString("fr-FR", {timeZone: "Europe/Paris"});
print(d);

var date_format_str = d.getFullYear().toString()+"-"+((d.getMonth()+1).toString().length==2?(d.getMonth()+1).toString():"0"+(d.getMonth()+1).toString())+"-"+(d.getDate().toString().length==2?d.getDate().toString():"0"+d.getDate().toString())+"T"+(d.getHours().toString().length==2?d.getHours().toString():"0"+d.getHours().toString())+":"+((parseInt(d.getMinutes()/5)*5).toString().length==2?(parseInt(d.getMinutes()/5)*5).toString():"0"+(parseInt(d.getMinutes()/5)*5).toString())+":00Z";

print(date_format_str);


execution.setVariable('optionLogisticsDate',date_format_str);


execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0mcftxs</bpmn:incoming>
      <bpmn:outgoing>Flow_0h2xene</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:intermediateCatchEvent id="IntermediateCatchEvent_10caowb">
      <bpmn:incoming>Flow_1jx7a1s</bpmn:incoming>
      <bpmn:incoming>Flow_0o5rx30</bpmn:incoming>
      <bpmn:outgoing>Flow_0dx7ha3</bpmn:outgoing>
      <bpmn:timerEventDefinition id="TimerEventDefinition_06nbss1">
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${optionLogisticsDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:intermediateCatchEvent>
    <bpmn:serviceTask id="ServiceTask_1te9qdi" name="CreateÂ Opencell Service">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/logistics/create-service'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscribeToOption":'+execution.getVariable('subscribeToLogisticOptions')+',"date":"'+execution.getVariable('optionLogisticsDate')+'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create opencell service api');
var resp = connector.getVariable('response')
print('resp create opencell service' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0dx7ha3</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0ony3hz</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_1iz7sqs" name="Close Order Options">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/logistics/close-order-option'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToLogisticOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('close order option api');
var resp = connector.getVariable('response')
print('resp close order option' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0ony3hz</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0jo2tv3</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0o2ywp3" name="Get keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/realms/Protectline/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1tcqe5d">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1ss1f7o</bpmn:incoming>
      <bpmn:outgoing>Flow_0tr0lk9</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_08d483e" name="if endDate != null" sourceRef="ExclusiveGateway_0s8o9qw" targetRef="Event_1903ask">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">execution.getVariable('endDate') != null;</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1tnoqta" sourceRef="Activity_14yi6lr" targetRef="IntermediateThrowEvent_19b7ls6" />
    <bpmn:serviceTask id="Activity_14yi6lr" name="Notifications end delegation">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/notifications/email/endOptions'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToServiceOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1qi4gcr">
              <camunda:script scriptFormat="JavaScript">print('Notification delegation end');
var resp = connector.getVariable('response');
print(resp);
var respHeader = connector.getVariable('headers');
print(respHeader);
var respStatusCode = connector.getVariable('statusCode');
print(respStatusCode);


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
  print('no error');

  /*solve incident if exist*/
  print('incientId : ' + execution.getVariable('incidentId'));
  if (execution.getVariable('incidentId') != null) {
    execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
    execution.setVariable('incidentId', null);
  }
  /* end solving incident*/

  execution.setVariable('httpCode', respStatusCode);
  execution.setVariable('state', 'SUCCESS');
  execution.setVariable('responseMessage', response);
} else {
  execution.setVariable('httpCode', respStatusCode);
  execution.setVariable('state', 'FAIL');
  execution.setVariable('responseMessage', response);
  /*solve incident if exist*/
  print('incientId : ' + execution.getVariable('incidentId'));
  if (execution.getVariable('incidentId') != null) {
    execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
    execution.setVariable('incidentId', null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
  var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident('Api Fail', context, response);
  newIncident.getId();
  execution.setVariable('incidentId', newIncident.getId());
  print('incientId' + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1f6cpex</bpmn:incoming>
      <bpmn:outgoing>Flow_1tnoqta</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_1tjfruc" name="Add Comment Ticket Unreachable Customer">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/installation/addCommentTicketUnreachableCustomer'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"toolPlanificationDto":' + execution.getVariable('toolPlanificationDto') + ',"ticketNumber":' + execution.getVariable('ticketNumber') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***CancelAppointment *** Add Comment Ticket***');
var resp = connector.getVariable('response')
print('resp CancelAppointment *** Add Comment Ticket  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1j7jg2a</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0f5w48k</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:intermediateCatchEvent id="IntermediateCatchEvent_15cxhb5">
      <bpmn:incoming>SequenceFlow_0f5w48k</bpmn:incoming>
      <bpmn:incoming>Flow_1708w73</bpmn:incoming>
      <bpmn:incoming>Flow_17wcwzq</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0usl7wi</bpmn:outgoing>
      <bpmn:messageEventDefinition id="MessageEventDefinition_0stu25x" messageRef="Message_14qexns" />
    </bpmn:intermediateCatchEvent>
    <bpmn:sequenceFlow id="SequenceFlow_0usl7wi" sourceRef="IntermediateCatchEvent_15cxhb5" targetRef="ExclusiveGateway_0jmnydo" />
    <bpmn:exclusiveGateway id="ExclusiveGateway_0jmnydo">
      <bpmn:incoming>SequenceFlow_0usl7wi</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1j7jg2a</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0iv0l5q</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_07gz8m2</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:inclusiveGateway id="InclusiveGateway_1vhy8xz">
      <bpmn:incoming>SequenceFlow_07gz8m2</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0hd0ruz</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0ai54j5</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:serviceTask id="ServiceTask_0nbu3nw" name="Update data Customer and Site">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/installation/updateDataCustomer'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"toolPlanificationDto":' + execution.getVariable('toolPlanificationDto') + ',"ticketNumber":' + execution.getVariable('ticketNumber') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***CancelAppointment *** Add Comment Ticket***');
var resp = connector.getVariable('response')
print('resp CancelAppointment *** Add Comment Ticket  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
execution.setVariable('updateDataError',false);
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
execution.setVariable('updateDataError',true);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1w212od</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0pabsj8</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0y3i9z1</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:userTask id="UserTask_00857lx" name="Review Task">
      <bpmn:incoming>SequenceFlow_1viafdq</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0pabsj8</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1het873">
      <bpmn:incoming>SequenceFlow_06t1jmk</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1w212od</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_026w8ds</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1oa9byl">
      <bpmn:incoming>SequenceFlow_0y3i9z1</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1viafdq</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0nkx8wt</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:endEvent id="EndEvent_0rcyqtp">
      <bpmn:incoming>SequenceFlow_0nkx8wt</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="SequenceFlow_1w212od" sourceRef="ExclusiveGateway_1het873" targetRef="ServiceTask_0nbu3nw">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!addCommentError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0pabsj8" sourceRef="UserTask_00857lx" targetRef="ServiceTask_0nbu3nw" />
    <bpmn:sequenceFlow id="SequenceFlow_0y3i9z1" sourceRef="ServiceTask_0nbu3nw" targetRef="ExclusiveGateway_1oa9byl" />
    <bpmn:sequenceFlow id="SequenceFlow_1viafdq" sourceRef="ExclusiveGateway_1oa9byl" targetRef="UserTask_00857lx">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${updateDataError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0nkx8wt" sourceRef="ExclusiveGateway_1oa9byl" targetRef="EndEvent_0rcyqtp" />
    <bpmn:userTask id="UserTask_1gu2uk6" name="Review Task">
      <bpmn:incoming>SequenceFlow_026w8ds</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_05bp391</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:serviceTask id="ServiceTask_0ehxrzb" name="Add Comment Ticket validated intervention" camunda:asyncAfter="true">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/installation/addCommentTicketValidatedIntervention'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"toolPlanificationDto":' + execution.getVariable('toolPlanificationDto') + ',"ticketNumber":' + execution.getVariable('ticketNumber') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***CancelAppointment *** Add Comment Ticket***');
var resp = connector.getVariable('response');
print('resp CancelAppointment *** Add Comment Ticket  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
execution.setVariable('addCommentError',false);
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
execution.setVariable('addCommentError',true);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_05bp391</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0hd0ruz</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_06t1jmk</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_06t1jmk" sourceRef="ServiceTask_0ehxrzb" targetRef="ExclusiveGateway_1het873" />
    <bpmn:sequenceFlow id="SequenceFlow_026w8ds" sourceRef="ExclusiveGateway_1het873" targetRef="UserTask_1gu2uk6">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${addCommentError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_05bp391" sourceRef="UserTask_1gu2uk6" targetRef="ServiceTask_0ehxrzb" />
    <bpmn:sequenceFlow id="SequenceFlow_0hd0ruz" sourceRef="InclusiveGateway_1vhy8xz" targetRef="ServiceTask_0ehxrzb">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1j7jg2a" name="Unreachable customer" sourceRef="ExclusiveGateway_0jmnydo" targetRef="ServiceTask_1tjfruc">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnPlanifStatus== 'UNREACHABLE_CUSTOMER'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0f5w48k" sourceRef="ServiceTask_1tjfruc" targetRef="IntermediateCatchEvent_15cxhb5" />
    <bpmn:sequenceFlow id="SequenceFlow_09a1qr8" name="Cancel Appointment" sourceRef="Gateway_1lys6f0" targetRef="Activity_15iblqu">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnInstallStatus== 'CANCELED_APPOINTMENT'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0iv0l5q" name="Cancel Intervention" sourceRef="ExclusiveGateway_0jmnydo" targetRef="ServiceTask_0iw37bo">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnPlanifStatus== 'CANCELED_INTERVENTION'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_07gz8m2" name="validate Intervention" sourceRef="ExclusiveGateway_0jmnydo" targetRef="InclusiveGateway_1vhy8xz">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnPlanifStatus== 'VALIDATED_INTERVENTION'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0ai54j5" sourceRef="InclusiveGateway_1vhy8xz" targetRef="IntermediateThrowEvent_0604xxg">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_0iw37bo" name="Close Order Options">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/installation/close-order-option-res'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToInstallationOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('close order option api');
var resp = connector.getVariable('response')
print('resp close order option' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0iv0l5q</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_09wejo3</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0cp7bzi</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0cp7bzi" sourceRef="ServiceTask_0iw37bo" targetRef="Activity_1wu8xuw" />
    <bpmn:serviceTask id="ServiceTask_0axjyuk" name="Update Service To Opencell Underlying Termination Reason">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/underlying-termination/update'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToServiceOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_17s6mo5">
              <camunda:script scriptFormat="JavaScript">print('Terminate Service Opencell with installation service');
var resp = connector.getVariable('response')
print('Terminate Service Opencell with installation service response :' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1gdt02x</bpmn:incoming>
      <bpmn:incoming>Flow_05jsdji</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1k6dvtr</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1k6dvtr" sourceRef="ServiceTask_0axjyuk" targetRef="ServiceTask_1ddt8sv" />
    <bpmn:exclusiveGateway id="Gateway_1x96nzg">
      <bpmn:incoming>SequenceFlow_1tc761p</bpmn:incoming>
      <bpmn:outgoing>Flow_11f4rxe</bpmn:outgoing>
      <bpmn:outgoing>Flow_1jbps7x</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_11f4rxe" name="freeIntervention == true" sourceRef="Gateway_1x96nzg" targetRef="ServiceTask_1iq8up2">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${freeIntervention == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1jbps7x" name="freeIntervention == false" sourceRef="Gateway_1x96nzg" targetRef="ServiceTask_0nczyzc">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${freeIntervention == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0h2xene" sourceRef="ServiceTask_0kx4vis" targetRef="Gateway_0ne1s4o" />
    <bpmn:exclusiveGateway id="ExclusiveGateway_0yh1ley">
      <bpmn:incoming>Flow_1lkthlc</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0dpa2b5</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1lg1t9y</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0dpa2b5" name="serviceInstanceIsEmpty == False" sourceRef="ExclusiveGateway_0yh1ley" targetRef="ExclusiveGateway_1ngiyzg">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isempty==false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1lg1t9y" name="serviceInstanceIsEmpty == True" sourceRef="ExclusiveGateway_0yh1ley" targetRef="ServiceTask_1iq8up2">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isempty==true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_0ukgode" name="Add order Comment ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscribeToOption = execution.getVariable('subscribeToOption');
var optionsList = S(subscribeToOption).prop("optionsSubscribed").elements();

var comment = '';
for (let i = 0; i &lt; optionsList.size(); i++) {
  var option = optionsList.get(i);
  var quantity = option.prop("quantity").value();
  var description = option.prop("description").value();
  var startDate = option.prop("startDate").value();
  if (i != 0) {
    comment = comment + '\\n';
  }
  comment = comment + quantity + ' ' + description + ' : date de souscription le ' + startDate;
}

'{"comment":"' + comment + '"' +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var subscribeToOption = execution.getVariable('subscribeToOption');
var ticketId = S(subscribeToOption).prop("ticketId").value();

url_tb+'/api/support/v1/ticket/' + ticketId + '/comment';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1712bc2">
              <camunda:script scriptFormat="JavaScript">print('send option Email');
var response = connector.getVariable('response')
print("resp send email Options order to OpenCell" + response);
var respHeader = connector.getVariable("headers");
var respStatusCode = connector.getVariable("statusCode");
print("status code" + respStatusCode);
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.getId();
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0ouc0rs</bpmn:incoming>
      <bpmn:outgoing>Flow_11vs6fq</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_11vs6fq" sourceRef="Activity_0ukgode" targetRef="Activity_1ganxxp" />
    <bpmn:serviceTask id="Activity_1ganxxp" name="Add comment Intervention Number">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscribeToOption = execution.getVariable('subscribeToOption');
var ticketNumber = S(subscribeToOption).prop("id").value();

'{"comment":"NÂ° de DI : ' + ticketNumber + '"' +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var subscribeToOption = execution.getVariable('subscribeToOption');
var ticketId = S(subscribeToOption).prop("ticketId").value();

url_tb+'/api/support/v1/ticket/' + ticketId + '/comment';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1712bc2">
              <camunda:script scriptFormat="JavaScript">print('send option Email');
var response = connector.getVariable('response')
print("resp send email Options order to OpenCell" + response);
var respHeader = connector.getVariable("headers");
var respStatusCode = connector.getVariable("statusCode");
print("status code" + respStatusCode);
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.getId();
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_11vs6fq</bpmn:incoming>
      <bpmn:outgoing>Flow_0cqqqmy</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_10zxbzl" name="Comment Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var subscribeToOption = execution.getVariable('subscribeToOption');
var ticketId = S(subscribeToOption).prop("ticketId").value();

url_tb+'/api/support/v1/ticket/' + ticketId + '/comment';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var endOptionsInstallation = execution.getVariable('endOptionsInstallationEvent');
var comment = '';

if (endOptionsInstallation != null &amp;&amp; S(endOptionsInstallation).hasProp("status")) {
  var status = S(endOptionsInstallation).prop("status");

  var statusCode = S(status).prop("statusCode").value() || '';
  var statusDescription = S(status).hasProp("statusDescription") ? S(status).prop("statusDescription").value() : null;

  if (statusDescription) {
    comment = statusCode + ' - ' + statusDescription;
  }

  if (S(status).hasProp("criURL")) {
    var criURL = S(status).prop("criURL").value();
    if (criURL) {
      comment += '\nURL CRI : ' + new java.net.URI(criURL).toURL();
    }
  }
}

var jsonPayload = JSON.stringify({
  comment: comment
});

jsonPayload;</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('Comment Ticket cas #25 ');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0ikhqh6</bpmn:incoming>
      <bpmn:incoming>Flow_1hd3r1z</bpmn:incoming>
      <bpmn:outgoing>Flow_0fo1naw</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0fo1naw" sourceRef="ServiceTask_10zxbzl" targetRef="InclusiveGateway_1vnp14s" />
    <bpmn:exclusiveGateway id="Gateway_0z0c681">
      <bpmn:incoming>Flow_1onx0gq</bpmn:incoming>
      <bpmn:outgoing>Flow_0ecm81q</bpmn:outgoing>
      <bpmn:outgoing>Flow_0y8g4p3</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_0ecm81q" name="if discount plan exist" sourceRef="Gateway_0z0c681" targetRef="Activity_05ad57x">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${existDiscountPlan}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_05ad57x" name="Apply Discount Plan">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_customer= execution.getVariable('url_crm_customer');
var subscribeToLogisticOptions = execution.getVariable('subscribeToLogisticOptions');
var billingAccountCode  = S(subscribeToLogisticOptions).prop("customerId").value();;
url_customer+'/api/customer/v1/billingAccount/' + billingAccountCode + '/discounts'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscribeToLogisticOptions = execution.getVariable('subscribeToLogisticOptions');
var discountPlan = S(subscribeToLogisticOptions).prop("discountPlan");
'{"discountPlan":'+discountPlan+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create One shot charge api');
var resp = connector.getVariable('response')
print('resp create one shot charge' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0ecm81q</bpmn:incoming>
      <bpmn:outgoing>Flow_1c6hcd7</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1c6hcd7" sourceRef="Activity_05ad57x" targetRef="Gateway_02cts4u" />
    <bpmn:exclusiveGateway id="Gateway_02cts4u">
      <bpmn:incoming>Flow_1c6hcd7</bpmn:incoming>
      <bpmn:incoming>Flow_0y8g4p3</bpmn:incoming>
      <bpmn:outgoing>Flow_1j1dksf</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1j1dksf" sourceRef="Gateway_02cts4u" targetRef="Activity_0yt6ype" />
    <bpmn:sequenceFlow id="Flow_0tr0lk9" sourceRef="ServiceTask_0o2ywp3" targetRef="Activity_19qbur9" />
    <bpmn:serviceTask id="Activity_0uti306" name="Apply Discount from initial order">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_customer= execution.getVariable('url_crm_customer');
var subscribeToInstallationOptions = execution.getVariable('subscribeToInstallationOptions');
var billingAccountCode  = S(subscribeToInstallationOptions).prop("customerId").value();;
url_customer+'/api/customer/v1/billingAccount/' + billingAccountCode + '/discounts'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">print('payload Apply Discount from initial order');
var subscribeToInstallationOptions = execution.getVariable('subscribeToInstallationOptions');
var discountPlan = S(subscribeToInstallationOptions).prop("discountPlan").elements();
var discountPlanPayload = { "discountPlan": [] };

for (var i = 0; i &lt; discountPlan.length; i++) {
  discountPlanPayload.discountPlan.push({
    "discountPlanid": discountPlan[i].prop("discountPlanId").value()
  });
}

// SÃ©rialiser l'objet en JSON si nÃ©cessaire
var jsonString = JSON.stringify(discountPlanPayload);
print('JSON Payload:', jsonString);


JSON.stringify(discountPlanPayload);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create One shot charge api');
var resp = connector.getVariable('response')
print('resp create one shot charge' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1gufyu3</bpmn:incoming>
      <bpmn:outgoing>Flow_0zg1se4</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0zg1se4" sourceRef="Activity_0uti306" targetRef="Activity_0lfeino" />
    <bpmn:scriptTask id="Activity_0lfeino" name="get amendment data" scriptFormat="Javascript">
      <bpmn:incoming>Flow_0zg1se4</bpmn:incoming>
      <bpmn:outgoing>Flow_01b56bb</bpmn:outgoing>
      <bpmn:script>print('get amendment data');
var amendmentBo = false;
var endOptionsInstallationEvent = execution.getVariable('endOptionsInstallationEvent');
if(endOptionsInstallationEvent != null){
	var status = S(endOptionsInstallationEvent).prop("status");
	if(status  != null &amp;&amp; S(status).hasProp("avenantURL")){
	  var avenantURL = S(status).prop("avenantURL").value();
	  if(avenantURL != null ){
		var subscription = S(endOptionsInstallationEvent).prop('subscription');  
		if(subscription  != null &amp;&amp; S(subscription).hasProp("services")){  
			var services = S(subscription).prop("services");
			if(services  != null &amp;&amp; S(services).hasProp("serviceInstance")){
				var serviceInstance = S(services).prop("serviceInstance").elements();
				var serviceTemplates = S("[]");
				for (var i=0; i &lt; serviceInstance.size(); i++) {
				  var subscriptionDate = serviceInstance[i].prop("subscriptionDate").value();
				  var installationDate = serviceInstance[i].prop("installationDate").value()
				  if(subscriptionDate == installationDate){
					 var service = S("{}").prop("code", serviceInstance[i].prop("code").value());
				  	serviceTemplates.append(service);
				  }
				}
				if(serviceTemplates.elements() != null &amp;&amp; serviceTemplates.elements().size() &gt; 0){
					amendmentBo = true;
				}
			} 
		}  		
	  }
	}
}
var amendment = S("{}");
if(amendmentBo == true){
	amendment.prop("amendment", amendmentBo);
	amendment.prop("serviceInstance", serviceTemplates);
}else{
	amendment.prop("amendment", amendmentBo);
}
execution.setVariable('amendment',amendment);</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:serviceTask id="Activity_0vjanwt" name="Get Discount Available">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_catalog');
url_tb+'/api/catalog/v1/catalogManagement/discounts/available'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var userAccountCode = null;
var contractId = null;
var endOptionsInstallationEvent = execution.getVariable('endOptionsInstallationEvent');
if(endOptionsInstallationEvent != null){
	var user = S(endOptionsInstallationEvent).prop("user");
	if(user  != null &amp;&amp; S(user).hasProp("code")){
		userAccountCode = S(user).prop("code").value();
	}
	var subscription = S(endOptionsInstallationEvent).prop('subscription');  
	if(subscription  != null &amp;&amp; S(subscription).hasProp("code")){  
		contractId = S(subscription).prop("code").value();
	}
}
var amendment = execution.getVariable('amendment');
if(amendment  != null &amp;&amp; S(amendment).hasProp("serviceInstance")){
	var serviceInstance = S(amendment).prop("serviceInstance").elements();
	var serviceTemplates = S("[]");
	for (var i=0; i &lt; serviceInstance.size(); i++) {
		var service = S("{}").prop("code", serviceInstance[i].prop("code").value());
		service.prop("pricingDate", serviceInstance[i].prop("subscriptionDate").value());
		serviceTemplates.append(service);
	}
}

'{"userAccountCode":"' + userAccountCode + '"' +
',"contractId":"' + contractId + '"' +
',"serviceTemplates":' + serviceTemplates.toString() +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('*************Get Discount Available************');
var resp = connector.getVariable('response')
print('resp Get Discount Available  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)

if(resp != null &amp;&amp; S(resp).hasProp("serviceTemplates")){
	var serviceTemplates = S(resp).prop("serviceTemplates").elements();
	var discountAmendmentToApply = S("[]");
	for (var i=0; i &lt; serviceTemplates.size(); i++) {
		if(serviceTemplates[i].hasProp("discountsAvailable")){
			var discountsAvailable = serviceTemplates[i].prop("discountsAvailable").elements();
			for (var j=0; j &lt; discountsAvailable.size(); j++) {				
				discountAmendmentToApply.append(discountsAvailable[j]);
			}
		}		
	}
execution.setVariable('discountAmendmentToApply',discountAmendmentToApply)	
}	
	

} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}	</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0l1wn25</bpmn:incoming>
      <bpmn:outgoing>Flow_1tk56iu</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_0rm21wf" name="Apply Discount new options from installation">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_customer= execution.getVariable('url_crm_customer');
var subscribeToInstallationOptions = execution.getVariable('subscribeToInstallationOptions');
var billingAccountCode  = S(subscribeToInstallationOptions).prop("customerId").value();;
url_customer+'/api/customer/v1/billingAccount/' + billingAccountCode + '/discounts'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var discountAmendmentToApply = execution.getVariable('discountAmendmentToApply');
var discountPlanForInstantiation = S("[]");
if(discountAmendmentToApply != null){
	var discountCodes = discountAmendmentToApply.elements();
	for (var i=0; i &lt; discountCodes.size(); i++) {
	  var discountCodeNode = S("{}").prop("discountPlanid", discountCodes[i].prop("discountPlanCode").value());
	  discountPlanForInstantiation.append(discountCodeNode);
	}
}
'{"discountPlan":' + discountPlanForInstantiation.toString() +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('*************Apply Discount API ************');
var resp = connector.getVariable('response')
print('resp create emergency contact  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1tk56iu</bpmn:incoming>
      <bpmn:outgoing>Flow_1gub7is</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:inclusiveGateway id="Gateway_0vk16sw">
      <bpmn:incoming>Flow_01b56bb</bpmn:incoming>
      <bpmn:outgoing>Flow_0l1wn25</bpmn:outgoing>
      <bpmn:outgoing>Flow_0ikhqh6</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:sequenceFlow id="Flow_01b56bb" sourceRef="Activity_0lfeino" targetRef="Gateway_0vk16sw" />
    <bpmn:sequenceFlow id="Flow_0l1wn25" name="oui" sourceRef="Gateway_0vk16sw" targetRef="Activity_0vjanwt">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">var amendment = execution.getVariable('amendment');
var amendmentBo = S(amendment).prop("amendment").value();

amendmentBo == true</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1tk56iu" sourceRef="Activity_0vjanwt" targetRef="Activity_0rm21wf" />
    <bpmn:sequenceFlow id="Flow_0ikhqh6" name="non" sourceRef="Gateway_0vk16sw" targetRef="ServiceTask_10zxbzl">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:endEvent id="Event_0johpjq">
      <bpmn:incoming>Flow_1gub7is</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_1gub7is" sourceRef="Activity_0rm21wf" targetRef="Event_0johpjq" />
    <bpmn:sequenceFlow id="SequenceFlow_0ony3hz" sourceRef="ServiceTask_1te9qdi" targetRef="ServiceTask_1iz7sqs" />
    <bpmn:sequenceFlow id="SequenceFlow_0jo2tv3" sourceRef="ServiceTask_1iz7sqs" targetRef="InclusiveGateway_1vnp14s" />
    <bpmn:sequenceFlow id="Flow_0y8g4p3" sourceRef="Gateway_0z0c681" targetRef="Gateway_02cts4u">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!existDiscountPlan}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0dx7ha3" sourceRef="IntermediateCatchEvent_10caowb" targetRef="ServiceTask_1te9qdi" />
    <bpmn:exclusiveGateway id="Gateway_1dtxwlm">
      <bpmn:incoming>SequenceFlow_12fac8q</bpmn:incoming>
      <bpmn:outgoing>Flow_1z0s6za</bpmn:outgoing>
      <bpmn:outgoing>Flow_0271hg9</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1z0s6za" name="If Delegation" sourceRef="Gateway_1dtxwlm" targetRef="ServiceTask_1rsj9xj">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${serviceType ==  'DELCPT' || serviceType ==  'DELTMP'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0271hg9" name="If 4G" sourceRef="Gateway_1dtxwlm" targetRef="Activity_1fndayi">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${serviceType ==  '4G' }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0cqqqmy" sourceRef="Activity_1ganxxp" targetRef="Activity_0jsxg0g" />
    <bpmn:serviceTask id="Activity_1pe7ez0" name="Close Order Options">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/close-order-option'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToServiceOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('close order option api');
var resp = connector.getVariable('response')
print('resp close order option' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1ddycdv</bpmn:incoming>
      <bpmn:outgoing>Flow_05jsdji</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_05jsdji" sourceRef="Activity_1pe7ez0" targetRef="ServiceTask_0axjyuk" />
    <bpmn:intermediateCatchEvent id="IntermediateThrowEvent_19b7ls6">
      <bpmn:incoming>Flow_1tnoqta</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0wkac3r</bpmn:outgoing>
      <bpmn:timerEventDefinition>
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${endDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:intermediateCatchEvent>
    <bpmn:sequenceFlow id="SequenceFlow_0wkac3r" sourceRef="IntermediateThrowEvent_19b7ls6" targetRef="ServiceTask_0o6rxdb" />
    <bpmn:intermediateCatchEvent id="Event_1903ask">
      <bpmn:incoming>SequenceFlow_08d483e</bpmn:incoming>
      <bpmn:outgoing>Flow_1f6cpex</bpmn:outgoing>
      <bpmn:timerEventDefinition id="TimerEventDefinition_19255ae">
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${notificationDelegationDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:intermediateCatchEvent>
    <bpmn:sequenceFlow id="Flow_1f6cpex" sourceRef="Event_1903ask" targetRef="Activity_14yi6lr" />
    <bpmn:serviceTask id="Activity_05yb7io" name="CreateÂ Opencell Service">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/service-activate'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToServiceOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create opencell service');
var resp = connector.getVariable('response')
print('resp create opencellservice' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0fcryoo</bpmn:incoming>
      <bpmn:outgoing>Flow_1ddycdv</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1ddycdv" sourceRef="Activity_05yb7io" targetRef="Activity_1pe7ez0" />
    <bpmn:intermediateCatchEvent id="IntermediateThrowEvent_1jo9oz2">
      <bpmn:incoming>SequenceFlow_1jg58k7</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_12fac8q</bpmn:outgoing>
      <bpmn:timerEventDefinition>
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${startDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:intermediateCatchEvent>
    <bpmn:sequenceFlow id="SequenceFlow_12fac8q" sourceRef="IntermediateThrowEvent_1jo9oz2" targetRef="Gateway_1dtxwlm" />
    <bpmn:sequenceFlow id="Flow_033cjnj" sourceRef="IntermediateThrowEvent_0604xxg" targetRef="Gateway_1lys6f0" />
    <bpmn:serviceTask id="Activity_1wu8xuw" name="Add Comment Ticket Cancel intervention">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="javascript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketNumber');

url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="javascript">var endOptionsInstallationEvent = execution.getVariable('endOptionsInstallationEvent');
var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var comment = '';
var planner = '';

if (endOptionsInstallationEvent != null &amp;&amp; S(endOptionsInstallationEvent).hasProp("status")) {
  var status = S(endOptionsInstallationEvent).prop("status");
  var statusCode = S(status).prop("statusCode").value();
  var statusDescription = S(status).prop("statusDescription").value();

  comment = "Annulation de l'intervention : "+statusCode +" - "+statusDescription;
  planner = "gestionnaireevent@protectline.fr";
} else if (toolPlanificationDto != null &amp;&amp; S(toolPlanificationDto).hasProp("subscription")) {
  var subscription = S(toolPlanificationDto).prop("subscription");
  var cancelIntervention = S(subscription).prop("cancelIntervention");
  var reasonCode = S(cancelIntervention).prop("reasonCode").value();
  var reasonLabel = S(cancelIntervention).prop("reasonLabel").value();
  planner = S(cancelIntervention).prop("planner").value();
  comment = "Annulation de l'intervention : "+reasonCode+" - "+reasonLabel;
}

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0m638gf">
              <camunda:script scriptFormat="JavaScript">print('Add Comment Ticket Cancel intervention');
var response = connector.getVariable('response')
print("resp Add Comment Ticket Cancel intervention" + response);
var respHeader = connector.getVariable("headers");
var respStatusCode = connector.getVariable("statusCode");
print("status code" + respStatusCode);
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.getId();
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0cp7bzi</bpmn:incoming>
      <bpmn:outgoing>Flow_1ho9q1r</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1ho9q1r" sourceRef="Activity_1wu8xuw" targetRef="InclusiveGateway_1vnp14s" />
    <bpmn:sequenceFlow id="SequenceFlow_09wejo3" name="Cancel Intervention" sourceRef="Gateway_1lys6f0" targetRef="ServiceTask_0iw37bo">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnInstallStatus== 'CANCELED_INTERVENTION'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_15iblqu" name="Add Comment Ticket Cancel appointment">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="javascript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketNumber');

url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="javascript">var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");
var cancelAppointment = S(subscription).prop("cancelAppointment");

var reasonCode = S(cancelAppointment).prop("reasonCode").value();
var reasonLabel = S(cancelAppointment).prop("reasonLabel").value();
var planner = S(cancelAppointment).prop("planner").value();
var comment = "Annulation du RDV : " + reasonCode + " - " + reasonLabel;

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0m638gf">
              <camunda:script scriptFormat="JavaScript">print('Add Comment Ticket Cancel appointment');
var response = connector.getVariable('response')
print("resp Add Comment Ticket Cancel appointment" + response);
var respHeader = connector.getVariable("headers");
var respStatusCode = connector.getVariable("statusCode");
print("status code" + respStatusCode);
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.getId();
  execution.setVariable("incidentId", newIncident.getId());
  print("incientId" + newIncident.getId());
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_09a1qr8</bpmn:incoming>
      <bpmn:outgoing>Flow_1708w73</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1708w73" sourceRef="Activity_15iblqu" targetRef="IntermediateCatchEvent_15cxhb5" />
    <bpmn:serviceTask id="Activity_1fndayi" name="Create Site Usge 4G">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var subscribeToOption = execution.getVariable('subscribeToOption');
var contractId = S(subscribeToOption).prop("contractId").value();
var serviceType = execution.getVariable('serviceType');

var url_tb= execution.getVariable('url_crm_device');
print("path" + url_tb+'/api/device/v1/' + contractId + '/' + serviceType)
url_tb+'/api/device/v1/' + contractId + '/' + serviceType</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript" />
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create opencell service api');
var resp = connector.getVariable('response')
print('resp create opencell service' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0271hg9</bpmn:incoming>
      <bpmn:outgoing>Flow_0fcryoo</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0fcryoo" sourceRef="Activity_1fndayi" targetRef="Activity_05yb7io" />
    <bpmn:exclusiveGateway id="Gateway_1lys6f0" default="Flow_1lkthlc">
      <bpmn:incoming>Flow_033cjnj</bpmn:incoming>
      <bpmn:outgoing>Flow_1lkthlc</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_09a1qr8</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_09wejo3</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1lkthlc" sourceRef="Gateway_1lys6f0" targetRef="ExclusiveGateway_0yh1ley" />
    <bpmn:endEvent id="EndEvent_08ecrjs">
      <bpmn:incoming>SequenceFlow_0kfj7z1</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:scriptTask id="ScriptTask_0xsk721" name="Error" scriptFormat="Javascript">
      <bpmn:incoming>Flow_0kiz9q8</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0kfj7z1</bpmn:outgoing>
      <bpmn:script>print('CODE_STATUS_ERROR: Unrecognized Code Status of End Installation');

var activityId = execution.getCurrentActivityId();
var resp = execution.getVariable('returnInstallStatus');

if (resp =='REJECTED'){
var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity'); 
var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext'); 
var context = new IncidentContext(); 
context.setActivityId(execution.getCurrentActivityId()); 
context.setExecutionId(execution.getProcessInstanceId()); 
context.setProcessDefinitionId(execution.getProcessDefinitionId()); 
var newIncident = IncidentEntity.createAndInsertIncident("FAILED", context, "Error return code status"); 

execution.setVariable('incidentId',newIncident.getId());

throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}
if (execution.getVariable('incidentId')!=null){
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="SequenceFlow_0kfj7z1" sourceRef="ScriptTask_0xsk721" targetRef="EndEvent_08ecrjs" />
    <bpmn:sequenceFlow id="Flow_0kiz9q8" sourceRef="ExclusiveGateway_1ngiyzg" targetRef="ScriptTask_0xsk721" />
    <bpmn:exclusiveGateway id="Gateway_0ne1s4o">
      <bpmn:incoming>Flow_0h2xene</bpmn:incoming>
      <bpmn:outgoing>Flow_1onx0gq</bpmn:outgoing>
      <bpmn:outgoing>Flow_1emlqh9</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1onx0gq" name="Si seller = ORANGE" sourceRef="Gateway_0ne1s4o" targetRef="Gateway_0z0c681">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${parentSellerCode=='ORANGE'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="Gateway_1l7woq8">
      <bpmn:incoming>SequenceFlow_07jftby</bpmn:incoming>
      <bpmn:outgoing>Flow_1gufyu3</bpmn:outgoing>
      <bpmn:outgoing>Flow_1hd3r1z</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1gufyu3" name="Si seller = ORANGE" sourceRef="Gateway_1l7woq8" targetRef="Activity_0uti306">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${parentSellerCode=='ORANGE'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1emlqh9" name="Si seller = GROUPAMA" sourceRef="Gateway_0ne1s4o" targetRef="Activity_001701s">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${parentSellerCode=='GROUPAMA'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1hd3r1z" name="Si seller = GROUPAMA" sourceRef="Gateway_1l7woq8" targetRef="ServiceTask_10zxbzl">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${parentSellerCode=='GROUPAMA'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_19qbur9" name="Get seller data">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_seller');
var subscribeToOption = execution.getVariable('subscribeToOption');
var sellerCode = S(subscribeToOption).prop("sellerCode").value();

url_tb+'/api/seller/v1/sellers/' + sellerCode;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">GET</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1712bc2">
              <camunda:script scriptFormat="JavaScript">print('Get seller data');
var response = connector.getVariable('response')
print("resp Get seller data" + response);
var respHeader = connector.getVariable("headers");
var respStatusCode = connector.getVariable("statusCode");
print("status code" + respStatusCode);
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
  execution.setVariable("parentSellerCode", S(response).prop("parentSeller").value());
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0tr0lk9</bpmn:incoming>
      <bpmn:outgoing>Flow_0ouc0rs</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0ouc0rs" sourceRef="Activity_19qbur9" targetRef="Activity_0ukgode" />
    <bpmn:sequenceFlow id="Flow_1jx7a1s" sourceRef="Activity_0yt6ype" targetRef="IntermediateCatchEvent_10caowb" />
    <bpmn:userTask id="Activity_0yt6ype">
      <bpmn:incoming>Flow_1j1dksf</bpmn:incoming>
      <bpmn:outgoing>Flow_1jx7a1s</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:sequenceFlow id="Flow_0o5rx30" sourceRef="Activity_001701s" targetRef="IntermediateCatchEvent_10caowb" />
    <bpmn:userTask id="Activity_001701s">
      <bpmn:incoming>Flow_1emlqh9</bpmn:incoming>
      <bpmn:outgoing>Flow_0o5rx30</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:parallelGateway id="Gateway_038fcb7">
      <bpmn:incoming>SequenceFlow_08c5cml</bpmn:incoming>
      <bpmn:outgoing>Flow_0rbzed5</bpmn:outgoing>
      <bpmn:outgoing>Flow_17wcwzq</bpmn:outgoing>
    </bpmn:parallelGateway>
    <bpmn:callActivity id="Activity_1ilto4i" name="Digit Interventions" calledElement="digit_interventions">
      <bpmn:extensionElements>
        <camunda:in businessKey="#{execution.processBusinessKey}" />
        <camunda:out variables="all" />
        <camunda:inputOutput>
          <camunda:inputParameter name="contractId">
            <camunda:script scriptFormat="JavaScript">var subscribeToInstallationOptions = execution.getVariable('subscribeToInstallationOptions'); S(subscribeToInstallationOptions ).prop("contractId").value()</camunda:script>
          </camunda:inputParameter>
          <camunda:inputParameter name="interventionType">EX</camunda:inputParameter>
          <camunda:inputParameter name="customerId">
            <camunda:script scriptFormat="JavaScript">var subscribeToInstallationOptions = execution.getVariable('subscribeToInstallationOptions'); S(subscribeToInstallationOptions ).prop("customerId").value()</camunda:script>
          </camunda:inputParameter>
          <camunda:inputParameter name="interventionNumber">#{execution.processBusinessKey}</camunda:inputParameter>
        </camunda:inputOutput>
        <camunda:in source="option" target="interventionNumber" local="true" />
        <camunda:in source="option" target="customerId" local="true" />
        <camunda:in source="option" target="interventionType" local="true" />
        <camunda:in source="option" target="contractId" local="true" />
        <camunda:in variables="all" />
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0rbzed5</bpmn:incoming>
      <bpmn:outgoing>Flow_000rdub</bpmn:outgoing>
    </bpmn:callActivity>
    <bpmn:sequenceFlow id="Flow_0rbzed5" sourceRef="Gateway_038fcb7" targetRef="Activity_1ilto4i" />
    <bpmn:sequenceFlow id="Flow_17wcwzq" sourceRef="Gateway_038fcb7" targetRef="IntermediateCatchEvent_15cxhb5" />
    <bpmn:endEvent id="Event_15hl812">
      <bpmn:incoming>Flow_000rdub</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_000rdub" sourceRef="Activity_1ilto4i" targetRef="Event_15hl812" />
    <bpmn:textAnnotation id="TextAnnotation_0acjmby">
      <bpmn:text>Ajout de commentaire lorsque le client est injoignable</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_10uvhvm" sourceRef="ServiceTask_1tjfruc" targetRef="TextAnnotation_0acjmby" />
    <bpmn:textAnnotation id="TextAnnotation_0272ow4">
      <bpmn:text>On ajout le sous-motif dans OpenCell</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1vonq75" sourceRef="ServiceTask_0o6rxdb" targetRef="TextAnnotation_0272ow4" />
    <bpmn:textAnnotation id="TextAnnotation_0ntyibg">
      <bpmn:text>Ajouter le numÃ©ro d'intervention en commentaire du ticket</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_023j7qd">
      <bpmn:text>On attend J+6 apres envoi Ã  teamTool Logistique</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0ds5it5" sourceRef="IntermediateCatchEvent_10caowb" targetRef="TextAnnotation_023j7qd" />
    <bpmn:textAnnotation id="TextAnnotation_1qg4uaj">
      <bpmn:text>Ajouter la description de la commande en commentaire</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0boij8u" sourceRef="Activity_0ukgode" targetRef="TextAnnotation_1qg4uaj" />
    <bpmn:textAnnotation id="TextAnnotation_019jx5y">
      <bpmn:text>On cloture le ticket</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_053nt5x" sourceRef="ServiceTask_0e82rwa" targetRef="TextAnnotation_019jx5y" />
    <bpmn:textAnnotation id="TextAnnotation_1jhfelz">
      <bpmn:text>VÃ©rifier si le CRC Ã  indiquer si l'intervention est gratuite ou pas. si depuis l'app mobile alors intervention payante par dÃ©faut</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_08gldok" sourceRef="Gateway_1x96nzg" targetRef="TextAnnotation_1jhfelz" />
    <bpmn:textAnnotation id="TextAnnotation_1cm711z">
      <bpmn:text>est ce avenant?</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1nf896m" sourceRef="Gateway_0vk16sw" targetRef="TextAnnotation_1cm711z" />
    <bpmn:textAnnotation id="TextAnnotation_0er2z2q">
      <bpmn:text>seller?</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1fynthr" sourceRef="Gateway_1l7woq8" targetRef="TextAnnotation_0er2z2q" />
    <bpmn:textAnnotation id="TextAnnotation_094rswu">
      <bpmn:text>seller?</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_17k10s8" sourceRef="Gateway_0ne1s4o" targetRef="TextAnnotation_094rswu" />
  </bpmn:process>
  <bpmn:message id="Message_04x214t" name="subscriptionToOptionsMessage" />
  <bpmn:message id="Message_0lcj4ha" name="optionInstallProcessReturn" />
  <bpmn:error id="Error_07m3rlu" name="Error_0bc3sbf" />
  <bpmn:message id="Message_14qexns" name="planifProcessReturn" />
  <bpmn:message id="Message_1cl09o5" name="optionLogisticProcessReturn" />
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="option">
      <bpmndi:BPMNShape id="StartEvent_0aj30ys_di" bpmnElement="StartEvent_1">
        <dc:Bounds x="152" y="851" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1rsj9xj_di" bpmnElement="ServiceTask_1rsj9xj">
        <dc:Bounds x="2111" y="311" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_091muom_di" bpmnElement="ServiceTask_091muom">
        <dc:Bounds x="2310" y="311" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0s8o9qw_di" bpmnElement="ExclusiveGateway_0s8o9qw" isMarkerVisible="true">
        <dc:Bounds x="2574" y="386" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2613" y="473" width="80" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_0haikm9_di" bpmnElement="EndEvent_0haikm9">
        <dc:Bounds x="4002" y="851" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0e82rwa_di" bpmnElement="ServiceTask_0e82rwa">
        <dc:Bounds x="3860" y="829" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0o6rxdb_di" bpmnElement="ServiceTask_0o6rxdb">
        <dc:Bounds x="3187" y="371" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1ddt8sv_di" bpmnElement="ServiceTask_1ddt8sv">
        <dc:Bounds x="3890" y="620" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="InclusiveGateway_1l195oe_di" bpmnElement="ExclusiveGateway_0dib119">
        <dc:Bounds x="1055" y="844" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1006" y="844" width="60" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="InclusiveGateway_1vnp14s_di" bpmnElement="InclusiveGateway_1vnp14s">
        <dc:Bounds x="3715" y="844" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3676" y="805" width="60" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0kfhnxf_di" bpmnElement="ServiceTask_0kfhnxf">
        <dc:Bounds x="1150" y="829" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_15xbvaj_di" bpmnElement="IntermediateThrowEvent_0604xxg">
        <dc:Bounds x="1952" y="851" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_00nvo5y_di" bpmnElement="ServiceTask_00nvo5y">
        <dc:Bounds x="2505" y="829" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0nczyzc_di" bpmnElement="ServiceTask_0nczyzc">
        <dc:Bounds x="2780" y="829" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1iq8up2_di" bpmnElement="ServiceTask_1iq8up2">
        <dc:Bounds x="2910" y="829" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="SubProcess_0mmrcxb_di" bpmnElement="SubProcess_0mmrcxb" isExpanded="true">
        <dc:Bounds x="1769" y="1496" width="833" height="300" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_0bf3iim_di" bpmnElement="UserTask_0bf3iim">
        <dc:Bounds x="2142" y="1556" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ScriptTask_19nyshb_di" bpmnElement="ScriptTask_19nyshb">
        <dc:Bounds x="2302" y="1556" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_1e2jido_di" bpmnElement="EndEvent_1e2jido">
        <dc:Bounds x="2464" y="1578" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="StartEvent_0i3ud0x_di" bpmnElement="StartEvent_0i3ud0x">
        <dc:Bounds x="1891" y="1578" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1xt5hlf_di" bpmnElement="ExclusiveGateway_1xt5hlf" isMarkerVisible="true">
        <dc:Bounds x="1984" y="1571" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0dohh4b_di" bpmnElement="ServiceTask_0dohh4b">
        <dc:Bounds x="2142" y="1671" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="SequenceFlow_0xwilxw_di" bpmnElement="SequenceFlow_0xwilxw">
        <di:waypoint x="2402" y="1596" />
        <di:waypoint x="2464" y="1596" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0e4k2j3_di" bpmnElement="SequenceFlow_0e4k2j3">
        <di:waypoint x="2242" y="1596" />
        <di:waypoint x="2302" y="1596" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0zlftus_di" bpmnElement="SequenceFlow_0zlftus">
        <di:waypoint x="1927" y="1596" />
        <di:waypoint x="1984" y="1596" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1waihu6_di" bpmnElement="SequenceFlow_1waihu6">
        <di:waypoint x="2034" y="1596" />
        <di:waypoint x="2142" y="1596" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_08d6zrk_di" bpmnElement="SequenceFlow_08d6zrk">
        <di:waypoint x="2242" y="1711" />
        <di:waypoint x="2352" y="1711" />
        <di:waypoint x="2352" y="1636" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1vm1bzx_di" bpmnElement="SequenceFlow_1vm1bzx">
        <di:waypoint x="2009" y="1621" />
        <di:waypoint x="2009" y="1711" />
        <di:waypoint x="2142" y="1711" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Activity_0jsxg0g_di" bpmnElement="Activity_0jsxg0g">
        <dc:Bounds x="880" y="829" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1ngiyzg_di" bpmnElement="ExclusiveGateway_1ngiyzg" isMarkerVisible="true">
        <dc:Bounds x="2392" y="844" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1s3gc2y_di" bpmnElement="ServiceTask_1s3gc2y">
        <dc:Bounds x="2446" y="311" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0kx4vis_di" bpmnElement="ServiceTask_0kx4vis">
        <dc:Bounds x="1450" y="1216" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_10caowb_di" bpmnElement="IntermediateCatchEvent_10caowb">
        <dc:Bounds x="2502" y="1238" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1te9qdi_di" bpmnElement="ServiceTask_1te9qdi">
        <dc:Bounds x="2740" y="1216" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1iz7sqs_di" bpmnElement="ServiceTask_1iz7sqs">
        <dc:Bounds x="2890" y="1216" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0o2ywp3_di" bpmnElement="ServiceTask_0o2ywp3">
        <dc:Bounds x="260" y="829" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_03ah09n_di" bpmnElement="Activity_14yi6lr">
        <dc:Bounds x="2940" y="371" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1tjfruc_di" bpmnElement="ServiceTask_1tjfruc">
        <dc:Bounds x="1510" y="680" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_15cxhb5_di" bpmnElement="IntermediateCatchEvent_15cxhb5">
        <dc:Bounds x="1432" y="851" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0jmnydo_di" bpmnElement="ExclusiveGateway_0jmnydo" isMarkerVisible="true">
        <dc:Bounds x="1535" y="844" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="InclusiveGateway_1vhy8xz_di" bpmnElement="InclusiveGateway_1vhy8xz">
        <dc:Bounds x="1685" y="844" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0nbu3nw_di" bpmnElement="ServiceTask_0nbu3nw">
        <dc:Bounds x="1910" y="701" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_00857lx_di" bpmnElement="UserTask_00857lx">
        <dc:Bounds x="1920" y="581" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1het873_di" bpmnElement="ExclusiveGateway_1het873" isMarkerVisible="true">
        <dc:Bounds x="1805" y="716" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1oa9byl_di" bpmnElement="ExclusiveGateway_1oa9byl" isMarkerVisible="true">
        <dc:Bounds x="2055" y="716" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_0rcyqtp_di" bpmnElement="EndEvent_0rcyqtp">
        <dc:Bounds x="2182" y="723" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_1gu2uk6_di" bpmnElement="UserTask_1gu2uk6">
        <dc:Bounds x="1660" y="581" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0ehxrzb_di" bpmnElement="ServiceTask_0ehxrzb">
        <dc:Bounds x="1660" y="701" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0iw37bo_di" bpmnElement="ServiceTask_0iw37bo">
        <dc:Bounds x="2367" y="1020" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0axjyuk_di" bpmnElement="ServiceTask_0axjyuk">
        <dc:Bounds x="3890" y="371" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1x96nzg_di" bpmnElement="Gateway_1x96nzg" isMarkerVisible="true">
        <dc:Bounds x="2635" y="844" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0yh1ley_di" bpmnElement="ExclusiveGateway_0yh1ley" isMarkerVisible="true">
        <dc:Bounds x="2235" y="844" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1xj7uvr" bpmnElement="Activity_0ukgode">
        <dc:Bounds x="550" y="829" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_17adip9" bpmnElement="Activity_1ganxxp">
        <dc:Bounds x="680" y="829" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_10zxbzl_di" bpmnElement="ServiceTask_10zxbzl">
        <dc:Bounds x="3580" y="829" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0z0c681_di" bpmnElement="Gateway_0z0c681" isMarkerVisible="true">
        <dc:Bounds x="1915" y="1231" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_05ad57x_di" bpmnElement="Activity_05ad57x">
        <dc:Bounds x="2070" y="1300" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_02cts4u_di" bpmnElement="Gateway_02cts4u" isMarkerVisible="true">
        <dc:Bounds x="2225" y="1231" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0uti306_di" bpmnElement="Activity_0uti306">
        <dc:Bounds x="3120" y="829" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0lfeino_di" bpmnElement="Activity_0lfeino">
        <dc:Bounds x="3250" y="829" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0vjanwt_di" bpmnElement="Activity_0vjanwt">
        <dc:Bounds x="3370" y="600" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0rm21wf_di" bpmnElement="Activity_0rm21wf">
        <dc:Bounds x="3510" y="600" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0vk16sw_di" bpmnElement="Gateway_0vk16sw">
        <dc:Bounds x="3395" y="844" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0johpjq_di" bpmnElement="Event_0johpjq">
        <dc:Bounds x="3662" y="622" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1dtxwlm_di" bpmnElement="Gateway_1dtxwlm" isMarkerVisible="true">
        <dc:Bounds x="1739" y="326" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1r13oyl" bpmnElement="Activity_1pe7ez0">
        <dc:Bounds x="2310" y="80" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_06iz6cb_di" bpmnElement="IntermediateThrowEvent_19b7ls6">
        <dc:Bounds x="3102" y="393" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_07xfvfe_di" bpmnElement="Event_1903ask">
        <dc:Bounds x="2673" y="393" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1rvgsbn" bpmnElement="Activity_05yb7io">
        <dc:Bounds x="2111" y="80" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_081d4j0_di" bpmnElement="IntermediateThrowEvent_1jo9oz2">
        <dc:Bounds x="1582" y="333" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0emg1im" bpmnElement="Activity_1wu8xuw">
        <dc:Bounds x="3170" y="1020" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0lldahu" bpmnElement="Activity_15iblqu">
        <dc:Bounds x="1910" y="940" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0sj3dhb" bpmnElement="Activity_1fndayi">
        <dc:Bounds x="1940" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1lkryr6" bpmnElement="Gateway_1lys6f0" isMarkerVisible="true">
        <dc:Bounds x="2095" y="844" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_08ecrjs_di" bpmnElement="EndEvent_08ecrjs">
        <dc:Bounds x="2722" y="723" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ScriptTask_0xsk721_di" bpmnElement="ScriptTask_0xsk721">
        <dc:Bounds x="2505" y="701" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0ne1s4o_di" bpmnElement="Gateway_0ne1s4o" isMarkerVisible="true" bioc:stroke="#6b3c00" bioc:fill="#ffe0b2" color:background-color="#ffe0b2" color:border-color="#6b3c00">
        <dc:Bounds x="1615" y="1231" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_02ez11e" bpmnElement="Gateway_1l7woq8" isMarkerVisible="true" bioc:stroke="#6b3c00" bioc:fill="#ffe0b2" color:background-color="#ffe0b2" color:border-color="#6b3c00">
        <dc:Bounds x="3025" y="844" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0cbe7nw" bpmnElement="Activity_19qbur9" bioc:stroke="#6b3c00" bioc:fill="#ffe0b2" color:background-color="#ffe0b2" color:border-color="#6b3c00">
        <dc:Bounds x="410" y="829" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1dvywbw_di" bpmnElement="Activity_0yt6ype">
        <dc:Bounds x="2340" y="1216" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0ljqqyc_di" bpmnElement="Activity_001701s">
        <dc:Bounds x="2340" y="1390" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1xtq4tk_di" bpmnElement="Gateway_038fcb7" bioc:stroke="#0d4372" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#0d4372">
        <dc:Bounds x="1295" y="844" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0tf235i" bpmnElement="Activity_1ilto4i" bioc:stroke="#0d4372" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#0d4372">
        <dc:Bounds x="1270" y="701" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_15hl812_di" bpmnElement="Event_15hl812">
        <dc:Bounds x="1412" y="652" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0acjmby_di" bpmnElement="TextAnnotation_0acjmby">
        <dc:Bounds x="1380" y="530" width="100" height="68" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0272ow4_di" bpmnElement="TextAnnotation_0272ow4">
        <dc:Bounds x="3287" y="291" width="100" height="55" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0ntyibg_di" bpmnElement="TextAnnotation_0ntyibg">
        <dc:Bounds x="700" y="1097" width="180" height="52" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_023j7qd_di" bpmnElement="TextAnnotation_023j7qd">
        <dc:Bounds x="2446" y="1129" width="100" height="64" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1qg4uaj_di" bpmnElement="TextAnnotation_1qg4uaj">
        <dc:Bounds x="510" y="732" width="140" height="55" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_019jx5y_di" bpmnElement="TextAnnotation_019jx5y">
        <dc:Bounds x="3910" y="780" width="120" height="27" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1jhfelz_di" bpmnElement="TextAnnotation_1jhfelz">
        <dc:Bounds x="2536" y="980" width="248" height="55" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1cm711z_di" bpmnElement="TextAnnotation_1cm711z">
        <dc:Bounds x="3420" y="910" width="100" height="38" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0er2z2q_di" bpmnElement="TextAnnotation_0er2z2q" bioc:stroke="#6b3c00" bioc:fill="#ffe0b2" color:background-color="#ffe0b2" color:border-color="#6b3c00">
        <dc:Bounds x="2990" y="790" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_094rswu_di" bpmnElement="TextAnnotation_094rswu" bioc:stroke="#6b3c00" bioc:fill="#ffe0b2" color:background-color="#ffe0b2" color:border-color="#6b3c00">
        <dc:Bounds x="1820" y="1150" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="SequenceFlow_1ss1f7o_di" bpmnElement="SequenceFlow_1ss1f7o">
        <di:waypoint x="188" y="869" />
        <di:waypoint x="260" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1ocpgem_di" bpmnElement="SequenceFlow_1ocpgem">
        <di:waypoint x="2211" y="351" />
        <di:waypoint x="2310" y="351" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_07dhm1g_di" bpmnElement="SequenceFlow_07dhm1g">
        <di:waypoint x="2410" y="351" />
        <di:waypoint x="2446" y="351" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1jg58k7_di" bpmnElement="SequenceFlow_1jg58k7">
        <di:waypoint x="1080" y="844" />
        <di:waypoint x="1080" y="351" />
        <di:waypoint x="1582" y="351" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1342" y="312" width="46" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0tdub7k_di" bpmnElement="SequenceFlow_0tdub7k">
        <di:waypoint x="2599" y="436" />
        <di:waypoint x="2599" y="500" />
        <di:waypoint x="3740" y="500" />
        <di:waypoint x="3740" y="844" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1msruwu_di" bpmnElement="SequenceFlow_1msruwu">
        <di:waypoint x="3960" y="869" />
        <di:waypoint x="4002" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1gdt02x_di" bpmnElement="SequenceFlow_1gdt02x">
        <di:waypoint x="3287" y="411" />
        <di:waypoint x="3890" y="411" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1go1pwb_di" bpmnElement="SequenceFlow_1go1pwb">
        <di:waypoint x="3940" y="700" />
        <di:waypoint x="3940" y="741" />
        <di:waypoint x="3740" y="741" />
        <di:waypoint x="3740" y="844" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0xms4zq_di" bpmnElement="SequenceFlow_0xms4zq">
        <di:waypoint x="1105" y="869" />
        <di:waypoint x="1150" y="869" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1084" y="917" width="74" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0mcftxs_di" bpmnElement="SequenceFlow_0mcftxs">
        <di:waypoint x="1080" y="894" />
        <di:waypoint x="1080" y="1256" />
        <di:waypoint x="1450" y="1256" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1213" y="1277" width="79" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0odaa77_di" bpmnElement="SequenceFlow_0odaa77">
        <di:waypoint x="3765" y="869" />
        <di:waypoint x="3860" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_08c5cml_di" bpmnElement="SequenceFlow_08c5cml">
        <di:waypoint x="1250" y="869" />
        <di:waypoint x="1295" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1tc761p_di" bpmnElement="SequenceFlow_1tc761p">
        <di:waypoint x="2605" y="869" />
        <di:waypoint x="2635" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1h9zj4s_di" bpmnElement="SequenceFlow_1h9zj4s">
        <di:waypoint x="2880" y="869" />
        <di:waypoint x="2910" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_07jftby_di" bpmnElement="SequenceFlow_07jftby">
        <di:waypoint x="3010" y="869" />
        <di:waypoint x="3025" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_16sgjm5_di" bpmnElement="Flow_16sgjm5">
        <di:waypoint x="980" y="869" />
        <di:waypoint x="1055" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_14h8ih3_di" bpmnElement="SequenceFlow_14h8ih3">
        <di:waypoint x="2442" y="869" />
        <di:waypoint x="2505" y="869" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2440" y="834" width="58" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1itnrin_di" bpmnElement="SequenceFlow_1itnrin">
        <di:waypoint x="2546" y="351" />
        <di:waypoint x="2599" y="351" />
        <di:waypoint x="2599" y="386" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_08d483e_di" bpmnElement="SequenceFlow_08d483e">
        <di:waypoint x="2624" y="411" />
        <di:waypoint x="2673" y="411" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2632" y="363" width="83" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1tnoqta_di" bpmnElement="Flow_1tnoqta">
        <di:waypoint x="3040" y="411" />
        <di:waypoint x="3102" y="411" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0usl7wi_di" bpmnElement="SequenceFlow_0usl7wi">
        <di:waypoint x="1468" y="869" />
        <di:waypoint x="1535" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1w212od_di" bpmnElement="SequenceFlow_1w212od">
        <di:waypoint x="1855" y="741" />
        <di:waypoint x="1910" y="741" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0pabsj8_di" bpmnElement="SequenceFlow_0pabsj8">
        <di:waypoint x="1960" y="661" />
        <di:waypoint x="1960" y="701" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0y3i9z1_di" bpmnElement="SequenceFlow_0y3i9z1">
        <di:waypoint x="2010" y="741" />
        <di:waypoint x="2055" y="741" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1viafdq_di" bpmnElement="SequenceFlow_1viafdq">
        <di:waypoint x="2080" y="716" />
        <di:waypoint x="2080" y="621" />
        <di:waypoint x="2020" y="621" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0nkx8wt_di" bpmnElement="SequenceFlow_0nkx8wt">
        <di:waypoint x="2105" y="741" />
        <di:waypoint x="2182" y="741" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_06t1jmk_di" bpmnElement="SequenceFlow_06t1jmk">
        <di:waypoint x="1760" y="741" />
        <di:waypoint x="1805" y="741" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_026w8ds_di" bpmnElement="SequenceFlow_026w8ds">
        <di:waypoint x="1830" y="716" />
        <di:waypoint x="1830" y="621" />
        <di:waypoint x="1760" y="621" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_05bp391_di" bpmnElement="SequenceFlow_05bp391">
        <di:waypoint x="1710" y="661" />
        <di:waypoint x="1710" y="701" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0hd0ruz_di" bpmnElement="SequenceFlow_0hd0ruz">
        <di:waypoint x="1710" y="844" />
        <di:waypoint x="1710" y="781" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1j7jg2a_di" bpmnElement="SequenceFlow_1j7jg2a">
        <di:waypoint x="1560" y="844" />
        <di:waypoint x="1560" y="760" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1528" y="809" width="63" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0f5w48k_di" bpmnElement="SequenceFlow_0f5w48k">
        <di:waypoint x="1510" y="720" />
        <di:waypoint x="1450" y="720" />
        <di:waypoint x="1450" y="851" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_09a1qr8_di" bpmnElement="SequenceFlow_09a1qr8">
        <di:waypoint x="2120" y="894" />
        <di:waypoint x="2120" y="980" />
        <di:waypoint x="2010" y="980" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2043" y="946" width="62" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0iv0l5q_di" bpmnElement="SequenceFlow_0iv0l5q">
        <di:waypoint x="1560" y="894" />
        <di:waypoint x="1560" y="1060" />
        <di:waypoint x="2367" y="1060" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1561" y="899" width="58" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_07gz8m2_di" bpmnElement="SequenceFlow_07gz8m2">
        <di:waypoint x="1585" y="869" />
        <di:waypoint x="1685" y="869" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1586" y="834" width="58" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0ai54j5_di" bpmnElement="SequenceFlow_0ai54j5">
        <di:waypoint x="1735" y="869" />
        <di:waypoint x="1952" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0cp7bzi_di" bpmnElement="SequenceFlow_0cp7bzi">
        <di:waypoint x="2467" y="1060" />
        <di:waypoint x="3170" y="1060" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1k6dvtr_di" bpmnElement="SequenceFlow_1k6dvtr">
        <di:waypoint x="3940" y="451" />
        <di:waypoint x="3940" y="620" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_11f4rxe_di" bpmnElement="Flow_11f4rxe">
        <di:waypoint x="2660" y="894" />
        <di:waypoint x="2660" y="960" />
        <di:waypoint x="2930" y="960" />
        <di:waypoint x="2930" y="909" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2740" y="916" width="76" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1jbps7x_di" bpmnElement="Flow_1jbps7x">
        <di:waypoint x="2685" y="869" />
        <di:waypoint x="2780" y="869" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2711" y="809" width="76" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0h2xene_di" bpmnElement="Flow_0h2xene">
        <di:waypoint x="1550" y="1256" />
        <di:waypoint x="1615" y="1256" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0dpa2b5_di" bpmnElement="SequenceFlow_0dpa2b5">
        <di:waypoint x="2285" y="869" />
        <di:waypoint x="2392" y="869" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2288" y="837" width="83" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1lg1t9y_di" bpmnElement="SequenceFlow_1lg1t9y">
        <di:waypoint x="2260" y="844" />
        <di:waypoint x="2260" y="670" />
        <di:waypoint x="2950" y="670" />
        <di:waypoint x="2950" y="829" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2307" y="637" width="80" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_11vs6fq_di" bpmnElement="Flow_11vs6fq">
        <di:waypoint x="650" y="869" />
        <di:waypoint x="680" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0fo1naw_di" bpmnElement="Flow_0fo1naw">
        <di:waypoint x="3680" y="869" />
        <di:waypoint x="3715" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ecm81q_di" bpmnElement="Flow_0ecm81q">
        <di:waypoint x="1940" y="1281" />
        <di:waypoint x="1940" y="1340" />
        <di:waypoint x="2070" y="1340" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1982" y="1310" width="74" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1c6hcd7_di" bpmnElement="Flow_1c6hcd7">
        <di:waypoint x="2170" y="1340" />
        <di:waypoint x="2250" y="1340" />
        <di:waypoint x="2250" y="1281" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1j1dksf_di" bpmnElement="Flow_1j1dksf">
        <di:waypoint x="2275" y="1256" />
        <di:waypoint x="2340" y="1256" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0tr0lk9_di" bpmnElement="Flow_0tr0lk9">
        <di:waypoint x="360" y="869" />
        <di:waypoint x="410" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0zg1se4_di" bpmnElement="Flow_0zg1se4">
        <di:waypoint x="3220" y="869" />
        <di:waypoint x="3250" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_01b56bb_di" bpmnElement="Flow_01b56bb">
        <di:waypoint x="3350" y="869" />
        <di:waypoint x="3395" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0l1wn25_di" bpmnElement="Flow_0l1wn25">
        <di:waypoint x="3420" y="844" />
        <di:waypoint x="3420" y="680" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3397" y="793" width="15" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1tk56iu_di" bpmnElement="Flow_1tk56iu">
        <di:waypoint x="3470" y="640" />
        <di:waypoint x="3510" y="640" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ikhqh6_di" bpmnElement="Flow_0ikhqh6">
        <di:waypoint x="3445" y="869" />
        <di:waypoint x="3580" y="869" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3503" y="851" width="19" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1gub7is_di" bpmnElement="Flow_1gub7is">
        <di:waypoint x="3610" y="640" />
        <di:waypoint x="3662" y="640" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0ony3hz_di" bpmnElement="SequenceFlow_0ony3hz">
        <di:waypoint x="2840" y="1256" />
        <di:waypoint x="2890" y="1256" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0jo2tv3_di" bpmnElement="SequenceFlow_0jo2tv3">
        <di:waypoint x="2990" y="1256" />
        <di:waypoint x="3740" y="1256" />
        <di:waypoint x="3740" y="894" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0y8g4p3_di" bpmnElement="Flow_0y8g4p3">
        <di:waypoint x="1965" y="1256" />
        <di:waypoint x="2225" y="1256" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0dx7ha3_di" bpmnElement="Flow_0dx7ha3">
        <di:waypoint x="2538" y="1256" />
        <di:waypoint x="2740" y="1256" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1z0s6za_di" bpmnElement="Flow_1z0s6za">
        <di:waypoint x="1789" y="351" />
        <di:waypoint x="2111" y="351" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1919" y="333" width="63" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0271hg9_di" bpmnElement="Flow_0271hg9">
        <di:waypoint x="1764" y="326" />
        <di:waypoint x="1764" y="120" />
        <di:waypoint x="1940" y="120" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1768" y="221" width="24" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0cqqqmy_di" bpmnElement="Flow_0cqqqmy">
        <di:waypoint x="780" y="869" />
        <di:waypoint x="880" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_05jsdji_di" bpmnElement="Flow_05jsdji">
        <di:waypoint x="2410" y="120" />
        <di:waypoint x="3940" y="120" />
        <di:waypoint x="3940" y="371" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0wkac3r_di" bpmnElement="SequenceFlow_0wkac3r">
        <di:waypoint x="3138" y="411" />
        <di:waypoint x="3187" y="411" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1f6cpex_di" bpmnElement="Flow_1f6cpex">
        <di:waypoint x="2709" y="411" />
        <di:waypoint x="2940" y="411" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1ddycdv_di" bpmnElement="Flow_1ddycdv">
        <di:waypoint x="2211" y="120" />
        <di:waypoint x="2310" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_12fac8q_di" bpmnElement="SequenceFlow_12fac8q">
        <di:waypoint x="1618" y="351" />
        <di:waypoint x="1739" y="351" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_033cjnj_di" bpmnElement="Flow_033cjnj">
        <di:waypoint x="1988" y="869" />
        <di:waypoint x="2095" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1ho9q1r_di" bpmnElement="Flow_1ho9q1r">
        <di:waypoint x="3270" y="1060" />
        <di:waypoint x="3740" y="1060" />
        <di:waypoint x="3740" y="894" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_09wejo3_di" bpmnElement="SequenceFlow_09wejo3">
        <di:waypoint x="2120" y="894" />
        <di:waypoint x="2120" y="980" />
        <di:waypoint x="2417" y="980" />
        <di:waypoint x="2417" y="1020" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2132" y="946" width="58" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1708w73_di" bpmnElement="Flow_1708w73">
        <di:waypoint x="1910" y="980" />
        <di:waypoint x="1450" y="980" />
        <di:waypoint x="1450" y="887" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0fcryoo_di" bpmnElement="Flow_0fcryoo">
        <di:waypoint x="2040" y="120" />
        <di:waypoint x="2111" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1lkthlc_di" bpmnElement="Flow_1lkthlc">
        <di:waypoint x="2145" y="869" />
        <di:waypoint x="2235" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0kfj7z1_di" bpmnElement="SequenceFlow_0kfj7z1">
        <di:waypoint x="2605" y="741" />
        <di:waypoint x="2722" y="741" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0kiz9q8_di" bpmnElement="Flow_0kiz9q8">
        <di:waypoint x="2417" y="844" />
        <di:waypoint x="2417" y="741" />
        <di:waypoint x="2505" y="741" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1onx0gq_di" bpmnElement="Flow_1onx0gq" bioc:stroke="#6b3c00" color:border-color="#6b3c00">
        <di:waypoint x="1665" y="1256" />
        <di:waypoint x="1915" y="1256" />
        <bpmndi:BPMNLabel color:color="#6b3c00">
          <dc:Bounds x="1746" y="1216" width="49" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1gufyu3_di" bpmnElement="Flow_1gufyu3">
        <di:waypoint x="3075" y="869" />
        <di:waypoint x="3120" y="869" />
        <bpmndi:BPMNLabel color:color="#6b3c00">
          <dc:Bounds x="3065" y="826" width="49" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1emlqh9_di" bpmnElement="Flow_1emlqh9">
        <di:waypoint x="1640" y="1281" />
        <di:waypoint x="1640" y="1430" />
        <di:waypoint x="2340" y="1430" />
        <bpmndi:BPMNLabel color:color="#6b3c00">
          <dc:Bounds x="1653" y="1310" width="65" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1hd3r1z_di" bpmnElement="Flow_1hd3r1z" bioc:stroke="#6b3c00" color:border-color="#6b3c00">
        <di:waypoint x="3050" y="894" />
        <di:waypoint x="3050" y="980" />
        <di:waypoint x="3630" y="980" />
        <di:waypoint x="3630" y="909" />
        <bpmndi:BPMNLabel color:color="#6b3c00">
          <dc:Bounds x="3057" y="915" width="65" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ouc0rs_di" bpmnElement="Flow_0ouc0rs">
        <di:waypoint x="510" y="869" />
        <di:waypoint x="550" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1jx7a1s_di" bpmnElement="Flow_1jx7a1s">
        <di:waypoint x="2440" y="1256" />
        <di:waypoint x="2502" y="1256" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0o5rx30_di" bpmnElement="Flow_0o5rx30">
        <di:waypoint x="2440" y="1430" />
        <di:waypoint x="2520" y="1430" />
        <di:waypoint x="2520" y="1274" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0rbzed5_di" bpmnElement="Flow_0rbzed5">
        <di:waypoint x="1320" y="844" />
        <di:waypoint x="1320" y="781" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_17wcwzq_di" bpmnElement="Flow_17wcwzq">
        <di:waypoint x="1345" y="869" />
        <di:waypoint x="1432" y="869" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_000rdub_di" bpmnElement="Flow_000rdub">
        <di:waypoint x="1320" y="701" />
        <di:waypoint x="1320" y="670" />
        <di:waypoint x="1412" y="670" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_10uvhvm_di" bpmnElement="Association_10uvhvm">
        <di:waypoint x="1527" y="680" />
        <di:waypoint x="1458" y="598" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1vonq75_di" bpmnElement="Association_1vonq75">
        <di:waypoint x="3279" y="372" />
        <di:waypoint x="3307" y="346" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0ds5it5_di" bpmnElement="Association_0ds5it5">
        <di:waypoint x="2518" y="1238" />
        <di:waypoint x="2511" y="1193" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0boij8u_di" bpmnElement="Association_0boij8u">
        <di:waypoint x="585" y="829" />
        <di:waypoint x="570" y="787" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_053nt5x_di" bpmnElement="Association_053nt5x">
        <di:waypoint x="3936" y="829" />
        <di:waypoint x="3950" y="807" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_08gldok_di" bpmnElement="Association_08gldok">
        <di:waypoint x="2652" y="886" />
        <di:waypoint x="2599" y="980" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1nf896m_di" bpmnElement="Association_1nf896m">
        <di:waypoint x="3434" y="880" />
        <di:waypoint x="3444" y="910" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1fynthr_di" bpmnElement="Association_1fynthr">
        <di:waypoint x="3047" y="847" />
        <di:waypoint x="3042" y="820" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_17k10s8_di" bpmnElement="Association_17k10s8">
        <di:waypoint x="1658" y="1249" />
        <di:waypoint x="1832" y="1180" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
