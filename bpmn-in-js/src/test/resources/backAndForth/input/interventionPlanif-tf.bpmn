<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" id="Definitions_1bd55qg" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="5.25.0">
  <bpmn:process id="interventionPlannif" isExecutable="true">
    <bpmn:startEvent id="startInterventionPlannifProcess">
      <bpmn:outgoing>Flow_0geoeu7</bpmn:outgoing>
      <bpmn:messageEventDefinition id="MessageEventDefinition_132vp1a" messageRef="Message_1hw2n7j" />
    </bpmn:startEvent>
    <bpmn:serviceTask id="Activity_00e1wv8" name="get keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/auth/realms/'+execution.getVariable('realm')+'/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0geoeu7</bpmn:incoming>
      <bpmn:outgoing>Flow_1l5zml1</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0geoeu7" sourceRef="startInterventionPlannifProcess" targetRef="Activity_00e1wv8" />
    <bpmn:sequenceFlow id="Flow_1l5zml1" sourceRef="Activity_00e1wv8" targetRef="Activity_1i8xgpl" />
    <bpmn:serviceTask id="Activity_1i8xgpl" name="check if customer exists by client_code">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_customer');
var customer = JSON.parse(execution.getVariable('customer'));
var customerCode = customer.code;
url_tb+'/api/v1/customer/'+customerCode+'/existing/check'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">GET</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">var resp = connector.getVariable('response')
print('resp check if customer exists by client_code: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

response = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('customerExist',response);


var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1l5zml1</bpmn:incoming>
      <bpmn:outgoing>Flow_026pi9q</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="Gateway_06l9nsa">
      <bpmn:incoming>Flow_026pi9q</bpmn:incoming>
      <bpmn:outgoing>Flow_0xg002s</bpmn:outgoing>
      <bpmn:outgoing>Flow_1eflnju</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_026pi9q" sourceRef="Activity_1i8xgpl" targetRef="Gateway_06l9nsa" />
    <bpmn:sequenceFlow id="Flow_0xg002s" name="Oui" sourceRef="Gateway_06l9nsa" targetRef="Activity_04y3ldk">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${customerExist}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1eflnju" name="Non" sourceRef="Gateway_06l9nsa" targetRef="Activity_17mujf3">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!customerExist}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_04y3ldk" name="update customer">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_customer');
url_tb+'/api/v1/customer/update';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('customer')</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('update customer api');
var resp = connector.getVariable('response')
print('update customer: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
execution.setVariable('customer', resp);

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0xg002s</bpmn:incoming>
      <bpmn:outgoing>Flow_029sr1c</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_17mujf3" name="check if customer exists by (nom, prénom email,companyName)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_customer');
var customer = JSON.parse(execution.getVariable('customer'));
var firstName = customer.firstName;
var lastName = customer.lastName;
var email = customer.email;
var encodedFirstName = encodeURIComponent(customer.firstName);
var encodedLastName = encodeURIComponent(customer.lastName);
var encodedEmail = encodeURIComponent(customer.email);
if((customer.customerCategoryCode+ '').toUpperCase() === 'CLIENT_PRO'){
    var encodedCompanyName = encodeURIComponent(customer.companyName);
    url_tb+'/api/v1/customer/firstName/'+encodedFirstName+'/lastName/'+encodedLastName+'/email/'+encodedEmail+'?companyName='+encodedCompanyName+'&amp;isPro=true'
} else {
    url_tb+'/api/v1/customer/firstName/'+encodedFirstName+'/lastName/'+encodedLastName+'/email/'+encodedEmail
}</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">GET</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">var resp = connector.getVariable('response')
print('resp get customer by (nom, prénom email): ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);
var execution = connector.getParentVariableScope();
response = JSON.parse(connector.getVariable('response'));

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');
	execution.setVariable('customerByNomPrenomEmailExist', true);
	execution.setVariable('customerCodeByNomPrenomEmail',response.code);
} 
else {
	execution.setVariable('customerByNomPrenomEmailExist',false);
	execution.setVariable('customerCodeByNomPrenomEmail','');
}
</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1eflnju</bpmn:incoming>
      <bpmn:outgoing>Flow_1f9so60</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="Gateway_0p1j3ba">
      <bpmn:extensionElements />
      <bpmn:incoming>Flow_1f9so60</bpmn:incoming>
      <bpmn:outgoing>Flow_0xzh5v1</bpmn:outgoing>
      <bpmn:outgoing>Flow_0qnbpd4</bpmn:outgoing>
      <bpmn:outgoing>Flow_1rng90h</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1f9so60" sourceRef="Activity_17mujf3" targetRef="Gateway_0p1j3ba" />
    <bpmn:serviceTask id="Activity_0xvujl3" name="migrate customer from V1 to V2">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_customer');
url_tb+'/api/v1/customer/migrate';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('customer')</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('migrate customer from V1 to V2 api');
var resp = connector.getVariable('response')
print('update customer: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
execution.setVariable('customer', resp);

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0xzh5v1</bpmn:incoming>
      <bpmn:outgoing>Flow_1nopyze</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_094b4za" name="create customer">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_customer');
url_tb+'/api/v1/customer/create';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('customer')</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('create customer api');
var resp = connector.getVariable('response')
print('create customer: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
execution.setVariable('customer', resp);

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0qnbpd4</bpmn:incoming>
      <bpmn:outgoing>Flow_062ulpp</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0xzh5v1" name="Oui + ClientCode vide" sourceRef="Gateway_0p1j3ba" targetRef="Activity_0xvujl3">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">!customerCodeByNomPrenomEmail &amp;&amp; customerByNomPrenomEmailExist</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0qnbpd4" name="Non" sourceRef="Gateway_0p1j3ba" targetRef="Activity_094b4za">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!customerByNomPrenomEmailExist}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_0bjbpkc" name="check if contract exists">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_contract');
var contract = JSON.parse(execution.getVariable('contract'));
var code = contract.clientContractNumber;
url_tb+'/api/v1/contract?code=' + code;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">GET</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">var resp = connector.getVariable('response')
print('resp check if contract exists: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

response = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();

if (respStatusCode == 200) {
	execution.setVariable('contract',resp);
	execution.setVariable('contractExist',true);
} else {
	execution.setVariable('contractExist',false);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1ceqxak</bpmn:incoming>
      <bpmn:outgoing>Flow_08coukg</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_08coukg" sourceRef="Activity_0bjbpkc" targetRef="Gateway_07uk4ov" />
    <bpmn:exclusiveGateway id="Gateway_07uk4ov">
      <bpmn:incoming>Flow_08coukg</bpmn:incoming>
      <bpmn:outgoing>Flow_1vlbr47</bpmn:outgoing>
      <bpmn:outgoing>Flow_0las36h</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1vlbr47" name="Non" sourceRef="Gateway_07uk4ov" targetRef="Activity_0ur0ds1">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!contractExist}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_0ur0ds1" name="create contract">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">print('create contract: prepare host');

var url_tb= execution.getVariable('url_op_contract');
url_tb+'/api/v1/contract/save';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">print('create contract: prepare request body');
var contract = JSON.parse(execution.getVariable('contract'));
var customer = JSON.parse(execution.getVariable('customer'));
contract.clientId = customer.id;
execution.setVariable('contract', JSON.stringify(contract));
print('request body'+ JSON.stringify(contract));
JSON.stringify(contract);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('create contract api');
var resp = connector.getVariable('response')
print('create contract: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

execution.setVariable('contract', resp);

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1vlbr47</bpmn:incoming>
      <bpmn:outgoing>Flow_0jql50u</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:subProcess id="Activity_1k5weqx" triggeredByEvent="true">
      <bpmn:startEvent id="Event_0ojpmfh">
        <bpmn:outgoing>Flow_1h3nzpr</bpmn:outgoing>
        <bpmn:errorEventDefinition id="ErrorEventDefinition_0y3rvsf" errorRef="Error_1870c31" camunda:errorMessageVariable="errorTaskId" />
      </bpmn:startEvent>
      <bpmn:userTask id="Activity_0dz9j3o" name="Review Task">
        <bpmn:incoming>Flow_0hlgul9</bpmn:incoming>
        <bpmn:outgoing>Flow_0v8co1n</bpmn:outgoing>
      </bpmn:userTask>
      <bpmn:endEvent id="Event_1m1enul">
        <bpmn:incoming>Flow_1oc5gyu</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:scriptTask id="Activity_0rnhgxt" name="Return to Last Task" camunda:asyncBefore="true" scriptFormat="JavaScript">
        <bpmn:incoming>Flow_0v8co1n</bpmn:incoming>
        <bpmn:incoming>Flow_0axft79</bpmn:incoming>
        <bpmn:outgoing>Flow_1oc5gyu</bpmn:outgoing>
        <bpmn:script>print('Return to flow is Running');
var errorTaskId = execution.getVariable('errorTaskId');
if(errorTaskId == null){
print('No where to go back to');
}else{          execution.getProcessEngineServices().
getRuntimeService().createProcessInstanceModification(execution.getProcessInstanceId()).startBeforeActivity(errorTaskId).
execute();
}</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:exclusiveGateway id="Gateway_1o9jdhq">
        <bpmn:incoming>Flow_1h3nzpr</bpmn:incoming>
        <bpmn:outgoing>Flow_0hlgul9</bpmn:outgoing>
        <bpmn:outgoing>Flow_1npvnq6</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:serviceTask id="Activity_0e91049" name="Refresh Token">
        <bpmn:extensionElements>
          <camunda:connector>
            <camunda:inputOutput>
              <camunda:inputParameter name="url">
                <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/auth/realms/'+execution.getVariable('realm')+'/protocol/openid-connect/token'</camunda:script>
              </camunda:inputParameter>
              <camunda:inputParameter name="method">POST</camunda:inputParameter>
              <camunda:inputParameter name="headers">
                <camunda:map>
                  <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                  <camunda:entry key="Accept">application/json</camunda:entry>
                  <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
                </camunda:map>
              </camunda:inputParameter>
              <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
              <camunda:outputParameter name="Output_1b9kukr">
                <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
              </camunda:outputParameter>
            </camunda:inputOutput>
            <camunda:connectorId>http-connector</camunda:connectorId>
          </camunda:connector>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_1npvnq6</bpmn:incoming>
        <bpmn:outgoing>Flow_0axft79</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_1h3nzpr" sourceRef="Event_0ojpmfh" targetRef="Gateway_1o9jdhq" />
      <bpmn:sequenceFlow id="Flow_0v8co1n" sourceRef="Activity_0dz9j3o" targetRef="Activity_0rnhgxt" />
      <bpmn:sequenceFlow id="Flow_1oc5gyu" sourceRef="Activity_0rnhgxt" targetRef="Event_1m1enul" />
      <bpmn:sequenceFlow id="Flow_0hlgul9" sourceRef="Gateway_1o9jdhq" targetRef="Activity_0dz9j3o">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode != 401 &amp;&amp; httpCode != 302 }</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_1npvnq6" sourceRef="Gateway_1o9jdhq" targetRef="Activity_0e91049">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode == 401 || httpCode == 302 }</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_0axft79" sourceRef="Activity_0e91049" targetRef="Activity_0rnhgxt" />
    </bpmn:subProcess>
    <bpmn:serviceTask id="Activity_0oqxrvm" name="validate address">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_contract');
url_tb+'/api/v1/address/validate';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('address')</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('validate address api');
var resp = connector.getVariable('response')
print('validate address: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var contract = JSON.parse(execution.getVariable('contract'));
var address = JSON.parse(execution.getVariable('address'));

if (respStatusCode == 200) {
   contract.address = JSON.parse(resp);
   execution.setVariable('contract', JSON.stringify(contract));
}
if (respStatusCode == 404) {
   contract.address = address;
   execution.setVariable('contract', JSON.stringify(contract));
}

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204 || respStatusCode == 404) {
   print('no error');

}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_029sr1c</bpmn:incoming>
      <bpmn:incoming>Flow_1nopyze</bpmn:incoming>
      <bpmn:incoming>Flow_062ulpp</bpmn:incoming>
      <bpmn:incoming>Flow_02xowgn</bpmn:incoming>
      <bpmn:outgoing>Flow_1ceqxak</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1ceqxak" sourceRef="Activity_0oqxrvm" targetRef="Activity_0bjbpkc" />
    <bpmn:sequenceFlow id="Flow_029sr1c" sourceRef="Activity_04y3ldk" targetRef="Activity_0oqxrvm" />
    <bpmn:sequenceFlow id="Flow_1nopyze" sourceRef="Activity_0xvujl3" targetRef="Activity_0oqxrvm" />
    <bpmn:sequenceFlow id="Flow_062ulpp" sourceRef="Activity_094b4za" targetRef="Activity_0oqxrvm" />
    <bpmn:exclusiveGateway id="Gateway_0njydw4" name="With appointmentId ?">
      <bpmn:incoming>Flow_0jql50u</bpmn:incoming>
      <bpmn:incoming>Flow_1icsnea</bpmn:incoming>
      <bpmn:outgoing>Flow_0zw4bdv</bpmn:outgoing>
      <bpmn:outgoing>Flow_1d1blw6</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_0las36h" name="Oui" sourceRef="Gateway_07uk4ov" targetRef="Activity_1m3d5mw">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${contractExist}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0zw4bdv" name="Non" sourceRef="Gateway_0njydw4" targetRef="Activity_0tgyz32">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!isWithAppointment}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0jql50u" sourceRef="Activity_0ur0ds1" targetRef="Gateway_0njydw4" />
    <bpmn:serviceTask id="Activity_0tgyz32" name="create intevention (A planifier)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
url_tb+'/api/v1/intervention/create';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var contract = JSON.parse(execution.getVariable('contract'));
var requestBody = "{\"interventionType\":{\"interventionTypeId\":131, \"interventionTypeLabel\":\"SS\"},\"interventionEventStatus\":{\"interventionEventStatusCode\":\"APL\"}}";
requestBody = JSON.parse(requestBody);
requestBody.channel = execution.getVariable('channel');
requestBody.interventionNumber = execution.getVariable('interventionNumber');
requestBody.contractDetails = JSON.parse(execution.getVariable('contract'));
requestBody.address = JSON.parse(execution.getVariable('address'));
print(JSON.stringify(requestBody));
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('create intevention (A planifier) api');
var resp = connector.getVariable('response')
print('create intevention (A planifier): ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response);
    execution.setVariable('eventTypeOnReception', 'RCP')
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0zw4bdv</bpmn:incoming>
      <bpmn:outgoing>Flow_1grhm80</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1f0t3ss" name="get intervention">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
url_tb+'/api/v1/intervention/'+execution.getVariable('appointmentId');</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">GET</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('get intervention api');
var resp = connector.getVariable('response')
print('get intervention: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

execution.setVariable('intervention', resp);

var intervention = JSON.parse(resp);
var fakeAddress = intervention?.contractDetails?.address;
var realAddress = JSON.parse(execution.getVariable('contract'))?.address;

if (respStatusCode == '200' 
    &amp;&amp; intervention.interventionType.interventionTypeLabel == 'CR' 
    &amp;&amp; intervention.interventionEventStatus.interventionEventStatusCode == 'RES' 
    &amp;&amp; ((!intervention.isCanceled) || (intervention.isCanceled == false))
	&amp;&amp; (fakeAddress &amp;&amp; fakeAddress.postalCode == realAddress.postalCode))
{
    execution.setVariable('isInterventionReserved', true);
} else {
    execution.setVariable('isInterventionReserved', false);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1d1blw6</bpmn:incoming>
      <bpmn:outgoing>Flow_1yj4u9y</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1d1blw6" name="Oui" sourceRef="Gateway_0njydw4" targetRef="Activity_1f0t3ss">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isWithAppointment}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="Gateway_0t703ja" name="if intervention_type = &#39;CR&#39; and status = &#39;RES&#39; and isCanceled false and has same postalCode">
      <bpmn:incoming>Flow_1yj4u9y</bpmn:incoming>
      <bpmn:outgoing>Flow_1n14pzb</bpmn:outgoing>
      <bpmn:outgoing>Flow_0yfpn5h</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1yj4u9y" sourceRef="Activity_1f0t3ss" targetRef="Gateway_0t703ja" />
    <bpmn:serviceTask id="Activity_0euxk00" name="create intevention (with comments)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
url_tb+'/api/v1/intervention/create';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var contract = JSON.parse(execution.getVariable('contract'));
var requestBody = "{\"interventionType\":{\"interventionTypeId\":131, \"interventionTypeLabel\":\"SS\"},\"interventionEventStatus\":{\"interventionEventStatusCode\":\"APL\"}}";
requestBody = JSON.parse(requestBody);
requestBody.contractDetails = JSON.parse(execution.getVariable('contract'));
requestBody.address = JSON.parse(execution.getVariable('address'));
requestBody.channel = execution.getVariable('channel');
requestBody.interventionNumber = execution.getVariable('interventionNumber');
var appointmentId = execution.getVariable('appointmentId');
requestBody.integrationComment = appointmentId + 'KO';
requestBody.planificationComment = 'CRENEAU PRDV : ' + appointmentId.substring(0, 4) + '-' + appointmentId.substring(4, 6) + '-' + appointmentId.substring(6, 8) + ' - ' + appointmentId.substring(8, 10) + 'h-' +  appointmentId.substring(10, 12) + 'h';
print(JSON.stringify(requestBody));
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('create intevention (with comments) api');
var resp = connector.getVariable('response')
print('create intevention (with comments): ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
    execution.setVariable('eventTypeOnReception', 'RCP')
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1n14pzb</bpmn:incoming>
      <bpmn:outgoing>Flow_0vbelef</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1n14pzb" name="Non" sourceRef="Gateway_0t703ja" targetRef="Activity_0euxk00">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isInterventionReserved == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0yfpn5h" name="Oui" sourceRef="Gateway_0t703ja" targetRef="Gateway_1xrmbk2">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isInterventionReserved == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0vbelef" sourceRef="Activity_0euxk00" targetRef="Activity_0ylikva" />
    <bpmn:serviceTask id="Activity_1m3d5mw" name="get interventions by contract and status not in (CLO,INT,TER)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
var contract = JSON.parse(execution.getVariable('contract'));
var code = contract.clientContractNumber;
url_tb+'/api/v1/intervention/exists/bystatuses/'+code</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">GET</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">var resp = connector.getVariable('response')
print('get interventions by contract and status not in (CLO,INT,TER): ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

response = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('isInterventionNotCloExist',response);


var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0las36h</bpmn:incoming>
      <bpmn:outgoing>Flow_1yg202c</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1yg202c" sourceRef="Activity_1m3d5mw" targetRef="Gateway_03m7l78" />
    <bpmn:exclusiveGateway id="Gateway_03m7l78">
      <bpmn:incoming>Flow_1yg202c</bpmn:incoming>
      <bpmn:outgoing>Flow_1icsnea</bpmn:outgoing>
      <bpmn:outgoing>Flow_07jomtf</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1icsnea" name="Non" sourceRef="Gateway_03m7l78" targetRef="Gateway_0njydw4">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isInterventionNotCloExist == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:scriptTask id="Activity_08div8g" name="log error" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_07jomtf</bpmn:incoming>
      <bpmn:outgoing>Flow_0gyb43s</bpmn:outgoing>
      <bpmn:script>print('Contrat existe déjà avec une intervention non clôturée');</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_07jomtf" name="Oui" sourceRef="Gateway_03m7l78" targetRef="Activity_08div8g">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isInterventionNotCloExist == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:endEvent id="Event_1kmarlw">
      <bpmn:incoming>Flow_0gyb43s</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_0gyb43s" sourceRef="Activity_08div8g" targetRef="Event_1kmarlw" />
    <bpmn:scriptTask id="Activity_1sbsavb" name="check if serviceInstance mandatory = false" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_17jenw5</bpmn:incoming>
      <bpmn:outgoing>Flow_0o0zo2j</bpmn:outgoing>
      <bpmn:script>var servicesInstances = JSON.parse(execution.getVariable('servicesInstances'));
var isServiceNotMandatoryExist = false;
for (var i=0; i &lt; servicesInstances.length; i++) {
	if (!servicesInstances[i].mandatory) {
		isServiceNotMandatoryExist = true;
	}
}
execution.setVariable('isServiceNotMandatoryExist', isServiceNotMandatoryExist);</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0o0zo2j" sourceRef="Activity_1sbsavb" targetRef="Gateway_04ibmji" />
    <bpmn:sequenceFlow id="Flow_1grhm80" sourceRef="Activity_0tgyz32" targetRef="Activity_1gj4zds" />
    <bpmn:exclusiveGateway id="Gateway_04ibmji" name="if exist ?">
      <bpmn:incoming>Flow_0o0zo2j</bpmn:incoming>
      <bpmn:outgoing>Flow_0zkm2zr</bpmn:outgoing>
      <bpmn:outgoing>Flow_0m3y9m8</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_0zkm2zr" name="Oui" sourceRef="Gateway_04ibmji" targetRef="Activity_1y0b68q">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isServiceNotMandatoryExist}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_1y0b68q" name="create intervention equipement">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
url_tb+'/api/v1/intervention/interventionEquipment/create';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var servicesInstances = JSON.parse(execution.getVariable('servicesInstances'));
var contract = JSON.parse(execution.getVariable('contract'));
requestBody = {"serviceInstanceDtoList": servicesInstances, "interventionNumber": execution.getVariable('interventionNumber'), "offerCode": contract.offerCode};
print('requestBody: ' + JSON.stringify(requestBody));
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('create intervention equipement api');
var resp = connector.getVariable('response')
print('create intervention equipement: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0zkm2zr</bpmn:incoming>
      <bpmn:outgoing>Flow_11llimo</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_11llimo" sourceRef="Activity_1y0b68q" targetRef="Activity_14xi15n" />
    <bpmn:serviceTask id="Activity_14xi15n" name="create intervention bundles">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
url_tb+'/api/v1/intervention/interventionBundles/create';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var contract = JSON.parse(execution.getVariable('contract'));
requestBody = {"offerCode": contract.offerCode, "interventionNumber": execution.getVariable('interventionNumber')};
print('requestBody: ' + JSON.stringify(requestBody));
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('create intervention bundles api');
var resp = connector.getVariable('response')
print('create intervention bundles: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_11llimo</bpmn:incoming>
      <bpmn:incoming>Flow_0m3y9m8</bpmn:incoming>
      <bpmn:outgoing>Flow_1u0duki</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0m3y9m8" name="Non" sourceRef="Gateway_04ibmji" targetRef="Activity_14xi15n">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!isServiceNotMandatoryExist}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_0me94ts" name="create customer">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_customer');
url_tb+'/api/v1/customer/create';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('customer')</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('create customer api');
var resp = connector.getVariable('response')
print('create customer: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
execution.setVariable('customer', resp);

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1rng90h</bpmn:incoming>
      <bpmn:outgoing>Flow_02xowgn</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_02xowgn" sourceRef="Activity_0me94ts" targetRef="Activity_0oqxrvm" />
    <bpmn:sequenceFlow id="Flow_1rng90h" name="Oui + ClientCode &#60;&#62;" sourceRef="Gateway_0p1j3ba" targetRef="Activity_0me94ts">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">customerCodeByNomPrenomEmail &amp;&amp; customerCodeByNomPrenomEmail !== customer.code &amp;&amp; customerByNomPrenomEmailExist</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_18ig1xl" name="update trajet (Intervention TR)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
var appointmentId = execution.getVariable('appointmentId');
var interventionNumber = execution.getVariable('interventionNumber');
url_tb+'/api/v1/intervention/update/'+interventionNumber+'/'+appointmentId;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('update trajet (intervention TR) api');
var resp = connector.getVariable('response')
print('update trajet (intervention TR) response: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1wabwdb</bpmn:incoming>
      <bpmn:incoming>Flow_0vkkpbf</bpmn:incoming>
      <bpmn:outgoing>Flow_02rc3q7</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_02rc3q7" sourceRef="Activity_18ig1xl" targetRef="Activity_0sifauj" />
    <bpmn:serviceTask id="Activity_1gj4zds" name="send intervention to op-planner">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
url_tb+'/api/v1/intervention/planner/change';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var contract = JSON.parse(execution.getVariable('contract'));
var requestBody = "{\"interventionType\":{\"interventionTypeId\":131, \"interventionTypeLabel\":\"SS\"},\"interventionEventStatus\":{\"interventionEventStatusCode\":\"APL\"}}";
requestBody = JSON.parse(requestBody);
requestBody.channel = execution.getVariable('channel');
requestBody.interventionNumber = execution.getVariable('interventionNumber');
requestBody.contractDetails = JSON.parse(execution.getVariable('contract'));
requestBody.address = JSON.parse(execution.getVariable('address'));
print(JSON.stringify(requestBody));
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('send intevention (A planifier) to op-planner api');
var resp = connector.getVariable('response')
print('response : ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1grhm80</bpmn:incoming>
      <bpmn:outgoing>Flow_0jycivt</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_0sifauj" name="send intervention to op-planner">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
url_tb+'/api/v1/intervention/planner/change';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var contract = JSON.parse(execution.getVariable('contract'));
var reservedIntervention = JSON.parse(execution.getVariable('intervention'));
var requestBody = "{\"interventionType\":{\"interventionTypeId\":131, \"interventionTypeLabel\":\"SS\"}}";
requestBody = JSON.parse(requestBody);

if (contract.address &amp;&amp; (contract.address.x == null || contract.address.y == null)) {
    var fakeAddress = reservedIntervention?.contractDetails?.address;
    contract.address.x = fakeAddress.x;
    contract.address.y = fakeAddress.y;
}

requestBody.contractDetails = contract;
requestBody.channel = execution.getVariable('channel');
requestBody.interventionNumber = execution.getVariable('interventionNumber');
requestBody.integrationComment = execution.getVariable('appointmentId');
requestBody.planificationComment = 'Créneau réservé en agence';
requestBody.interventionEventStatus = {"interventionEventStatusCode": execution.getVariable('interventionEventStatusCode')};
print(JSON.stringify(requestBody));
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('send intevention (A Confirmer Digit) to op-planner api');
var resp = connector.getVariable('response')
print('response : ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_02rc3q7</bpmn:incoming>
      <bpmn:outgoing>Flow_0art3x3</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_0ylikva" name="send intervention to op-planner">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
url_tb+'/api/v1/intervention/planner/change';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var contract = JSON.parse(execution.getVariable('contract'));
var requestBody = "{\"interventionType\":{\"interventionTypeId\":131, \"interventionTypeLabel\":\"SS\"},\"interventionEventStatus\":{\"interventionEventStatusCode\":\"APL\"}}";
requestBody = JSON.parse(requestBody);
requestBody.contractDetails = JSON.parse(execution.getVariable('contract'));
requestBody.address = JSON.parse(execution.getVariable('address'));
requestBody.channel = execution.getVariable('channel');
requestBody.interventionNumber = execution.getVariable('interventionNumber');
var appointmentId = execution.getVariable('appointmentId');
requestBody.integrationComment = appointmentId + 'KO';
requestBody.planificationComment = 'RDV initialement demandé lors de la souscription : ' + appointmentId.substring(0, 4) + '-' + appointmentId.substring(4, 6) + '-' + appointmentId.substring(6, 8) + ' - ' + appointmentId.substring(8, 10) + 'h-' +  appointmentId.substring(10, 12) + 'h';
print(JSON.stringify(requestBody));
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('send intevention (with comments) to op-planner api');
var resp = connector.getVariable('response')
print('send intevention (with comments) to op-planner: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0vbelef</bpmn:incoming>
      <bpmn:outgoing>Flow_0k38nee</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="Gateway_0t8q4hh" name="isReserved &#38; isAutomaticPlanif">
      <bpmn:incoming>Flow_1u0duki</bpmn:incoming>
      <bpmn:outgoing>Flow_10613h4</bpmn:outgoing>
      <bpmn:outgoing>Flow_0fb4nqw</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="Activity_17hd165" name="Sync Install and notify customer &#38; crm">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
var interventionNumber = execution.getVariable('interventionNumber');
url_tb+'/api/v1/intervention/auto-planif/' +interventionNumber;  </camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">GET</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('sync install and notify crm');
var resp = connector.getVariable('response')
print('Sync install &amp; notify crm: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_10613h4</bpmn:incoming>
      <bpmn:outgoing>Flow_1gxr632</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_10613h4" name="Oui" sourceRef="Gateway_0t8q4hh" targetRef="Activity_17hd165">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isAutomaticPlanif &amp;&amp; isInterventionReserved}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1u0duki" sourceRef="Activity_14xi15n" targetRef="Gateway_0t8q4hh" />
    <bpmn:serviceTask id="Activity_0cnelo7" name="update intervention status (A confirmer Digit, A confirmer)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
url_tb+'/api/v1/intervention/update';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var contract = JSON.parse(execution.getVariable('contract'));
var reservedIntervention = JSON.parse(execution.getVariable('intervention'));
var requestBody = "{\"interventionType\":{\"interventionTypeId\":131, \"interventionTypeLabel\":\"SS\"}}";
requestBody = JSON.parse(requestBody);

if (contract.address &amp;&amp; (contract.address.x == null || contract.address.y == null)) {
    var fakeAddress = reservedIntervention?.contractDetails?.address;
    contract.address.x = fakeAddress.x;
    contract.address.y = fakeAddress.y;
}

requestBody.contractDetails = contract;
requestBody.channel = execution.getVariable('channel');
requestBody.interventionNumber = execution.getVariable('interventionNumber');
requestBody.integrationComment = execution.getVariable('appointmentId');
requestBody.planificationComment = '';
requestBody.planned = false;
requestBody.interventionEventStatus = {"interventionEventStatusCode": execution.getVariable('interventionEventStatusCode')};
print(JSON.stringify(requestBody));
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('update intervention status (A confirmer Digit, A confirmer) api');
var resp = connector.getVariable('response')
print('update intervention status (A confirmer Digit, A confirmer): ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response);
    execution.setVariable('eventTypeOnReception', 'RCP');
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_08etcmf</bpmn:incoming>
      <bpmn:outgoing>Flow_0vkkpbf</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="Gateway_1xrmbk2" name="isAutomaticPlanif">
      <bpmn:incoming>Flow_0yfpn5h</bpmn:incoming>
      <bpmn:outgoing>Flow_08etcmf</bpmn:outgoing>
      <bpmn:outgoing>Flow_1cbyi5x</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="Activity_1dinudl" name="update intevention (Planifiée)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_op_intervention');
url_tb+'/api/v1/intervention/update';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var contract = JSON.parse(execution.getVariable('contract'));
var reservedIntervention = JSON.parse(execution.getVariable('intervention'));
var daysInterval = execution.getVariable('daysInterval');
var requestBody = "{\"interventionType\":{\"interventionTypeId\":131, \"interventionTypeLabel\":\"SS\"}}";
requestBody = JSON.parse(requestBody);

if (contract.address &amp;&amp; (contract.address.x == null || contract.address.y == null)) {
    var fakeAddress = reservedIntervention?.contractDetails?.address;
    contract.address.x = fakeAddress.x;
    contract.address.y = fakeAddress.y;
}

requestBody.contractDetails = contract;
requestBody.channel = execution.getVariable('channel');
requestBody.interventionNumber = execution.getVariable('interventionNumber');
requestBody.integrationComment = execution.getVariable('appointmentId');
requestBody.planificationComment = "AUTO";
requestBody.planned = true;
requestBody.interventionEventStatus = {"interventionEventStatusCode": execution.getVariable('interventionEventStatusCode')};
print(JSON.stringify(requestBody));
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('update intevention (Planifiée) api');
var resp = connector.getVariable('response')
print('update intevention (Planifiée): ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response);
    execution.setVariable('eventTypeOnReception', 'PLA');
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incientId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incientId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1cbyi5x</bpmn:incoming>
      <bpmn:outgoing>Flow_1wabwdb</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_08etcmf" name="Non" sourceRef="Gateway_1xrmbk2" targetRef="Activity_0cnelo7">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!isAutomaticPlanif}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1cbyi5x" name="oui" sourceRef="Gateway_1xrmbk2" targetRef="Activity_1dinudl">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isAutomaticPlanif}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1wabwdb" sourceRef="Activity_1dinudl" targetRef="Activity_18ig1xl" />
    <bpmn:sequenceFlow id="Flow_0vkkpbf" sourceRef="Activity_0cnelo7" targetRef="Activity_18ig1xl" />
    <bpmn:receiveTask id="Activity_1m7fygq" name="waiting event" messageRef="Message_0p8iejv">
      <bpmn:incoming>Flow_1i9gsvf</bpmn:incoming>
      <bpmn:incoming>Flow_1bbtjn9</bpmn:incoming>
      <bpmn:incoming>Flow_1o16nv2</bpmn:incoming>
      <bpmn:incoming>Flow_125qx17</bpmn:incoming>
      <bpmn:outgoing>Flow_15u6jln</bpmn:outgoing>
    </bpmn:receiveTask>
    <bpmn:exclusiveGateway id="Gateway_1en30ho">
      <bpmn:incoming>Flow_1uppl1y</bpmn:incoming>
      <bpmn:outgoing>Flow_19qt9jt</bpmn:outgoing>
      <bpmn:outgoing>Flow_0u47fiz</bpmn:outgoing>
      <bpmn:outgoing>Flow_0gvkizq</bpmn:outgoing>
      <bpmn:outgoing>Flow_1hl5ck2</bpmn:outgoing>
      <bpmn:outgoing>Flow_0s628fm</bpmn:outgoing>
      <bpmn:outgoing>Flow_1wxgl18</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:endEvent id="Event_1h4w2ml">
      <bpmn:incoming>Flow_19qt9jt</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:endEvent id="Event_061v51k">
      <bpmn:incoming>Flow_0u47fiz</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask id="Activity_1vo9uqi" name="recalculate recall_date and abandonment_date (Annulation, Replanification)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_planif_be = execution.getVariable('url_planif_be');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_planif_be + '/api/ortec/dashboardPlanif/updateAbandonmentAndRecallDates/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var eventType = "ANN";
var requestBody = {};
requestBody.eventType = eventType;
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1k5ibe9">
              <camunda:script scriptFormat="JavaScript">print('abandonment and recall dates recalculation api');
var resp = connector.getVariable('response');
print('abandonment date recalculated : ' + resp);
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
execution.setVariable('abandonmentDate', resp);
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0gvkizq</bpmn:incoming>
      <bpmn:outgoing>Flow_1i9gsvf</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1ai4sid" name="Definitive intervention closure">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_planif_be = execution.getVariable('url_planif_be');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_planif_be + '/api/ortec/dashboardPlanif/closePlanification/fromCamunda/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var closureCode = 62;
var requestBody = {};
requestBody.closureCode = closureCode;
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1k5ibe9">
              <camunda:script scriptFormat="JavaScript">print('Definitive closure API (abandonment date reached)');
var resp = connector.getVariable('response');
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0w2w75m</bpmn:incoming>
      <bpmn:outgoing>Flow_0r7gmdx</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1r0dntt" name="recalculate recall_date and abandonment_date (Digitalisation, Injoignable)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_planif_be = execution.getVariable('url_planif_be');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_planif_be + '/api/ortec/dashboardPlanif/updateAbandonmentAndRecallDates/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var eventType = "DIG";
var requestBody = {};
requestBody.eventType = eventType;
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1k5ibe9">
              <camunda:script scriptFormat="JavaScript">print('abandonment and recall dates recalculation api');
var resp = connector.getVariable('response');
print('abandonment date recalculated : ' + resp);
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
execution.setVariable('abandonmentDate', resp);
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1hl5ck2</bpmn:incoming>
      <bpmn:outgoing>Flow_1bbtjn9</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_0h4mm3v" name="recalculate recall_date and abandonment_date (Planification, Confirmation)">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_planif_be = execution.getVariable('url_planif_be');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_planif_be + '/api/ortec/dashboardPlanif/updateAbandonmentAndRecallDates/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var eventType = "PLA";
var requestBody = {};
requestBody.eventType = eventType;
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1k5ibe9">
              <camunda:script scriptFormat="JavaScript">print('abandonment and recall dates recalculation api');
var resp = connector.getVariable('response');
print('abandonment date recalculated : ' + resp);
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
execution.setVariable('abandonmentDate', resp);
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0s628fm</bpmn:incoming>
      <bpmn:outgoing>Flow_1o16nv2</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:endEvent id="Event_0fxlpqq">
      <bpmn:incoming>Flow_0r7gmdx</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:endEvent id="Event_0awe6rx">
      <bpmn:incoming>Flow_1wxgl18</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask id="Activity_1o22gd3" name="refresh keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/auth/realms/'+execution.getVariable('realm')+'/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1uvzozd</bpmn:incoming>
      <bpmn:outgoing>Flow_0w2w75m</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:boundaryEvent id="Event_1gdc6sc" name="Abandonment Date Timer" attachedToRef="Activity_1m7fygq">
      <bpmn:outgoing>Flow_1uvzozd</bpmn:outgoing>
      <bpmn:timerEventDefinition id="TimerEventDefinition_0ncqgd1">
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${abandonmentDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:boundaryEvent>
    <bpmn:sequenceFlow id="Flow_1i9gsvf" sourceRef="Activity_1vo9uqi" targetRef="Activity_1m7fygq" />
    <bpmn:sequenceFlow id="Flow_1bbtjn9" sourceRef="Activity_1r0dntt" targetRef="Activity_1m7fygq" />
    <bpmn:sequenceFlow id="Flow_1o16nv2" sourceRef="Activity_0h4mm3v" targetRef="Activity_1m7fygq" />
    <bpmn:sequenceFlow id="Flow_15u6jln" sourceRef="Activity_1m7fygq" targetRef="Activity_1fmzhze" />
    <bpmn:sequenceFlow id="Flow_19qt9jt" name="event type intervention terminée" sourceRef="Gateway_1en30ho" targetRef="Event_1h4w2ml">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${eventType == 'CLO' }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0u47fiz" name="event type intervention cloturée" sourceRef="Gateway_1en30ho" targetRef="Event_061v51k">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${eventType == 'TER' }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0gvkizq" name="event type annulation || replanification" sourceRef="Gateway_1en30ho" targetRef="Activity_1vo9uqi">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${eventType == 'ANN' || eventType == 'RPL' }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1hl5ck2" name="event type digitalisation || injoignable" sourceRef="Gateway_1en30ho" targetRef="Activity_1r0dntt">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${eventType == 'DIG' || eventType == 'INJ' }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0s628fm" name="event type planification || confirmation" sourceRef="Gateway_1en30ho" targetRef="Activity_0h4mm3v">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${eventType == 'PLA' || eventType == 'CON' }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1wxgl18" name="event type intervention interrompue" sourceRef="Gateway_1en30ho" targetRef="Event_0awe6rx">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${eventType == 'INT' }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0w2w75m" sourceRef="Activity_1o22gd3" targetRef="Activity_1ai4sid" />
    <bpmn:sequenceFlow id="Flow_0r7gmdx" sourceRef="Activity_1ai4sid" targetRef="Event_0fxlpqq" />
    <bpmn:sequenceFlow id="Flow_1uvzozd" sourceRef="Event_1gdc6sc" targetRef="Activity_1o22gd3" />
    <bpmn:serviceTask id="Activity_19mo0ty" name="calculate recall_date and abandonment_date">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_planif_be = execution.getVariable('url_planif_be');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_planif_be + '/api/ortec/dashboardPlanif/updateAbandonmentAndRecallDates/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var requestBody = {};
requestBody.eventType = execution.getVariable('eventTypeOnReception');
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1k5ibe9">
              <camunda:script scriptFormat="JavaScript">print('abandonment and recall dates recalculation api');
var resp = connector.getVariable('response');
print('abandonment date recalculated : ' + resp);
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
execution.setVariable('abandonmentDate', resp);
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0jycivt</bpmn:incoming>
      <bpmn:incoming>Flow_0k38nee</bpmn:incoming>
      <bpmn:incoming>Flow_0art3x3</bpmn:incoming>
      <bpmn:outgoing>Flow_17jenw5</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0jycivt" sourceRef="Activity_1gj4zds" targetRef="Activity_19mo0ty" />
    <bpmn:sequenceFlow id="Flow_0k38nee" sourceRef="Activity_0ylikva" targetRef="Activity_19mo0ty" />
    <bpmn:sequenceFlow id="Flow_0art3x3" sourceRef="Activity_0sifauj" targetRef="Activity_19mo0ty" />
    <bpmn:sequenceFlow id="Flow_17jenw5" sourceRef="Activity_19mo0ty" targetRef="Activity_1sbsavb" />
    <bpmn:inclusiveGateway id="Gateway_0l6zvoc">
      <bpmn:incoming>Flow_0fb4nqw</bpmn:incoming>
      <bpmn:incoming>Flow_1gxr632</bpmn:incoming>
      <bpmn:outgoing>Flow_125qx17</bpmn:outgoing>
      <bpmn:outgoing>Flow_1bcon08</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:sequenceFlow id="Flow_0fb4nqw" sourceRef="Gateway_0t8q4hh" targetRef="Gateway_0l6zvoc">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">!(execution.getVariable('isAutomaticPlanif') == true) || !(execution.getVariable('isInterventionReserved') == true)</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1gxr632" sourceRef="Activity_17hd165" targetRef="Gateway_0l6zvoc" />
    <bpmn:sequenceFlow id="Flow_125qx17" sourceRef="Gateway_0l6zvoc" targetRef="Activity_1m7fygq">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:intermediateCatchEvent id="Event_1sh20qf" name="JRDV - 2">
      <bpmn:incoming>Flow_0wibx96</bpmn:incoming>
      <bpmn:outgoing>Flow_0duabvw</bpmn:outgoing>
      <bpmn:timerEventDefinition id="TimerEventDefinition_0i3spr7">
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${cancellationDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:intermediateCatchEvent>
    <bpmn:exclusiveGateway id="Gateway_0xovp1l" name="Intervention toujours à confirmer ???">
      <bpmn:incoming>Flow_1l04mbt</bpmn:incoming>
      <bpmn:outgoing>Flow_19shqnb</bpmn:outgoing>
      <bpmn:outgoing>Flow_0ye27tx</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:endEvent id="Event_1fezwkp">
      <bpmn:incoming>Flow_19shqnb</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:endEvent id="Event_18et3vw">
      <bpmn:incoming>Flow_0k1vjuy</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask id="Activity_1inoeht" name="check intervention status">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb = execution.getVariable('url_op_intervention');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_tb + '/api/v1/intervention/is-still-tobeconfirmed-status/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">GET</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ph8f2n">
              <camunda:script scriptFormat="JavaScript">var resp = connector.getVariable('response')
print('resp after 2 days, is intervention still CFC ? : ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print('respStatusCode' + respStatusCode);

response = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('isStillCFC', response);


var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0pspfeh</bpmn:incoming>
      <bpmn:outgoing>Flow_1l04mbt</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1kn8x3j" name="cancel intervention ">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb = execution.getVariable('url_planif_be');
var interventionNumber = execution.getVariable('interventionNumber');

var completeUrl = url_tb + '/api/ortec/dashboardPlanif/cancelPlanification/fromCamunda/' + interventionNumber;

completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var closureCode = 59;
var requestBody = {};
requestBody.closureCode = closureCode;
JSON.stringify(requestBody);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ph8f2n">
              <camunda:script scriptFormat="JavaScript">print('Cancel appointment API (J+2 rdv)');
var resp = connector.getVariable('response');
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0ye27tx</bpmn:incoming>
      <bpmn:outgoing>Flow_0k1vjuy</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1xseg9n" name="refresh keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/auth/realms/'+execution.getVariable('realm')+'/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0duabvw</bpmn:incoming>
      <bpmn:outgoing>Flow_0pspfeh</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0duabvw" sourceRef="Event_1sh20qf" targetRef="Activity_1xseg9n" />
    <bpmn:sequenceFlow id="Flow_1l04mbt" sourceRef="Activity_1inoeht" targetRef="Gateway_0xovp1l" />
    <bpmn:sequenceFlow id="Flow_19shqnb" name="Non" sourceRef="Gateway_0xovp1l" targetRef="Event_1fezwkp">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!isStillCFC}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0ye27tx" name="Oui" sourceRef="Gateway_0xovp1l" targetRef="Activity_1kn8x3j">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isStillCFC}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0k1vjuy" sourceRef="Activity_1kn8x3j" targetRef="Event_18et3vw" />
    <bpmn:sequenceFlow id="Flow_0pspfeh" sourceRef="Activity_1xseg9n" targetRef="Activity_1inoeht" />
    <bpmn:sequenceFlow id="Flow_1bcon08" sourceRef="Gateway_0l6zvoc" targetRef="Activity_0tsx21e">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isInterventionReserved == true &amp;&amp; !isAutomaticPlanif}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_0tsx21e" name="get appointment cancellation date time">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb = execution.getVariable('url_op_intervention');
var interventionNumber = execution.getVariable('interventionNumber');
var completeUrl = url_tb + '/api/v1/intervention/get-appointment-cancel-date/' + interventionNumber;
completeUrl;</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">GET</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1k5ibe9">
              <camunda:script scriptFormat="JavaScript">print('appointment cancellation date time calculation api');
var resp = connector.getVariable('response');
print('appointment cancellation date time calculated : ' + resp);
var respStatusCode = connector.getVariable('statusCode');
print('respStatusCode' + respStatusCode);

var execution = connector.getParentVariableScope();
execution.setVariable('cancellationDate', resp);
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
    print('no error');

    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/

    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "SUCCESS")
    execution.setVariable('responseMessage', response)
} else {
    execution.setVariable('httpCode', respStatusCode);
    execution.setVariable('state', "FAIL")
    execution.setVariable('responseMessage', response);
    /*solve incident if exist*/
    print('incidentId : ' + execution.getVariable('incidentId'));
    if (execution.getVariable('incidentId') != null) {
        execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
        execution.setVariable('incidentId', null);
    }
    /* end solving incident*/
    /* create incident*/

    var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
    var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
    var context = new IncidentContext();
    var parentScope = connector.getParentVariableScope()
    context.setActivityId(parentScope.getCurrentActivityId());
    context.setExecutionId(parentScope.getProcessInstanceId());
    context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
    var newIncident = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
    newIncident.id
    execution.setVariable('incidentId', newIncident.id);
    print('incidentId' + newIncident.id);
    /*end create incident*/
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1bcon08</bpmn:incoming>
      <bpmn:outgoing>Flow_0wibx96</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0wibx96" sourceRef="Activity_0tsx21e" targetRef="Event_1sh20qf" />
    <bpmn:serviceTask id="Activity_1fmzhze" name="refresh keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/auth/realms/'+execution.getVariable('realm')+'/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_15u6jln</bpmn:incoming>
      <bpmn:outgoing>Flow_1uppl1y</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1uppl1y" sourceRef="Activity_1fmzhze" targetRef="Gateway_1en30ho" />
    <bpmn:textAnnotation id="TextAnnotation_087t8ia">
      <bpmn:text>TOP-5153</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_1hnkhth">
      <bpmn:text>TOP-5383</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0c81zgl">
      <bpmn:text>TOP-5383</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0h5yqou" associationDirection="None" sourceRef="Activity_1vo9uqi" targetRef="TextAnnotation_1hnkhth" />
    <bpmn:association id="Association_0m22m0v" associationDirection="None" sourceRef="TextAnnotation_087t8ia" targetRef="Activity_1ai4sid" />
    <bpmn:association id="Association_04m828h" associationDirection="None" sourceRef="Activity_1r0dntt" targetRef="TextAnnotation_1hnkhth" />
    <bpmn:association id="Association_0qpja41" associationDirection="None" sourceRef="Activity_1r0dntt" targetRef="TextAnnotation_0c81zgl" />
    <bpmn:association id="Association_116ygse" associationDirection="None" sourceRef="Activity_0h4mm3v" targetRef="TextAnnotation_0c81zgl" />
    <bpmn:textAnnotation id="TextAnnotation_0jyzxjg">
      <bpmn:text>TOP-5383</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0zovrzw" associationDirection="None" sourceRef="Activity_19mo0ty" targetRef="TextAnnotation_0jyzxjg" />
    <bpmn:textAnnotation id="TextAnnotation_062jn9i">
      <bpmn:text>TOP-5210</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_0r7yusv">
      <bpmn:text>TOP-5557</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0n1by1w" associationDirection="None" sourceRef="Activity_1inoeht" targetRef="TextAnnotation_0r7yusv" />
    <bpmn:association id="Association_1c0t43y" associationDirection="None" sourceRef="Activity_1kn8x3j" targetRef="TextAnnotation_062jn9i" />
  </bpmn:process>
  <bpmn:message id="Message_1u9olwp" name="plannerResponseMessage" />
  <bpmn:message id="Message_1hw2n7j" name="startInterventionPlannifMessage" />
  <bpmn:message id="Message_1v9ma2w" name="plannerResponse" />
  <bpmn:error id="Error_1870c31" name="Error_27erg8r" />
  <bpmn:message id="Message_2m77diu" name="Message_2m77diu" />
  <bpmn:message id="Message_0p8iejv" name="interventionEventType" />
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="interventionPlannif">
      <bpmndi:BPMNShape id="Event_07qg3d6_di" bpmnElement="startInterventionPlannifProcess">
        <dc:Bounds x="152" y="762" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_00e1wv8_di" bpmnElement="Activity_00e1wv8">
        <dc:Bounds x="240" y="740" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1i8xgpl_di" bpmnElement="Activity_1i8xgpl">
        <dc:Bounds x="430" y="740" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_06l9nsa_di" bpmnElement="Gateway_06l9nsa" isMarkerVisible="true">
        <dc:Bounds x="595" y="755" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_04y3ldk_di" bpmnElement="Activity_04y3ldk">
        <dc:Bounds x="1040" y="740" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_17mujf3_di" bpmnElement="Activity_17mujf3">
        <dc:Bounds x="720" y="898" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0p1j3ba_di" bpmnElement="Gateway_0p1j3ba" isMarkerVisible="true">
        <dc:Bounds x="875" y="913" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0xvujl3_di" bpmnElement="Activity_0xvujl3">
        <dc:Bounds x="1040" y="853" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_094b4za_di" bpmnElement="Activity_094b4za">
        <dc:Bounds x="1040" y="1170" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0bjbpkc_di" bpmnElement="Activity_0bjbpkc">
        <dc:Bounds x="1470" y="740" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_07uk4ov_di" bpmnElement="Gateway_07uk4ov" isMarkerVisible="true">
        <dc:Bounds x="1635" y="755" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0ur0ds1_di" bpmnElement="Activity_0ur0ds1">
        <dc:Bounds x="1820" y="620" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1k5weqx_di" bpmnElement="Activity_1k5weqx" isExpanded="true">
        <dc:Bounds x="490" y="1359" width="740" height="363" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0ojpmfh_di" bpmnElement="Event_0ojpmfh">
        <dc:Bounds x="523" y="1522" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0dz9j3o_di" bpmnElement="Activity_0dz9j3o">
        <dc:Bounds x="741" y="1500" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1m1enul_di" bpmnElement="Event_1m1enul">
        <dc:Bounds x="1163" y="1522" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0rnhgxt_di" bpmnElement="Activity_0rnhgxt">
        <dc:Bounds x="991" y="1500" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1o9jdhq_di" bpmnElement="Gateway_1o9jdhq" isMarkerVisible="true">
        <dc:Bounds x="616" y="1515" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0e91049_di" bpmnElement="Activity_0e91049">
        <dc:Bounds x="741" y="1615" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_1h3nzpr_di" bpmnElement="Flow_1h3nzpr">
        <di:waypoint x="559" y="1540" />
        <di:waypoint x="616" y="1540" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0v8co1n_di" bpmnElement="Flow_0v8co1n">
        <di:waypoint x="841" y="1540" />
        <di:waypoint x="991" y="1540" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1oc5gyu_di" bpmnElement="Flow_1oc5gyu">
        <di:waypoint x="1091" y="1540" />
        <di:waypoint x="1163" y="1540" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0hlgul9_di" bpmnElement="Flow_0hlgul9">
        <di:waypoint x="666" y="1540" />
        <di:waypoint x="741" y="1540" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1npvnq6_di" bpmnElement="Flow_1npvnq6">
        <di:waypoint x="641" y="1565" />
        <di:waypoint x="641" y="1655" />
        <di:waypoint x="741" y="1655" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0axft79_di" bpmnElement="Flow_0axft79">
        <di:waypoint x="841" y="1655" />
        <di:waypoint x="1041" y="1655" />
        <di:waypoint x="1041" y="1580" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Activity_0oqxrvm_di" bpmnElement="Activity_0oqxrvm">
        <dc:Bounds x="1290" y="740" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0njydw4_di" bpmnElement="Gateway_0njydw4" isMarkerVisible="true">
        <dc:Bounds x="2055" y="755" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1990" y="796" width="80" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0tgyz32_di" bpmnElement="Activity_0tgyz32">
        <dc:Bounds x="2380" y="740" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1f0t3ss_di" bpmnElement="Activity_1f0t3ss">
        <dc:Bounds x="2100" y="921" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0t703ja_di" bpmnElement="Gateway_0t703ja" isMarkerVisible="true">
        <dc:Bounds x="2235" y="936" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2220" y="844" width="85" height="93" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0euxk00_di" bpmnElement="Activity_0euxk00">
        <dc:Bounds x="2380" y="921" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1m3d5mw_di" bpmnElement="Activity_1m3d5mw">
        <dc:Bounds x="1750" y="740" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_03m7l78_di" bpmnElement="Gateway_03m7l78" isMarkerVisible="true">
        <dc:Bounds x="1875" y="755" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0f3jxfq_di" bpmnElement="Activity_08div8g">
        <dc:Bounds x="1850" y="930" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1kmarlw_di" bpmnElement="Event_1kmarlw">
        <dc:Bounds x="1882" y="1082" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1sbsavb_di" bpmnElement="Activity_1sbsavb">
        <dc:Bounds x="3100" y="740" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_04ibmji_di" bpmnElement="Gateway_04ibmji" isMarkerVisible="true">
        <dc:Bounds x="3240" y="755" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3245" y="815" width="41" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1y0b68q_di" bpmnElement="Activity_1y0b68q">
        <dc:Bounds x="3345" y="610" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_14xi15n_di" bpmnElement="Activity_14xi15n">
        <dc:Bounds x="3485" y="740" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1qiqz5g" bpmnElement="Activity_0me94ts">
        <dc:Bounds x="1040" y="1010" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0reazdm" bpmnElement="Activity_18ig1xl">
        <dc:Bounds x="2500" y="1120" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0hmd9h4" bpmnElement="Activity_1gj4zds">
        <dc:Bounds x="2610" y="740" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0kjzs2h" bpmnElement="Activity_0sifauj">
        <dc:Bounds x="2650" y="1120" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_15cfhh1" bpmnElement="Activity_0ylikva">
        <dc:Bounds x="2570" y="921" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_13j1awx" bpmnElement="Gateway_0t8q4hh" isMarkerVisible="true">
        <dc:Bounds x="3695" y="755" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3678" y="815" width="86" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1pnikgq" bpmnElement="Activity_17hd165">
        <dc:Bounds x="3790" y="620" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0pn6yro" bpmnElement="Activity_0cnelo7">
        <dc:Bounds x="2320" y="1170" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1jqzcgb" bpmnElement="Gateway_1xrmbk2" isMarkerVisible="true">
        <dc:Bounds x="2235" y="1095" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2142" y="1113" width="86" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_17d5jcq" bpmnElement="Activity_1dinudl">
        <dc:Bounds x="2320" y="1080" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_09gkiq8_di" bpmnElement="Activity_1m7fygq">
        <dc:Bounds x="4170" y="740" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1en30ho_di" bpmnElement="Gateway_1en30ho" isMarkerVisible="true">
        <dc:Bounds x="4535" y="755" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1h4w2ml_di" bpmnElement="Event_1h4w2ml">
        <dc:Bounds x="4762" y="622" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_061v51k_di" bpmnElement="Event_061v51k">
        <dc:Bounds x="4762" y="542" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1p1tjy6" bpmnElement="Activity_1vo9uqi">
        <dc:Bounds x="4350" y="1000" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0sjhnyv" bpmnElement="Activity_1ai4sid">
        <dc:Bounds x="4480" y="430" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0ljdc9v" bpmnElement="Activity_1r0dntt">
        <dc:Bounds x="4350" y="1170" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_15f4hsf" bpmnElement="Activity_0h4mm3v">
        <dc:Bounds x="4350" y="1340" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0ovqd3k" bpmnElement="Event_0fxlpqq">
        <dc:Bounds x="4762" y="452" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0awe6rx_di" bpmnElement="Event_0awe6rx">
        <dc:Bounds x="4762" y="712" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0eeaa7q" bpmnElement="Activity_1o22gd3">
        <dc:Bounds x="4220" y="520" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_13hxddy_di" bpmnElement="Activity_19mo0ty">
        <dc:Bounds x="2900" y="740" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0l6zvoc_di" bpmnElement="Gateway_0l6zvoc">
        <dc:Bounds x="4035" y="755" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_06j4rmv_di" bpmnElement="Event_1sh20qf">
        <dc:Bounds x="4042" y="252" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4041" y="222" width="45" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0xovp1l_di" bpmnElement="Gateway_0xovp1l" isMarkerVisible="true">
        <dc:Bounds x="4535" y="245" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4527" y="302" width="68" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1fezwkp_di" bpmnElement="Event_1fezwkp">
        <dc:Bounds x="5022" y="82" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_18et3vw_di" bpmnElement="Event_18et3vw">
        <dc:Bounds x="5022" y="252" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1y88he8" bpmnElement="Activity_1inoeht">
        <dc:Bounds x="4370" y="230" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1o5lrmd" bpmnElement="Activity_1kn8x3j">
        <dc:Bounds x="4780" y="230" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_07ypovz" bpmnElement="Activity_1xseg9n">
        <dc:Bounds x="4170" y="230" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1897frf" bpmnElement="Activity_0tsx21e">
        <dc:Bounds x="4010" y="406" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1txuil7" bpmnElement="Activity_1fmzhze">
        <dc:Bounds x="4350" y="740" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_15csgig" bpmnElement="TextAnnotation_087t8ia">
        <dc:Bounds x="4600" y="431" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0yvpgnw" bpmnElement="TextAnnotation_1hnkhth">
        <dc:Bounds x="4350" y="1110" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_17f7g5c" bpmnElement="TextAnnotation_0c81zgl">
        <dc:Bounds x="4350" y="1280" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0ofnlga" bpmnElement="TextAnnotation_0jyzxjg">
        <dc:Bounds x="2879" y="670" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_062jn9i_di" bpmnElement="TextAnnotation_062jn9i">
        <dc:Bounds x="4840" y="160" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1p9dyhc" bpmnElement="TextAnnotation_0r7yusv">
        <dc:Bounds x="4420" y="160" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1n2osiw_di" bpmnElement="Event_1gdc6sc">
        <dc:Bounds x="4252" y="722" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4281" y="686" width="69" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_0geoeu7_di" bpmnElement="Flow_0geoeu7">
        <di:waypoint x="188" y="780" />
        <di:waypoint x="240" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1l5zml1_di" bpmnElement="Flow_1l5zml1">
        <di:waypoint x="340" y="780" />
        <di:waypoint x="430" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_026pi9q_di" bpmnElement="Flow_026pi9q">
        <di:waypoint x="530" y="780" />
        <di:waypoint x="595" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0xg002s_di" bpmnElement="Flow_0xg002s">
        <di:waypoint x="645" y="780" />
        <di:waypoint x="1040" y="780" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="731" y="762" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1eflnju_di" bpmnElement="Flow_1eflnju">
        <di:waypoint x="620" y="805" />
        <di:waypoint x="620" y="938" />
        <di:waypoint x="720" y="938" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="663" y="954" width="21" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1f9so60_di" bpmnElement="Flow_1f9so60">
        <di:waypoint x="820" y="938" />
        <di:waypoint x="875" y="938" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0xzh5v1_di" bpmnElement="Flow_0xzh5v1">
        <di:waypoint x="900" y="913" />
        <di:waypoint x="900" y="893" />
        <di:waypoint x="1040" y="893" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="928" y="864" width="85" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0qnbpd4_di" bpmnElement="Flow_0qnbpd4">
        <di:waypoint x="900" y="963" />
        <di:waypoint x="900" y="1210" />
        <di:waypoint x="1040" y="1210" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="959" y="1193" width="21" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_08coukg_di" bpmnElement="Flow_08coukg">
        <di:waypoint x="1570" y="780" />
        <di:waypoint x="1635" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1vlbr47_di" bpmnElement="Flow_1vlbr47">
        <di:waypoint x="1660" y="755" />
        <di:waypoint x="1660" y="660" />
        <di:waypoint x="1820" y="660" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1679" y="643" width="21" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1ceqxak_di" bpmnElement="Flow_1ceqxak">
        <di:waypoint x="1390" y="780" />
        <di:waypoint x="1470" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_029sr1c_di" bpmnElement="Flow_029sr1c">
        <di:waypoint x="1140" y="780" />
        <di:waypoint x="1290" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1nopyze_di" bpmnElement="Flow_1nopyze">
        <di:waypoint x="1140" y="893" />
        <di:waypoint x="1220" y="893" />
        <di:waypoint x="1220" y="780" />
        <di:waypoint x="1290" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_062ulpp_di" bpmnElement="Flow_062ulpp">
        <di:waypoint x="1140" y="1210" />
        <di:waypoint x="1220" y="1210" />
        <di:waypoint x="1220" y="780" />
        <di:waypoint x="1290" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0las36h_di" bpmnElement="Flow_0las36h">
        <di:waypoint x="1685" y="780" />
        <di:waypoint x="1750" y="780" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1699" y="762" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0zw4bdv_di" bpmnElement="Flow_0zw4bdv">
        <di:waypoint x="2105" y="780" />
        <di:waypoint x="2380" y="780" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2229" y="762" width="21" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0jql50u_di" bpmnElement="Flow_0jql50u">
        <di:waypoint x="1920" y="660" />
        <di:waypoint x="2080" y="660" />
        <di:waypoint x="2080" y="755" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1d1blw6_di" bpmnElement="Flow_1d1blw6">
        <di:waypoint x="2080" y="805" />
        <di:waypoint x="2080" y="961" />
        <di:waypoint x="2100" y="961" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2091" y="863" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1yj4u9y_di" bpmnElement="Flow_1yj4u9y">
        <di:waypoint x="2200" y="961" />
        <di:waypoint x="2235" y="961" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1n14pzb_di" bpmnElement="Flow_1n14pzb">
        <di:waypoint x="2285" y="961" />
        <di:waypoint x="2380" y="961" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2329" y="943" width="21" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0yfpn5h_di" bpmnElement="Flow_0yfpn5h">
        <di:waypoint x="2260" y="986" />
        <di:waypoint x="2260" y="1095" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2268" y="1008" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0vbelef_di" bpmnElement="Flow_0vbelef">
        <di:waypoint x="2480" y="961" />
        <di:waypoint x="2570" y="961" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1yg202c_di" bpmnElement="Flow_1yg202c">
        <di:waypoint x="1850" y="780" />
        <di:waypoint x="1875" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1icsnea_di" bpmnElement="Flow_1icsnea">
        <di:waypoint x="1925" y="780" />
        <di:waypoint x="2055" y="780" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1981" y="762" width="21" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_07jomtf_di" bpmnElement="Flow_07jomtf">
        <di:waypoint x="1900" y="805" />
        <di:waypoint x="1900" y="930" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1907" y="871" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0gyb43s_di" bpmnElement="Flow_0gyb43s">
        <di:waypoint x="1900" y="1010" />
        <di:waypoint x="1900" y="1082" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0o0zo2j_di" bpmnElement="Flow_0o0zo2j">
        <di:waypoint x="3200" y="780" />
        <di:waypoint x="3240" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1grhm80_di" bpmnElement="Flow_1grhm80">
        <di:waypoint x="2480" y="780" />
        <di:waypoint x="2610" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0zkm2zr_di" bpmnElement="Flow_0zkm2zr">
        <di:waypoint x="3265" y="755" />
        <di:waypoint x="3265" y="650" />
        <di:waypoint x="3345" y="650" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3285" y="632" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_11llimo_di" bpmnElement="Flow_11llimo">
        <di:waypoint x="3445" y="650" />
        <di:waypoint x="3535" y="650" />
        <di:waypoint x="3535" y="740" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0m3y9m8_di" bpmnElement="Flow_0m3y9m8">
        <di:waypoint x="3290" y="780" />
        <di:waypoint x="3485" y="780" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3377" y="762" width="21" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_02xowgn_di" bpmnElement="Flow_02xowgn">
        <di:waypoint x="1140" y="1050" />
        <di:waypoint x="1220" y="1050" />
        <di:waypoint x="1220" y="780" />
        <di:waypoint x="1290" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1rng90h_di" bpmnElement="Flow_1rng90h">
        <di:waypoint x="900" y="963" />
        <di:waypoint x="900" y="1050" />
        <di:waypoint x="1040" y="1050" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="927" y="1026" width="85" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_02rc3q7_di" bpmnElement="Flow_02rc3q7">
        <di:waypoint x="2600" y="1160" />
        <di:waypoint x="2650" y="1160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_1u832am" bpmnElement="Flow_10613h4">
        <di:waypoint x="3720" y="755" />
        <di:waypoint x="3720" y="660" />
        <di:waypoint x="3790" y="660" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3726" y="705" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1u0duki_di" bpmnElement="Flow_1u0duki">
        <di:waypoint x="3585" y="780" />
        <di:waypoint x="3695" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_08etcmf_di" bpmnElement="Flow_08etcmf">
        <di:waypoint x="2260" y="1145" />
        <di:waypoint x="2260" y="1210" />
        <di:waypoint x="2320" y="1210" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2265" y="1173" width="21" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1cbyi5x_di" bpmnElement="Flow_1cbyi5x">
        <di:waypoint x="2285" y="1120" />
        <di:waypoint x="2320" y="1120" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2292" y="1103" width="15" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1wabwdb_di" bpmnElement="Flow_1wabwdb">
        <di:waypoint x="2420" y="1120" />
        <di:waypoint x="2450" y="1120" />
        <di:waypoint x="2450" y="1160" />
        <di:waypoint x="2500" y="1160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0vkkpbf_di" bpmnElement="Flow_0vkkpbf">
        <di:waypoint x="2420" y="1210" />
        <di:waypoint x="2450" y="1210" />
        <di:waypoint x="2450" y="1160" />
        <di:waypoint x="2500" y="1160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1i9gsvf_di" bpmnElement="Flow_1i9gsvf">
        <di:waypoint x="4350" y="1040" />
        <di:waypoint x="4250" y="1040" />
        <di:waypoint x="4250" y="820" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1bbtjn9_di" bpmnElement="Flow_1bbtjn9">
        <di:waypoint x="4350" y="1210" />
        <di:waypoint x="4250" y="1210" />
        <di:waypoint x="4250" y="820" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1o16nv2_di" bpmnElement="Flow_1o16nv2">
        <di:waypoint x="4350" y="1380" />
        <di:waypoint x="4250" y="1380" />
        <di:waypoint x="4250" y="820" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_15u6jln_di" bpmnElement="Flow_15u6jln">
        <di:waypoint x="4270" y="780" />
        <di:waypoint x="4350" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_19qt9jt_di" bpmnElement="Flow_19qt9jt">
        <di:waypoint x="4560" y="755" />
        <di:waypoint x="4560" y="640" />
        <di:waypoint x="4762" y="640" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4636" y="510" width="58" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0u47fiz_di" bpmnElement="Flow_0u47fiz">
        <di:waypoint x="4560" y="755" />
        <di:waypoint x="4560" y="560" />
        <di:waypoint x="4762" y="560" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4636" y="590" width="58" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0gvkizq_di" bpmnElement="Flow_0gvkizq">
        <di:waypoint x="4560" y="805" />
        <di:waypoint x="4560" y="1040" />
        <di:waypoint x="4450" y="1040" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4476" y="990" width="69" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1hl5ck2_di" bpmnElement="Flow_1hl5ck2">
        <di:waypoint x="4560" y="805" />
        <di:waypoint x="4560" y="1210" />
        <di:waypoint x="4450" y="1210" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4475" y="1160" width="70" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0s628fm_di" bpmnElement="Flow_0s628fm">
        <di:waypoint x="4560" y="805" />
        <di:waypoint x="4560" y="1380" />
        <di:waypoint x="4450" y="1380" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4477" y="1313" width="67" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1wxgl18_di" bpmnElement="Flow_1wxgl18">
        <di:waypoint x="4560" y="755" />
        <di:waypoint x="4560" y="730" />
        <di:waypoint x="4762" y="730" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4634" y="680" width="59" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0w2w75m_di" bpmnElement="Flow_0w2w75m">
        <di:waypoint x="4270" y="520" />
        <di:waypoint x="4270" y="470" />
        <di:waypoint x="4480" y="470" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0r7gmdx_di" bpmnElement="Flow_0r7gmdx">
        <di:waypoint x="4580" y="470" />
        <di:waypoint x="4762" y="470" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1uvzozd_di" bpmnElement="Flow_1uvzozd">
        <di:waypoint x="4270" y="722" />
        <di:waypoint x="4270" y="600" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0jycivt_di" bpmnElement="Flow_0jycivt">
        <di:waypoint x="2710" y="780" />
        <di:waypoint x="2900" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0k38nee_di" bpmnElement="Flow_0k38nee">
        <di:waypoint x="2670" y="961" />
        <di:waypoint x="2820" y="961" />
        <di:waypoint x="2820" y="780" />
        <di:waypoint x="2900" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0art3x3_di" bpmnElement="Flow_0art3x3">
        <di:waypoint x="2750" y="1160" />
        <di:waypoint x="2820" y="1160" />
        <di:waypoint x="2820" y="780" />
        <di:waypoint x="2900" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_17jenw5_di" bpmnElement="Flow_17jenw5">
        <di:waypoint x="3000" y="780" />
        <di:waypoint x="3100" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0fb4nqw_di" bpmnElement="Flow_0fb4nqw">
        <di:waypoint x="3745" y="780" />
        <di:waypoint x="4035" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1gxr632_di" bpmnElement="Flow_1gxr632">
        <di:waypoint x="3890" y="660" />
        <di:waypoint x="4060" y="660" />
        <di:waypoint x="4060" y="755" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_125qx17_di" bpmnElement="Flow_125qx17">
        <di:waypoint x="4085" y="780" />
        <di:waypoint x="4170" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0duabvw_di" bpmnElement="Flow_0duabvw">
        <di:waypoint x="4078" y="270" />
        <di:waypoint x="4170" y="270" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1l04mbt_di" bpmnElement="Flow_1l04mbt">
        <di:waypoint x="4470" y="270" />
        <di:waypoint x="4535" y="270" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_19shqnb_di" bpmnElement="Flow_19shqnb">
        <di:waypoint x="4560" y="245" />
        <di:waypoint x="4560" y="100" />
        <di:waypoint x="5022" y="100" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4565" y="170" width="21" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ye27tx_di" bpmnElement="Flow_0ye27tx">
        <di:waypoint x="4585" y="270" />
        <di:waypoint x="4780" y="270" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4658" y="243" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0k1vjuy_di" bpmnElement="Flow_0k1vjuy">
        <di:waypoint x="4880" y="270" />
        <di:waypoint x="5022" y="270" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0pspfeh_di" bpmnElement="Flow_0pspfeh">
        <di:waypoint x="4270" y="270" />
        <di:waypoint x="4370" y="270" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1bcon08_di" bpmnElement="Flow_1bcon08">
        <di:waypoint x="4060" y="755" />
        <di:waypoint x="4060" y="486" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0wibx96_di" bpmnElement="Flow_0wibx96">
        <di:waypoint x="4060" y="406" />
        <di:waypoint x="4060" y="288" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1uppl1y_di" bpmnElement="Flow_1uppl1y">
        <di:waypoint x="4450" y="780" />
        <di:waypoint x="4535" y="780" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0h5yqou_di" bpmnElement="Association_0h5yqou">
        <di:waypoint x="4400" y="1080" />
        <di:waypoint x="4400" y="1110" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0m22m0v_di" bpmnElement="Association_0m22m0v">
        <di:waypoint x="4600" y="446" />
        <di:waypoint x="4580" y="446" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_04m828h_di" bpmnElement="Association_04m828h">
        <di:waypoint x="4400" y="1170" />
        <di:waypoint x="4400" y="1140" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0qpja41_di" bpmnElement="Association_0qpja41">
        <di:waypoint x="4400" y="1250" />
        <di:waypoint x="4400" y="1280" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_116ygse_di" bpmnElement="Association_116ygse">
        <di:waypoint x="4400" y="1340" />
        <di:waypoint x="4400" y="1310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0zovrzw_di" bpmnElement="Association_0zovrzw">
        <di:waypoint x="2911" y="740" />
        <di:waypoint x="2911" y="700" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0n1by1w_di" bpmnElement="Association_0n1by1w">
        <di:waypoint x="4443" y="230" />
        <di:waypoint x="4465" y="190" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1c0t43y_di" bpmnElement="Association_1c0t43y">
        <di:waypoint x="4841" y="230" />
        <di:waypoint x="4853" y="190" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
