<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bioc="http://bpmn.io/schema/bpmn/biocolor/1.0" xmlns:color="http://www.omg.org/spec/BPMN/non-normative/color/1.0" id="Definitions_1l06s8n" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="5.0.0">
  <bpmn:process id="subscriptionTSBV2" name="Subscription Dev" isExecutable="true" camunda:versionTag="V0.1.0">
    <bpmn:sequenceFlow id="Flow_1hs7whr" sourceRef="StartEvent_1" targetRef="ServiceTask_1a1r9y3">
      <bpmn:extensionElements />
    </bpmn:sequenceFlow>
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>Flow_1hs7whr</bpmn:outgoing>
      <bpmn:messageEventDefinition id="MessageEventDefinition_0fw5trv" messageRef="Message_14f2kp4" />
    </bpmn:startEvent>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0k999mz">
      <bpmn:incoming>SequenceFlow_16p5imb</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1efpwbt</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1y8pv6t</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_1efpwbt" name="user exist" sourceRef="ExclusiveGateway_0k999mz" targetRef="Gateway_1ioh1dc">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${userExist}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0tolqus" sourceRef="Task_0f5nkv9" targetRef="ServiceTask_16z44tb" />
    <bpmn:serviceTask id="Task_0f5nkv9" name="Create emergency contact for contrat">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb = execution.getVariable('url_crm_emergency_contact');
var order = execution.getVariable('subscription');
var contractId= S(order).prop("contractId").value();
var holder= S(order).prop("holder");
var individual= S(holder).prop("individual");
var partnerId= S(individual).prop("partnerId").value();

url_tb + '/api/emergencyContacts/v1/camunda/contract/' + contractId + '/emergencyContact/' + partnerId</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PUT</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var endInstallationOrder = execution.getVariable('endInstallationEvent');
var user = S(endInstallationOrder).prop("user");
var contactInformation = S(user).prop("contactInformation");
var email = S(contactInformation).prop("email").value();
var mobile = S(contactInformation).prop("mobile").value();
var name = S(user).prop("name");
var title = S(name).prop("title").value();
var firstName = S(name).prop("firstName").value();
var lastName = S(name).prop("lastName").value();

'{"quoteId":"' + quoteId + '"' +
',"email":"' + email + '"' +
',"mobilePhoneNumber":"' + mobile + '"' +
',"title":"' + title + '"' +
',"rank": 1' +
',"firstName":"' + firstName + '"' +
',"lastName":"' + lastName +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('Create emergency contact for contrat api');
var resp = connector.getVariable('response')
print('resp create emergency contact  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_03xpufy</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0tolqus</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:subProcess id="SubProcess_085n162" triggeredByEvent="true">
      <bpmn:startEvent id="StartEvent_03idx0z">
        <bpmn:outgoing>SequenceFlow_02noohs</bpmn:outgoing>
        <bpmn:errorEventDefinition id="ErrorEventDefinition_01bg2gs" errorRef="Error_0a8hc3i" camunda:errorMessageVariable="errorTaskId" />
      </bpmn:startEvent>
      <bpmn:userTask id="UserTask_0pdqhnx" name="Review Task">
        <bpmn:incoming>SequenceFlow_02hvc3v</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_1kqhl73</bpmn:outgoing>
      </bpmn:userTask>
      <bpmn:endEvent id="EndEvent_19wiclb">
        <bpmn:incoming>SequenceFlow_0jg7ptp</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:scriptTask id="ScriptTask_1k0uuxl" name="Return to Last Task" camunda:asyncAfter="true" scriptFormat="JavaScript">
        <bpmn:incoming>SequenceFlow_1kqhl73</bpmn:incoming>
        <bpmn:incoming>SequenceFlow_1oka6jq</bpmn:incoming>
        <bpmn:incoming>Flow_05uhn59</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_0jg7ptp</bpmn:outgoing>
        <bpmn:script>print('Return to flow is Running');
var errorTaskId = execution.getVariable('errorTaskId');
if(errorTaskId == null){
print('No where to go back to');
}else{          execution.getProcessEngineServices().
getRuntimeService().createProcessInstanceModification(execution.getProcessInstanceId()).startBeforeActivity(errorTaskId).
execute();
}</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="SequenceFlow_02noohs" sourceRef="StartEvent_03idx0z" targetRef="ExclusiveGateway_0fofy8h" />
      <bpmn:sequenceFlow id="SequenceFlow_1kqhl73" sourceRef="UserTask_0pdqhnx" targetRef="ScriptTask_1k0uuxl" />
      <bpmn:sequenceFlow id="SequenceFlow_0jg7ptp" sourceRef="ScriptTask_1k0uuxl" targetRef="EndEvent_19wiclb" />
      <bpmn:exclusiveGateway id="ExclusiveGateway_0fofy8h">
        <bpmn:incoming>SequenceFlow_02noohs</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_0naabt8</bpmn:outgoing>
        <bpmn:outgoing>Flow_1vjq0bw</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="SequenceFlow_02hvc3v" sourceRef="Gateway_0pvvg6p" targetRef="UserTask_0pdqhnx" />
      <bpmn:sequenceFlow id="SequenceFlow_0naabt8" sourceRef="ExclusiveGateway_0fofy8h" targetRef="Task_1atrp8f">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode == 401}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:serviceTask id="Task_1atrp8f" name="Refresh Token">
        <bpmn:extensionElements>
          <camunda:connector>
            <camunda:inputOutput>
              <camunda:inputParameter name="url">
                <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/realms/Protectline/protocol/openid-connect/token'</camunda:script>
              </camunda:inputParameter>
              <camunda:inputParameter name="method">POST</camunda:inputParameter>
              <camunda:inputParameter name="headers">
                <camunda:map>
                  <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                  <camunda:entry key="Accept">application/json</camunda:entry>
                  <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
                </camunda:map>
              </camunda:inputParameter>
              <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
              <camunda:outputParameter name="Output_1b9kukr">
                <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
              </camunda:outputParameter>
            </camunda:inputOutput>
            <camunda:connectorId>http-connector</camunda:connectorId>
          </camunda:connector>
        </bpmn:extensionElements>
        <bpmn:incoming>SequenceFlow_0naabt8</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_1oka6jq</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="SequenceFlow_1oka6jq" sourceRef="Task_1atrp8f" targetRef="ScriptTask_1k0uuxl" />
      <bpmn:scriptTask id="Activity_14qqn62" name="retries - 1" scriptFormat="JavaScript">
        <bpmn:incoming>Flow_0fkz23b</bpmn:incoming>
        <bpmn:outgoing>Flow_0660sd8</bpmn:outgoing>
        <bpmn:script>var retries = execution.getVariable("retries");

// Decrement
retries = retries - 1;

// Don't allow negative retries
if (retries &lt; 0) {
  retries = 0;
}

execution.setVariable("retries", retries);
print('Retrying failed task and changing retries variable to ' + retries);</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:exclusiveGateway id="Gateway_0pvvg6p" default="SequenceFlow_02hvc3v">
        <bpmn:incoming>Flow_1vjq0bw</bpmn:incoming>
        <bpmn:outgoing>Flow_0fkz23b</bpmn:outgoing>
        <bpmn:outgoing>SequenceFlow_02hvc3v</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:intermediateCatchEvent id="Event_0bcs6uq">
        <bpmn:incoming>Flow_0660sd8</bpmn:incoming>
        <bpmn:outgoing>Flow_05uhn59</bpmn:outgoing>
        <bpmn:timerEventDefinition id="TimerEventDefinition_0w00qlh">
          <bpmn:timeDuration xsi:type="bpmn:tFormalExpression">PT5S</bpmn:timeDuration>
        </bpmn:timerEventDefinition>
      </bpmn:intermediateCatchEvent>
      <bpmn:sequenceFlow id="Flow_0fkz23b" sourceRef="Gateway_0pvvg6p" targetRef="Activity_14qqn62">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">var retries = execution.getVariable("retries");

retries != null &amp;&amp; retries &gt; 0;</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_0660sd8" sourceRef="Activity_14qqn62" targetRef="Event_0bcs6uq" />
      <bpmn:sequenceFlow id="Flow_1vjq0bw" sourceRef="ExclusiveGateway_0fofy8h" targetRef="Gateway_0pvvg6p">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode != 401}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_05uhn59" sourceRef="Event_0bcs6uq" targetRef="ScriptTask_1k0uuxl" />
      <bpmn:textAnnotation id="TextAnnotation_0gtrmko">
        <bpmn:text>Attente de 5s avant le retry</bpmn:text>
      </bpmn:textAnnotation>
      <bpmn:association id="Association_13htmfx" sourceRef="Event_0bcs6uq" targetRef="TextAnnotation_0gtrmko" />
    </bpmn:subProcess>
    <bpmn:serviceTask id="ServiceTask_0tntycs" name="Send Email Auhent. account">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_notifications');
url_tb+'/api/v1/notifications/email/authent'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var order = execution.getVariable('subscription');
print("order :" + order);

var idSubscription = S(order).prop("contractId").value();
print("idSubscription :" + idSubscription);

var holder = S(order).prop("holder");
print("holder :" + holder);
var individual = S(holder).prop("individual");
print("individual :" + individual);
var firstName = S(individual).prop("firstName").value();
print("firstName :" + firstName);
var lastName = S(individual).prop("lastName").value();
print("lastName :" + lastName);
var identifiant= S(individual).prop("partnerId").value();
print("identifiant:" + identifiant);

var contactInfos = S(individual).prop("contactInformation");
print("contactInfos :" + contactInfos);
var mobile = S(contactInfos).prop("mobile").value();
print("mobile :" + mobile);
var email = S(contactInfos).prop("email").value();
print("email :" + email);

var channel = S(order).prop("channel");
print("channel :" + channel);

var seller = S(channel).prop("organisationSellerId").value();
print("seller :" + seller);

var url_tb= execution.getVariable('url_crm_notifications');
print("url_tb: " + url_tb);

var isWithAppointment = execution.getVariable('isWithAppointment ');
print("is With Appointment : " + isWithAppointment );

var targetName = S(order).prop("target").value();

'{"idSubscription":"' + idSubscription + '"' +
',"seller":"' + seller + '"' +
',"firstName":"' + firstName + '"' +
',"lastName":"' + lastName + '"' +
',"identifiant":"' + identifiant + '"' +
',"mobile":"' + mobile + '"' +
',"email":"' + email + '"' +
',"targetName":"' + targetName +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0uu921g">
              <camunda:script scriptFormat="JavaScript">print('send email notif api');
var resp = connector.getVariable('response')
print('send email notif api ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

/* get activity id from parent*/
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
/*end get activity id from parent*/


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else{
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/

 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0nr4fba</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1xmfvd1</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_18x6klf">
      <bpmn:incoming>SequenceFlow_1h20s3z</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1f5sraz</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0glezdh</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:endEvent id="EndEvent_0t3dz3m">
      <bpmn:incoming>Flow_1kidmru</bpmn:incoming>
      <bpmn:incoming>Flow_0aabg45</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:endEvent id="EndEvent_0ihoxab">
      <bpmn:incoming>SequenceFlow_0cciban</bpmn:incoming>
      <bpmn:incoming>Flow_16jh4u6</bpmn:incoming>
      <bpmn:incoming>Flow_03znt54</bpmn:incoming>
      <bpmn:incoming>Flow_15ebk8w</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:scriptTask id="ScriptTask_0g7216r" name="Error" scriptFormat="Javascript">
      <bpmn:incoming>SequenceFlow_1f5sraz</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0cciban</bpmn:outgoing>
      <bpmn:script>print('CODE_STATUS_ERROR: Unrecognized Code Status of End Installation');

var activityId = execution.getCurrentActivityId();
var resp = execution.getVariable('returnInstallStatus');

if (resp =='REJECTED'){
var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity'); 
var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext'); 
var context = new IncidentContext(); 
context.setActivityId(execution.getCurrentActivityId()); 
context.setExecutionId(execution.getProcessInstanceId()); 
context.setProcessDefinitionId(execution.getProcessDefinitionId()); 
var newIncident = IncidentEntity.createAndInsertIncident("FAILED", context, "Error return code status"); 

execution.setVariable('incidentId',newIncident.getId());

throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}
if (execution.getVariable('incidentId')!=null){
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="SequenceFlow_1f5sraz" name="Rejected Intervention" sourceRef="ExclusiveGateway_18x6klf" targetRef="ScriptTask_0g7216r">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnInstallStatus== 'REJECTED'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0cciban" sourceRef="ScriptTask_0g7216r" targetRef="EndEvent_0ihoxab" />
    <bpmn:sequenceFlow id="SequenceFlow_0glezdh" name="Successful Intervention" sourceRef="ExclusiveGateway_18x6klf" targetRef="ServiceTask_0l6zw3c">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnInstallStatus== 'ACCEPTED'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_0j9rg8a" name="Rejected Quote By install">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_order');
var subscription = S(execution.getVariable('subscription'));
var quoteCode = subscription.prop("contractId").value();
url_tb+'/api/v1/orders/quote/' + quoteCode + '/status';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PUT</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var body = {
  "status": "REJECTED"
};

if (execution.getVariable('endInstallationEvent') != null) {
  var endInstallationEvent = S(execution.getVariable('endInstallationEvent'));
  var statusCode = endInstallationEvent
      .prop("status")
      .prop("statusCode").value();
  var statusDescription = endInstallationEvent
      .prop("status")
      .prop("statusDescription").value();
} else {
  var toolPlanificationDto = S(execution.getVariable('toolPlanificationDto'));
  var statusCode = toolPlanificationDto
      .prop("subscription")
      .prop("cancelIntervention")
      .prop("reasonCode").value();
  var statusDescription = toolPlanificationDto
      .prop("subscription")
      .prop("cancelIntervention")
      .prop("reasonLabel").value();
}

body.statusCode = statusCode;
body.statusDescription = statusDescription;

if (execution.getVariable('terminationDto') != null &amp;&amp; body.statusCode != '48') {
  var terminationDto = S(execution.getVariable('terminationDto'));
  if (terminationDto.hasProp("terminationReasonCode")) {
    var terminationReasonCode = terminationDto.prop("terminationReasonCode").value();
    body.terminationReasonCode = terminationReasonCode;
  }
  if (terminationDto.hasProp("terminationReasonDescription")) {
    var terminationReasonDescription = terminationDto.prop("terminationReasonDescription").value();
    body.terminationReasonDescription = terminationReasonDescription;
  }
  if (terminationDto.hasProp("underlyingTerminationReasonCode")) {
    var underlyingTerminationReasonCode = terminationDto.prop("underlyingTerminationReasonCode").value();
    body.underlyingTerminationReasonCode = underlyingTerminationReasonCode;
  }
  if (terminationDto.hasProp("underlyingTerminationReasonDescription")) {
    var underlyingTerminationReasonDescription = terminationDto.prop("underlyingTerminationReasonDescription").value();
    body.underlyingTerminationReasonDescription = underlyingTerminationReasonDescription;
  }
}

JSON.stringify(body);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('Rejected Quote By install api');
var resp = connector.getVariable('response')
print('resp Rejected Quote By install ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_01d55lx</bpmn:incoming>
      <bpmn:incoming>Flow_1rkzeu0</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1b9vu8r</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0l6zw3c" name="Accepted Quote">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_order');
var subscription = S(execution.getVariable('subscription'));
var quoteCode = subscription.prop("contractId").value();
url_tb+'/api/v1/orders/quote/' + quoteCode + '/status';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PUT</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var body = {
  "status": "ACCEPTED"
};

JSON.stringify(body);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('Accepted Quote api');
var resp = connector.getVariable('response')
print('resp Accepted Quote' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0glezdh</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1q31cwc</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1q31cwc" sourceRef="ServiceTask_0l6zw3c" targetRef="Activity_01pdkvo" />
    <bpmn:sequenceFlow id="SequenceFlow_1b9vu8r" sourceRef="ServiceTask_0j9rg8a" targetRef="ServiceTask_16z44tb" />
    <bpmn:serviceTask id="ServiceTask_1vau0gn" name="update address Customer and Subscription">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/orders/updateAddressCustomerAndSubscription'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"order":' + execution.getVariable('subscription') + ',"endInstallationOrder":' + execution.getVariable('endInstallationEvent')+ ',"toolPlanificationDto":' + execution.getVariable('toolPlanificationDto') +',"zammadTicket":' + execution.getVariable('zammadTicket') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('create emergency contact api');
var resp = connector.getVariable('response')
print('resp create emergency contact  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_00vr8x2</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_03xpufy</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_03xpufy" sourceRef="ServiceTask_1vau0gn" targetRef="Task_0f5nkv9" />
    <bpmn:serviceTask id="ServiceTask_16z44tb" name="Update Contact Information customer">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/orders/updateContactInformation'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"order":' + execution.getVariable('subscription') + ',"endInstallationOrder":' + execution.getVariable('endInstallationEvent')+ ',"toolPlanificationDto":' + execution.getVariable('toolPlanificationDto') +',"zammadTicket":' + execution.getVariable('zammadTicket') +',"userZammadId":' + execution.getVariable('userZammadId')
+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('create emergency contact api');
var resp = connector.getVariable('response')
print('resp create emergency contact  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response);

// Clean up retries if successful
execution.removeVariable("retries");
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/

  var retries = execution.getVariable("retries");
  if (retries == null) {
    // First failure, set retries to 2 (out of 3)
    execution.setVariable("retries", 2);
  } else if (retries &lt;= 0) {
    // No retries left - Do cleanup
    execution.removeVariable("retries");
  }

  throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0tolqus</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1b9vu8r</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_07htm9e</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_02gmcxu">
      <bpmn:incoming>SequenceFlow_012ll1l</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1h20s3z</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_17d0id1</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1xyuvrw</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_1h20s3z" sourceRef="ExclusiveGateway_02gmcxu" targetRef="ExclusiveGateway_18x6klf">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeCloture!='"44"' &amp;&amp; codeCloture!='"48"'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:intermediateCatchEvent id="IntermediateCatchEvent_1xyjras">
      <bpmn:incoming>SequenceFlow_1wkv645</bpmn:incoming>
      <bpmn:incoming>Flow_0hyw2ll</bpmn:incoming>
      <bpmn:incoming>Flow_19y9l8k</bpmn:incoming>
      <bpmn:outgoing>Flow_1uspps4</bpmn:outgoing>
      <bpmn:messageEventDefinition id="MessageEventDefinition_02p7mnx" messageRef="Message_0bht3g0" />
    </bpmn:intermediateCatchEvent>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0hqdqt4">
      <bpmn:incoming>Flow_1uspps4</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_058t5ay</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1k9tc68</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1243q96</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_058t5ay" name="Unreachable customer&#10;&#10;" sourceRef="ExclusiveGateway_0hqdqt4" targetRef="ServiceTask_167ar44">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnPlanifStatus== 'UNREACHABLE_CUSTOMER'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1wkv645" sourceRef="ServiceTask_167ar44" targetRef="IntermediateCatchEvent_1xyjras" />
    <bpmn:serviceTask id="ServiceTask_1yy3pcd" name="Rejected Quote By planif">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_order');
var subscription = S(execution.getVariable('subscription'));
var quoteCode = subscription.prop("contractId").value();
url_tb+'/api/v1/orders/quote/' + quoteCode + '/status';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PUT</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var body = {
  "status": "REJECTED"
};

if (execution.getVariable('endInstallationEvent') != null) {
  var endInstallationEvent = S(execution.getVariable('endInstallationEvent'));
  var statusCode = endInstallationEvent
      .prop("status")
      .prop("statusCode").value();
  var statusDescription = endInstallationEvent
      .prop("status")
      .prop("statusDescription").value();
} else {
  var toolPlanificationDto = S(execution.getVariable('toolPlanificationDto'));
  var statusCode = toolPlanificationDto
      .prop("subscription")
      .prop("cancelIntervention")
      .prop("reasonCode").value();
  var statusDescription = toolPlanificationDto
      .prop("subscription")
      .prop("cancelIntervention")
      .prop("reasonLabel").value();
}

body.statusCode = statusCode;
body.statusDescription = statusDescription;

if (execution.getVariable('terminationDto') != null) {
  var terminationDto = S(execution.getVariable('terminationDto'));
  if (terminationDto.hasProp("terminationReasonCode")) {
    var terminationReasonCode = terminationDto.prop("terminationReasonCode").value();
    body.terminationReasonCode = terminationReasonCode;
  }
  if (terminationDto.hasProp("underlyingTerminationReasonCode")) {
    var underlyingTerminationReasonCode = terminationDto.prop("underlyingTerminationReasonCode").value();
    body.underlyingTerminationReasonCode = underlyingTerminationReasonCode;
  }
}

JSON.stringify(body);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('***Rejected Quote By planif***');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_03u3t7d</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1j6g652</bpmn:incoming>
      <bpmn:incoming>Flow_0wd67cl</bpmn:incoming>
      <bpmn:incoming>Flow_076ny4p</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1hj6n34</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:endEvent id="EndEvent_1al4v7z">
      <bpmn:incoming>Flow_00pow13</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="SequenceFlow_1hj6n34" sourceRef="ServiceTask_1yy3pcd" targetRef="ServiceTask_15w8uuj" />
    <bpmn:sequenceFlow id="SequenceFlow_1k9tc68" name="code cloture intervention = [46,47,49] alors rétractation du client" sourceRef="ExclusiveGateway_0hqdqt4" targetRef="ExclusiveGateway_0im067l">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnPlanifStatus== 'CANCELED_INTERVENTION'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:intermediateCatchEvent id="IntermediateThrowEvent_16fwh55">
      <bpmn:incoming>SequenceFlow_087fep6</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1ak2grk</bpmn:outgoing>
      <bpmn:messageEventDefinition id="MessageEventDefinition_0548889" messageRef="Message_1g82wb4" />
    </bpmn:intermediateCatchEvent>
    <bpmn:serviceTask id="ServiceTask_0ht1wab" name="Update data Customer and Site" camunda:asyncBefore="true">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/orders/updateDataCustomer'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"order":' + execution.getVariable('subscription') + ',"endInstallationOrder":' + execution.getVariable('endInstallationEvent')+ ',"toolPlanificationDto":' + execution.getVariable('toolPlanificationDto') +',"zammadTicket":' + execution.getVariable('zammadTicket') +',"userZammadId":' + execution.getVariable('userZammadId')
+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('Update data Customer and Site api');
var resp = connector.getVariable('response')
print('resp create keycloak account' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

/* get activity id from parent*/
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
/*end get activity id from parent*/

execution.setVariable('updateDataError',false);

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS");
execution.setVariable('responseMessage',response);

// Clean up retries if successful
execution.removeVariable("retries");
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/

  var retries = execution.getVariable("retries");
  if (retries == null) {
    // First failure, set retries to 2 (out of 3)
    execution.setVariable("retries", 2);
  } else if (retries &lt;= 0) {
    // No retries left - Do cleanup
    execution.removeVariable("retries");
  }

  if (retries &lt;= 0) {
    execution.setVariable('updateDataError', true);
  } else {
    throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
  }
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1fapwf1</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0f0egpk</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_198mzgz</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:inclusiveGateway id="InclusiveGateway_092z1zu">
      <bpmn:incoming>SequenceFlow_1243q96</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1ikrofp</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_087fep6</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:userTask id="UserTask_0pe5t1e" name="Review Task">
      <bpmn:incoming>SequenceFlow_0ozfs0j</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_070tlyn</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0fhfgi6">
      <bpmn:incoming>SequenceFlow_0ri1tqd</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1fapwf1</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0ozfs0j</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_1ikrofp" name="access not necessary&#10;" sourceRef="InclusiveGateway_092z1zu" targetRef="Activity_0wvb3x4">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_070tlyn" sourceRef="UserTask_0pe5t1e" targetRef="Activity_0wvb3x4" />
    <bpmn:sequenceFlow id="SequenceFlow_0ri1tqd" sourceRef="Activity_0wvb3x4" targetRef="ExclusiveGateway_0fhfgi6" />
    <bpmn:sequenceFlow id="SequenceFlow_1fapwf1" sourceRef="ExclusiveGateway_0fhfgi6" targetRef="ServiceTask_0ht1wab">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!addCommentError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_198mzgz" sourceRef="ServiceTask_0ht1wab" targetRef="ExclusiveGateway_06zu91r" />
    <bpmn:sequenceFlow id="SequenceFlow_087fep6" name="acces necessary" sourceRef="InclusiveGateway_092z1zu" targetRef="IntermediateThrowEvent_16fwh55">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0ozfs0j" sourceRef="ExclusiveGateway_0fhfgi6" targetRef="UserTask_0pe5t1e">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${addCommentError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1243q96" name="VALIDATED INTERVENTION" sourceRef="ExclusiveGateway_0hqdqt4" targetRef="InclusiveGateway_092z1zu">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnPlanifStatus== 'VALIDATED_INTERVENTION'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:endEvent id="EndEvent_0pe0rya">
      <bpmn:incoming>SequenceFlow_1lrpddj</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0im067l">
      <bpmn:incoming>SequenceFlow_1k9tc68</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_06muc6x</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0zn2m3t</bpmn:outgoing>
      <bpmn:outgoing>Flow_0oxypqv</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0nl3ymy" name="Si code cloture = [46]" sourceRef="Gateway_18er72p" targetRef="Activity_09d8831">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeCloture == '46'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:receiveTask id="ReceiveTask_06v94kc" name="Waiting CRC Response" messageRef="Message_12cd20s">
      <bpmn:incoming>Flow_1yfljfa</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_00ivesh</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1268glj</bpmn:outgoing>
    </bpmn:receiveTask>
    <bpmn:sequenceFlow id="SequenceFlow_00ivesh" sourceRef="ReceiveTask_06v94kc" targetRef="Activity_08a3w7r">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${action == 'cancel'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0zn2m3t" name="Si code cloture = [41,49]" sourceRef="ExclusiveGateway_0im067l" targetRef="Activity_1m1ktyt">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeCloture == '41' || codeCloture == '49'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_17d0id1" name="code cloture intervention = 44 alors rétractation du client" sourceRef="ExclusiveGateway_02gmcxu" targetRef="Activity_1m1ktyt">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeCloture=='"44"'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1bgegbr">
      <bpmn:incoming>SequenceFlow_07htm9e</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_19end95</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1yipx0l</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_07htm9e" sourceRef="ServiceTask_16z44tb" targetRef="ExclusiveGateway_1bgegbr" />
    <bpmn:sequenceFlow id="SequenceFlow_19end95" sourceRef="ExclusiveGateway_1bgegbr" targetRef="ServiceTask_10zxbzl">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeCloture != '"25"'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1yipx0l" name="code Cloture == 25" sourceRef="ExclusiveGateway_1bgegbr" targetRef="ServiceTask_0mbw99f">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeCloture == '"25"'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1amv63v">
      <bpmn:incoming>SequenceFlow_1ak2grk</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0hfs45j</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_06muc6x</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_012ll1l</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0hfs45j" name="CANCELED_APPOINTMENT" sourceRef="ExclusiveGateway_1amv63v" targetRef="ServiceTask_0rdbqb7">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnInstallStatus== 'CANCELED_APPOINTMENT'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_06muc6x" name="CANCELED_INTERVENTION &#38;&#38; codeCloture = [41, 62]" sourceRef="ExclusiveGateway_1amv63v" targetRef="ExclusiveGateway_0im067l">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnInstallStatus=='CANCELED_INTERVENTION' &amp;&amp; (codeCloture=='41' || codeCloture=='62') }</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:receiveTask id="ReceiveTask_11ktld5" name="Waiting CRC Response" messageRef="Message_16vz4vj">
      <bpmn:incoming>SequenceFlow_1xrbmmj</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1kwze5u</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_03u3t7d</bpmn:outgoing>
    </bpmn:receiveTask>
    <bpmn:sequenceFlow id="SequenceFlow_1xrbmmj" name="Si code cloture = [47,62]" sourceRef="Gateway_18er72p" targetRef="ReceiveTask_11ktld5">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeCloture == '47' || codeCloture == '62'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_03u3t7d" name="action=confirm" sourceRef="ReceiveTask_11ktld5" targetRef="ServiceTask_1yy3pcd">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${action == 'confirm'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1kwze5u" name="action = cancel" sourceRef="ReceiveTask_11ktld5" targetRef="Activity_08a3w7r">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${action == 'cancel'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:boundaryEvent id="BoundaryEvent_0240xxl" attachedToRef="ReceiveTask_11ktld5">
      <bpmn:outgoing>SequenceFlow_0g7rvdm</bpmn:outgoing>
      <bpmn:timerEventDefinition id="TimerEventDefinition_08qxp95">
        <bpmn:timeDuration xsi:type="bpmn:tFormalExpression">P7D</bpmn:timeDuration>
      </bpmn:timerEventDefinition>
    </bpmn:boundaryEvent>
    <bpmn:sequenceFlow id="SequenceFlow_0g7rvdm" sourceRef="BoundaryEvent_0240xxl" targetRef="Activity_0rxcis3" />
    <bpmn:sequenceFlow id="SequenceFlow_1ak2grk" sourceRef="IntermediateThrowEvent_16fwh55" targetRef="ExclusiveGateway_1amv63v" />
    <bpmn:sequenceFlow id="SequenceFlow_1xyuvrw" name="code cloture intervention = 48 alors rétractation du client" sourceRef="ExclusiveGateway_02gmcxu" targetRef="Activity_0yredn1">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeCloture=='"48"'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_0e8ayg8" name="Update Quote Termination Reason">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/orders/updateQuoteTerminationReason'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"order":' + execution.getVariable('subscription')+',"terminationDto":'+execution.getVariable('terminationDto')+ ',"camundaid":"' + execution.getProcessInstanceId() +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_25965uq">
              <camunda:script scriptFormat="JavaScript">print('create ticket zammad new intervention DDR');
var resp = connector.getVariable('response')
print('resp send Installation to teamtool' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');
 execution.setVariable('zammadTicket',resp);

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0wtao1b</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_09m04hm</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_09m04hm" sourceRef="ServiceTask_0e8ayg8" targetRef="ServiceTask_11cztnz" />
    <bpmn:sequenceFlow id="SequenceFlow_1xmfvd1" sourceRef="ServiceTask_0tntycs" targetRef="ServiceTask_1l5l3kr" />
    <bpmn:exclusiveGateway id="ExclusiveGateway_0h2mfr1">
      <bpmn:incoming>Flow_1x62b51</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1j6g652</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_01d55lx</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_1268glj" sourceRef="ReceiveTask_06v94kc" targetRef="Activity_13byje6">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${action == 'confirm'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1j6g652" sourceRef="ExclusiveGateway_0h2mfr1" targetRef="ServiceTask_1yy3pcd">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeCloture!='"44"'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_01d55lx" sourceRef="ExclusiveGateway_0h2mfr1" targetRef="ServiceTask_0j9rg8a">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeCloture=='"44"'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_1ljdd1l" name="Create Emergency Contact">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb = execution.getVariable('url_crm_emergency_contact');
var quoteId = execution.getVariable('quoteId');
var order = execution.getVariable('subscription');
var contractId= S(order).prop("contractId").value();

var holder= S(order).prop("holder");
var individual= S(holder).prop("individual");
// cutomerId used as the emergency contact id.
var partnerId= S(individual).prop("partnerId").value();

url_tb + '/api/emergencyContacts/v1/camunda/quote/' + quoteId + '/contract/' + contractId + '/emergencyContact/' + partnerId</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var order = execution.getVariable('subscription');
var holder = S(order).prop("holder");
var individual = S(holder).prop("individual");
var title = S(individual).prop("title").value();
var firstName = S(individual).prop("firstName").value();
var lastName = S(individual).prop("lastName").value();
var contactInformation = S(individual).prop("contactInformation");
var email = S(contactInformation).prop("email").value();
var mobile = S(contactInformation).prop("mobile").value();

'{"email":"' + email + '"' +
',"mobilePhoneNumber":"' + mobile + '"' +
',"title":"' + title + '"' +
',"rank": 1' +
',"firstName":"' + firstName + '"' +
',"lastName":"' + lastName +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29vr0j2">
              <camunda:script scriptFormat="JavaScript">print('create emergency contact api');
var resp = connector.getVariable('response')
print('resp create emergency contact  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0u745j8</bpmn:incoming>
      <bpmn:outgoing>Flow_1tmof1y</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1tmof1y" sourceRef="Activity_1ljdd1l" targetRef="Activity_1lrrmxh" />
    <bpmn:serviceTask id="ServiceTask_1l5l3kr" name="create customer ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
url_tb+'/api/support/v1/customer'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var seller = execution.getVariable('seller');
var order = execution.getVariable('subscription');
var holder = S(order).prop("holder");
var individual = S(holder).prop("individual");
var contactInformation = S(individual).prop("contactInformation");
var customerCode = S(individual).prop("partnerId").value();
var email = S(contactInformation).prop("email").value();
var firstName = S(individual).prop("firstName").value();
var lastName = S(individual).prop("lastName").value();

print('create customer ticket api' + email +'//'+ customerCode +'//'+ seller +'//'+ firstName+'//'+ lastName);
'{"email":"' + email + '"' +
',"customerCode":"' + customerCode + '"' +
',"seller":"' + seller + '"' +
',"userCreatorEmail": "gestionnaireevent@protectline.fr"' +
',"firstName":"' + firstName + '"' +
',"lastName":"' + lastName +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_37ll4fe">
              <camunda:script scriptFormat="JavaScript">print('create customer ticket api');
var resp = connector.getVariable('response')
print('resp create customer ticket ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1xmfvd1</bpmn:incoming>
      <bpmn:outgoing>Flow_1x1xx81</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1lrrmxh" name="create ticket new intervention">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
url_tb+'/api/support/v1/ticket/create'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var organizationId = execution.getVariable('organizationId');
var order = execution.getVariable('subscription');
var idSubscription = S(order).prop("contractId").value();
var holder = S(order).prop("holder");
var individual = S(holder).prop("individual");
var partnerId = S(individual).prop("partnerId").value();

print('create customer ticket api' + partnerId +'//'+ organizationId +'//'+ idSubscription);

'{"customerId":"' + partnerId + '"' +
',"description":"Première commande client avec installation du pack et des options souscrites"' +
',"event":"order_subscription"' +
',"groupId": 14' +
',"organizationId":"' + organizationId + '"' +
',"ownerId": 1' +
',"priorityId": 2' +
',"stateId": 2' +
',"subscriptionId":"' + idSubscription + '"' +
',"ticketCreationSource":"CAMUNDA"' +
',"title":"Première commande client"' +
',"topSi": true' +
',"type": "customer_event"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_25965uq">
              <camunda:script scriptFormat="JavaScript">print('create ticket new intervention');
var resp = connector.getVariable('response')
print('resp send Installation to teamtool' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

 var ticketId = S(resp).prop("ticketId").value();
 var ticketNum = S(resp).prop("ticketNum").value();
 execution.setVariable('ticketId',ticketId);
 execution.setVariable('ticketNum',ticketNum);

var zammadTicket ='{"id":'+ticketId+',"number":"'+ticketNum+'"}';
execution.setVariable('zammadTicket',zammadTicket );

print('create ticket zammadTicket : ' + zammadTicket );

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1tmof1y</bpmn:incoming>
      <bpmn:outgoing>Flow_0q39pgn</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1ix55n2" name="Add comment Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var ticketNum= "N° de DI : " + execution.getVariable('ticketNum');
'{"comment":"' + ticketNum + '"' +
',"email":"gestionnaireevent@protectline.fr"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_25965uq">
              <camunda:script scriptFormat="JavaScript">print('***Update ticket-Order received');
var resp = connector.getVariable('response')
print('resp send Installation to teamtool' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1isnn3s</bpmn:incoming>
      <bpmn:incoming>Flow_1blf9yf</bpmn:incoming>
      <bpmn:incoming>Flow_0ll1f6a</bpmn:incoming>
      <bpmn:outgoing>Flow_04lor2f</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0q39pgn" sourceRef="Activity_1lrrmxh" targetRef="Gateway_11x4r1e" />
    <bpmn:serviceTask id="ServiceTask_11cztnz" name="create ticket new intervention DDR">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
url_tb+'/api/support/v1/ticket/create'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var organizationId = execution.getVariable('organizationId');
var order = execution.getVariable('subscription');
var idSubscription = S(order).prop("contractId").value();
var holder = S(order).prop("holder");
var individual = S(holder).prop("individual");
var partnerId = S(individual).prop("partnerId").value();

'{"customerId":"' + partnerId + '"' +
',"description":"Suite à la défense de résiliation, le client a demandé un nouveau créneau de RDV pour effectuer sa première installation."' +
',"event":"défense de résiliation::génération d’une nouvelle intervention"' +
',"groupId": 14' +
',"organizationId":"' + organizationId + '"' +
',"ownerId": 1' +
',"priorityId": 2' +
',"stateId": 2' +
',"subscriptionId":"' + idSubscription + '"' +
',"ticketCreationSource":"CAMUNDA"' +
',"title":"Défense de résiliation - Génération d’une nouvelle intervention"' +
',"topSi": true' +
',"type": "customer_event"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_25965uq">
              <camunda:script scriptFormat="JavaScript">print('create ticket new intervention DDR');
var resp = connector.getVariable('response')
print('resp send Installation to teamtool' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');
 var ticketId = S(resp).prop("ticketId").value();
 var ticketNum = S(resp).prop("ticketNum").value();
 execution.setVariable('ticketId',ticketId);
 execution.setVariable('ticketNum',ticketNum);

var zammadTicket ='{"id":'+ticketId+',"number":"'+ticketNum+'"}';
execution.setVariable('zammadTicket',zammadTicket );

print('create ticket zammadTicket : ' + zammadTicket );

var order = S(execution.getVariable('subscription'));
if (order.hasProp("idAppointment")) {
  order.deleteProp("idAppointment");
}
execution.setVariable('subscription', order.toString())

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_09m04hm</bpmn:incoming>
      <bpmn:outgoing>Flow_1isnn3s</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1isnn3s" sourceRef="ServiceTask_11cztnz" targetRef="Activity_1ix55n2" />
    <bpmn:serviceTask id="Activity_1745xa9" name="Close Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"stateId":4}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('***Close and comment Ticket***');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0y193wa</bpmn:incoming>
      <bpmn:outgoing>Flow_0wtao1b</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_08a3w7r" name="Close and comment Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var comment = "rétractation annulée. Une nouvelle intervention va être envoyée à TeamTool Planif   ";
var planner = execution.getVariable('emailCRC');

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('***Close and comment Ticket***');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1kwze5u</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_00ivesh</bpmn:incoming>
      <bpmn:outgoing>Flow_0y193wa</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0wtao1b" sourceRef="Activity_1745xa9" targetRef="ServiceTask_0e8ayg8" />
    <bpmn:sequenceFlow id="Flow_0y193wa" sourceRef="Activity_08a3w7r" targetRef="Activity_1745xa9" />
    <bpmn:serviceTask id="ServiceTask_167ar44" name="Add Comment Ticket unreachableCustomer">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");
var unreachableCustomer = S(subscription).prop("unreachableCustomer");

var numberOfCalls = S(unreachableCustomer).prop("numberOfCalls").value();
var recall = S(unreachableCustomer).prop("recall").value();
var planner = S(unreachableCustomer).prop("planner").value();
var comment = "Client injoignable : " + "\\n" + " nombre d’appel effectué :  " + numberOfCalls + "\\n" + "Date de rappel prévu : " + recall;

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***unreachableCustomer*** Add Comment Ticket***');
var resp = connector.getVariable('response')
print('resp unreachableCustomer*** Add Comment Ticket  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_058t5ay</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1wkv645</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0rdbqb7" name="Add Comment Ticket cancel Appoiment">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");
var cancelAppointment = S(subscription).prop("cancelAppointment");

var reasonCode = S(cancelAppointment).prop("reasonCode").value();
var reasonLabel = S(cancelAppointment).prop("reasonLabel").value();
var planner = S(cancelAppointment).prop("planner").value();
var comment = "Annulation du RDV : " + reasonCode + " - " + reasonLabel;

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***CancelAppointment *** Add Comment Ticket***');
var resp = connector.getVariable('response')
print('resp CancelAppointment *** Add Comment Ticket  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0hfs45j</bpmn:incoming>
      <bpmn:outgoing>Flow_0hyw2ll</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0hyw2ll" sourceRef="ServiceTask_0rdbqb7" targetRef="IntermediateCatchEvent_1xyjras" />
    <bpmn:serviceTask id="Activity_0wvb3x4" name="Add Comment Ticket validated intervention" camunda:asyncAfter="true">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");
var validatedIntervention = S(subscription).prop("validatedIntervention");

var installationDate = S(validatedIntervention).prop("installationDate").value();
var installer = S(validatedIntervention).prop("installer").value();
var planner = S(validatedIntervention).prop("planner").value();
var comment = "Intervention planifiée pour le "+installationDate+" et réalisée par "+installer;

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***validated intervention*** Add Comment Ticket***');
var resp = connector.getVariable('response');
print('resp validatedIntervention*** Add Comment Ticket  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
execution.setVariable('addCommentError',false);
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
execution.setVariable('addCommentError',true);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_070tlyn</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1ikrofp</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0ri1tqd</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_1y59boe" name="reassignment">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"groupId":23}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('create order api reassignment');
var resp = connector.getVariable('response')
print('resp create order reassignment' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0qre41e</bpmn:incoming>
      <bpmn:outgoing>Flow_1yfljfa</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_1m1ktyt" name="Comment Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var endInstallationOrder = execution.getVariable('endInstallationEvent');
var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");

// Valeurs par défaut
var validationPlanner = "gestionnaireevent@protectline.fr";
var cancelPlanner = "gestionnaireevent@protectline.fr";
var comment = "";
var planner = "";

// Récupération du planner de l'intervention validée
if (subscription.hasProp("validatedIntervention")) {
  var validatedIntervention = subscription.prop("validatedIntervention");
  if (validatedIntervention != null) {
    var validatedPlannerValue = validatedIntervention.prop("planner").value();
    if (validatedPlannerValue != null) {
      validationPlanner = validatedPlannerValue;
    }
  }
}

// Récupération du planner de l'intervention annulée
if (subscription.hasProp("cancelIntervention")) {
  var cancelIntervention = subscription.prop("cancelIntervention");
  if (cancelIntervention != null &amp;&amp; cancelIntervention.hasProp("planner")) {
    var cancelPlannerValue = cancelIntervention.prop("planner").value();
    if (cancelPlannerValue != null) {
      cancelPlanner = cancelPlannerValue;
    }
  }
}

// Récupération des informations si outil planification existe et pas de endInstallationOrder
if (toolPlanificationDto != null &amp;&amp; endInstallationOrder == null) {
  var cancelIntervention = subscription.prop("cancelIntervention");
  if (cancelIntervention != null) {
    var reasonCode = cancelIntervention.prop("reasonCode").value();

    if (reasonCode == 41) {
      comment = reasonCode + " Commande annulée par le client auprès de la planification le jour J - effectuer la défense de résiliation pour soit résilier définitivement soit relancer un rdv via TeamTool Planification.";
      planner = cancelPlanner;
    } else if (reasonCode == 49) {
      comment = reasonCode + " Client se rétracte lors de la prise\nRDV - effectuer la défense de résiliation pour soit résilier définitivement soit relancer un rdv via TeamTool Planification.";
      planner = cancelPlanner;
    }
  }
}
// Sinon, si intervention terminée avec code 44
else if (endInstallationOrder != null) {
  var statusCode = S(endInstallationOrder).prop("status.statusCode").value();
  if (statusCode == 44) {
    comment = statusCode + " Commande annulée\npar le client - auprès du technicien après son arrivée - effectuer la défense de résiliation pour soit résilier définitivement soit relancer un rdv via TeamTool Planification.";
    planner = validationPlanner;
  }
}

// Affichage logs pour debug
print('******comment** : ' + comment);
print('******email*** : ' + planner);

// JSON de sortie
'{"comment":"' + comment + '","email":"' + planner + '"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('Comment Ticket 41,49 or 44');
var resp = connector.getVariable('response')
print('Comment Ticket 41,49 or 44 : ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_17d0id1</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0zn2m3t</bpmn:incoming>
      <bpmn:outgoing>Flow_0qre41e</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0qre41e" sourceRef="Activity_1m1ktyt" targetRef="ServiceTask_1y59boe" />
    <bpmn:sequenceFlow id="Flow_1yfljfa" sourceRef="ServiceTask_1y59boe" targetRef="ReceiveTask_06v94kc" />
    <bpmn:serviceTask id="ServiceTask_15w8uuj" name="Comment Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var endInstallationOrder = execution.getVariable('endInstallationEvent');
var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var planner = "gestionnaireevent@protectline.fr";	

if(endInstallationOrder != null){
	var status = S(endInstallationOrder).prop("status");
	var statusDescription = S(status).prop("statusDescription").value();
	var statusCode = S(status).prop("statusCode").value();
}	
if(endInstallationOrder != null &amp;&amp; statusDescription != null &amp;&amp; (statusCode == "25" || statusCode == "0")){
  if(S(status).hasProp("avenantURL")){
  var avenantURL = S(status).prop("avenantURL").value();}
  if(S(status).hasProp("criURL")){
  var criURL = S(status).prop("criURL").value();}
	if(criURL != null &amp;&amp; avenantURL != null){
	var comment = statusCode + " : " + statusDescription + "\\n"+
				  "URL CRI : " + new java.net.URI(criURL).toURL() + "\\n"+
				  "URL Avenant : " + new java.net.URI(avenantURL).toURL() ;
	var planner = "gestionnaireevent@protectline.fr";
	}else if(criURL != null &amp;&amp; avenantURL == null){
	var comment = statusCode + " : " + statusDescription + "\\n"+
				  "URL CRI : " + new java.net.URI(criURL).toURL();
	var planner = "";
	}else if(criURL == null &amp;&amp; avenantURL != null){
	var comment = statusCode + " : " + statusDescription + "\\n"+
				  "URL Avenant : " + new java.net.URI(avenantURL).toURL() ;
	var planner = "gestionnaireevent@protectline.fr";			  
	}else {
	var comment = statusCode + " : " + statusDescription ;
	var planner = "gestionnaireevent@protectline.fr";
	}
}else if(endInstallationOrder != null &amp;&amp; statusDescription != null &amp;&amp; (statusCode == "44" || statusCode == "48")){
	var comment = "Rétractation pendant l’installation :   " +statusCode + "  " + statusDescription;
	var planner = "gestionnaireevent@protectline.fr";
}else if(toolPlanificationDto != null){
	var subscription = S(toolPlanificationDto).prop("subscription");
	var cancelIntervention = S(subscription).prop("cancelIntervention");
	var reasonCode = S(cancelIntervention).prop("reasonCode").value();
	var reasonLabel = S(cancelIntervention).prop("reasonLabel").value();
	var comment = "Rétractation pendant la planification :  " + reasonCode + " : " + reasonLabel;
	var planner = S(cancelIntervention).prop("planner").value();
}

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('***Close and comment Ticket***');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1hj6n34</bpmn:incoming>
      <bpmn:outgoing>Flow_1hlca9m</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_1ymwy02" name="Close Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"stateId":4}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('***Close and comment Ticket***');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1hlca9m</bpmn:incoming>
      <bpmn:outgoing>Flow_00pow13</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1hlca9m" sourceRef="ServiceTask_15w8uuj" targetRef="ServiceTask_1ymwy02" />
    <bpmn:sequenceFlow id="Flow_00pow13" sourceRef="ServiceTask_1ymwy02" targetRef="EndEvent_1al4v7z" />
    <bpmn:serviceTask id="ServiceTask_1p3ok1t" name="reassignment ticket to CRC Niv 1">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"groupId":2}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('reassignment ticket to CRC Niv 1');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0xlhwu4</bpmn:incoming>
      <bpmn:outgoing>Flow_1rkzeu0</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1rkzeu0" sourceRef="ServiceTask_1p3ok1t" targetRef="ServiceTask_0j9rg8a" />
    <bpmn:serviceTask id="ServiceTask_0mbw99f" name="Comment Ticket before reassignment">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var endInstallationOrder = execution.getVariable('endInstallationEvent');
var status = S(endInstallationOrder).prop("status");
var statusDescription = S(status).prop("statusDescription").value();
var statusCode = S(status).prop("statusCode").value();
var comment = statusCode + " : " + statusDescription ;
if(endInstallationOrder != null){
 comment = "Rappeler le client pour effectuer les manipulations avec lui";
}
var planner = "gestionnaireevent@protectline.fr";
var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
if(toolPlanificationDto != null){
var subscription = S(toolPlanificationDto).prop("subscription");
  if(S(subscription).hasProp("validatedIntervention")){
	var validatedIntervention = S(subscription).prop("validatedIntervention");
	planner = S(validatedIntervention).prop("planner").value();
	}
}
'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('Comment Ticket before reassignment');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1yipx0l</bpmn:incoming>
      <bpmn:outgoing>Flow_05zujux</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0g43oha" name="reassignment ticket to CRC Niv 2">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"groupId":7}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('reassignment ticket to CRC Niv 2');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_05zujux</bpmn:incoming>
      <bpmn:outgoing>Flow_02kbacq</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_108dyw1" name="Comment Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var endInstallationOrder = execution.getVariable('endInstallationEvent');
var status = S(endInstallationOrder).prop("status");
var statusDescription = S(status).prop("statusDescription").value();
var statusCode = S(status).prop("statusCode").value();
var comment = statusCode + " : " + statusDescription ;
var planner = "gestionnaireevent@protectline.fr";

if (S(status).hasProp("criURL")) {
  var criURL = S(status).prop("criURL").value();
  comment = comment + "\\n" + "URL CRI : " + new java.net.URI(criURL).toURL();
}
if (S(status).hasProp("avenantURL")) {
  var avenantURL = S(status).prop("avenantURL").value();
  comment = comment + "\\n" + "URL Avenant : " + new java.net.URI(avenantURL).toURL();
}

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('Comment Ticket cas 25 : ');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_02kbacq</bpmn:incoming>
      <bpmn:outgoing>Flow_1kidmru</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_05zujux" sourceRef="ServiceTask_0mbw99f" targetRef="ServiceTask_0g43oha" />
    <bpmn:sequenceFlow id="Flow_02kbacq" sourceRef="ServiceTask_0g43oha" targetRef="ServiceTask_108dyw1" />
    <bpmn:sequenceFlow id="Flow_1kidmru" sourceRef="ServiceTask_108dyw1" targetRef="EndEvent_0t3dz3m" />
    <bpmn:serviceTask id="ServiceTask_10zxbzl" name="Comment Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var endInstallationOrder = execution.getVariable('endInstallationEvent');
var toolPlanificationDto = execution.getVariable('toolPlanificationDto');

if(endInstallationOrder != null){
	var status = S(endInstallationOrder).prop("status");
	var statusDescription = S(status).prop("statusDescription").value();
	var statusCode = S(status).prop("statusCode").value();
}	
if(endInstallationOrder != null &amp;&amp; statusDescription != null &amp;&amp; (statusCode == "25" || statusCode == "0")){
  if(S(status).hasProp("avenantURL")){
  var avenantURL = S(status).prop("avenantURL").value();}
  if(S(status).hasProp("criURL")){
  var criURL = S(status).prop("criURL").value();}
	if(criURL != null &amp;&amp; avenantURL != null){
	var comment = statusCode + " : " + statusDescription + "\\n"+
				  "URL CRI : " + new java.net.URI(criURL).toURL() + "\\n"+
				  "URL Avenant : " + new java.net.URI(avenantURL).toURL() ;
	var planner = "gestionnaireevent@protectline.fr";
	}else if(criURL != null &amp;&amp; avenantURL == null){
	var comment = statusCode + " : " + statusDescription + "\\n"+
				  "URL CRI : " + new java.net.URI(criURL).toURL();
	var planner = "";
	}else if(criURL == null &amp;&amp; avenantURL != null){
	var comment = statusCode + " : " + statusDescription + "\\n"+
				  "URL Avenant : " + new java.net.URI(avenantURL).toURL() ;
	var planner = "gestionnaireevent@protectline.fr";			  
	}else {
	var comment = statusCode + " : " + statusDescription ;
	var planner = "gestionnaireevent@protectline.fr";
	}
}else if(endInstallationOrder != null &amp;&amp; statusDescription != null &amp;&amp; (statusCode == "44" || statusCode == "48")){
	var comment = "Rétractation pendant l’installation :   " +statusCode + "  " + statusDescription;
	var planner = "gestionnaireevent@protectline.fr";
}else if(toolPlanificationDto != null){
	var subscription = S(toolPlanificationDto).prop("subscription");
	if(S(subscription).hasProp("cancelIntervention")){
	var cancelIntervention = S(subscription).prop("cancelIntervention");
	var reasonCode = S(cancelIntervention).prop("reasonCode").value();
	var reasonLabel = S(cancelIntervention).prop("reasonLabel").value();
	var comment = "Rétractation pendant la planification :  " + reasonCode + " : " + reasonLabel;
	var planner = S(cancelIntervention).prop("planner").value();
  }
}
'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('Comment Ticket cas #25 ');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_19end95</bpmn:incoming>
      <bpmn:outgoing>Flow_0yck9xp</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0mia1ct" name="Close Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"stateId":4}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('***Close and comment Ticket***');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0yck9xp</bpmn:incoming>
      <bpmn:outgoing>Flow_0aabg45</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0yck9xp" sourceRef="ServiceTask_10zxbzl" targetRef="ServiceTask_0mia1ct" />
    <bpmn:sequenceFlow id="Flow_0aabg45" sourceRef="ServiceTask_0mia1ct" targetRef="EndEvent_0t3dz3m" />
    <bpmn:serviceTask id="Activity_1mgqrxn" name="Add new contractId to customer">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb = execution.getVariable('url_crm_customer');

url_tb + '/api/customer/v1/contractId/add'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PUT</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var order = execution.getVariable('subscription');
var contractId= S(order).prop("contractId").value();
var holder= S(order).prop("holder");
var individual= S(holder).prop("individual");
var customerCode= S(individual).prop("partnerId").value();

'{"customerCode":"' + customerCode + '"' +
',"contractCode":"' + contractId +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29vr0j2">
              <camunda:script scriptFormat="JavaScript">print('add new contractId to customer');
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1tvy4y1</bpmn:incoming>
      <bpmn:outgoing>Flow_15t3j23</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="Gateway_1iwu3f9" default="Flow_1nc1g8x">
      <bpmn:incoming>Flow_0l08du4</bpmn:incoming>
      <bpmn:outgoing>Flow_17pms5i</bpmn:outgoing>
      <bpmn:outgoing>Flow_1nc1g8x</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_17pms5i" name="oui" sourceRef="Gateway_1iwu3f9" targetRef="Activity_0ox9vxb">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">var order = execution.getVariable('subscription');
var discountCodes = S(order).prop("discountCodes");

!(discountCodes.isNull() || discountCodes.elements().isEmpty())</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1nc1g8x" name="non" sourceRef="Gateway_1iwu3f9" targetRef="Gateway_08daxb3" />
    <bpmn:serviceTask id="Activity_0ox9vxb" name="Apply Discount from initial order">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_customer');
var order = execution.getVariable('subscription');
var holder = S(order).prop("holder");
var individual = S(holder).prop("individual");
var billingAccountCode = S(individual).prop("partnerId").value();

url_tb+'/api/customer/v1/billingAccount/'+billingAccountCode+'/discounts'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var order = execution.getVariable('subscription');
var discountCodes = S(order).prop("discountCodes").elements();
var discountPlanForInstantiation = S("[]");

for (var i=0; i &lt; discountCodes.size(); i++) {
  var discount = discountCodes.get(i);
  var code = discount.prop("code").value();
  discount.prop("discountPlanid", code);

  discountPlanForInstantiation.append(discount);
}

'{"discountPlan":' + discountPlanForInstantiation.toString() +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_26rmte6">
              <camunda:script scriptFormat="JavaScript">print('Apply discount');
var resp = connector.getVariable('response')
print('resp Apply discount' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_17pms5i</bpmn:incoming>
      <bpmn:outgoing>Flow_0rgsc4a</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0rgsc4a" sourceRef="Activity_0ox9vxb" targetRef="Gateway_08daxb3" />
    <bpmn:exclusiveGateway id="Gateway_08daxb3">
      <bpmn:incoming>Flow_0rgsc4a</bpmn:incoming>
      <bpmn:incoming>Flow_1nc1g8x</bpmn:incoming>
      <bpmn:outgoing>Flow_053xld8</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_053xld8" sourceRef="Gateway_08daxb3" targetRef="Activity_1jwsiox" />
    <bpmn:inclusiveGateway id="Gateway_1x3o730">
      <bpmn:incoming>Flow_19uegjq</bpmn:incoming>
      <bpmn:outgoing>Flow_00vr8x2</bpmn:outgoing>
      <bpmn:outgoing>Flow_1a02qe8</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:sequenceFlow id="Flow_00vr8x2" name="non" sourceRef="Gateway_1x3o730" targetRef="ServiceTask_1vau0gn">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_0t04oj2" name="Get Discount Available">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_catalog');
url_tb+'/api/catalog/v1/catalogManagement/discounts/available'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">print('Get Discount Available');
var userAccountCode = null;
var contractId = null;
var endInstallationOrder = execution.getVariable('endInstallationEvent');
if(endInstallationOrder != null){
	var user = S(endInstallationOrder).prop("user");
	if(user  != null &amp;&amp; S(user).hasProp("code")){
		userAccountCode = S(user).prop("code").value();
	}
	var subscription = S(endInstallationOrder).prop('subscription');  
	if(subscription  != null &amp;&amp; S(subscription).hasProp("code")){  
		contractId = S(subscription).prop("code").value();
	}
}
var amendment = execution.getVariable('amendment');
if(amendment  != null &amp;&amp; S(amendment).hasProp("serviceInstance")){
	var serviceInstance = S(amendment).prop("serviceInstance").elements();
	var serviceTemplates = S("[]");
	for (var i=0; i &lt; serviceInstance.size(); i++) {
		var service = S("{}").prop("code", serviceInstance[i].prop("code").value());
		service.prop("pricingDate", serviceInstance[i].prop("subscriptionDate").value());
		serviceTemplates.append(service);
	}
}

'{"userAccountCode":"' + userAccountCode + '"' +
',"contractId":"' + contractId + '"' +
',"serviceTemplates":' + serviceTemplates.toString() +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('*************Get Discount Available************');
var resp = connector.getVariable('response')
print('resp Get Discount Available  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)

if(resp != null &amp;&amp; S(resp).hasProp("serviceTemplates")){
	var serviceTemplates = S(resp).prop("serviceTemplates").elements();
	var discountAmendmentToApply = S("[]");
	for (var i=0; i &lt; serviceTemplates.size(); i++) {
		if(serviceTemplates[i].hasProp("discountsAvailable")){
			var discountsAvailable = serviceTemplates[i].prop("discountsAvailable").elements();
			for (var j=0; j &lt; discountsAvailable.size(); j++) {				
				discountAmendmentToApply.append(discountsAvailable[j]);
			}
		}		
	}
execution.setVariable('discountAmendmentToApply',discountAmendmentToApply)	
}	
	

} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_09xlkqw</bpmn:incoming>
      <bpmn:outgoing>Flow_0pltnfr</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0pltnfr" sourceRef="Activity_0t04oj2" targetRef="Activity_00yb2fn" />
    <bpmn:serviceTask id="Activity_00yb2fn" name="Apply Discount new options from installation">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_customer');
var order = execution.getVariable('subscription');
var holder = S(order).prop("holder");
var individual = S(holder).prop("individual");
var billingAccountCode = S(individual).prop("partnerId").value();

url_tb+'/api/customer/v1/billingAccount/'+billingAccountCode+'/discounts'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var discountAmendmentToApply = execution.getVariable('discountAmendmentToApply');
var discountPlanForInstantiation = S("[]");
if(discountAmendmentToApply != null){
	var discountCodes = discountAmendmentToApply.elements();
	for (var i=0; i &lt; discountCodes.size(); i++) {
	  var discountCodeNode = S("{}").prop("discountPlanid", discountCodes[i].prop("discountPlanCode").value());
	  discountPlanForInstantiation.append(discountCodeNode);
	}
}
'{"discountPlan":' + discountPlanForInstantiation.toString() +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('*************Apply Discount API ************');
var resp = connector.getVariable('response')
print('resp create emergency contact  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0pltnfr</bpmn:incoming>
      <bpmn:outgoing>Flow_16jh4u6</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_16jh4u6" sourceRef="Activity_00yb2fn" targetRef="EndEvent_0ihoxab" />
    <bpmn:scriptTask id="Activity_1jwsiox" name="get amendment data" scriptFormat="Javascript">
      <bpmn:incoming>Flow_053xld8</bpmn:incoming>
      <bpmn:outgoing>Flow_19uegjq</bpmn:outgoing>
      <bpmn:script>print('get amendment data');
var amendmentBo = false;
var endInstallationOrder = execution.getVariable('endInstallationEvent');
if(endInstallationOrder != null){
	var status = S(endInstallationOrder).prop("status");
	if(status  != null &amp;&amp; S(status).hasProp("avenantURL")){
	  var avenantURL = S(status).prop("avenantURL").value();
	  if(avenantURL != null ){
		var subscription = S(endInstallationOrder).prop('subscription');  
		if(subscription  != null &amp;&amp; S(subscription).hasProp("services")){  
			var services = S(subscription).prop("services");
			if(services  != null &amp;&amp; S(services).hasProp("serviceInstance")){
				var serviceInstance = S(services).prop("serviceInstance").elements();
				var serviceTemplates = S("[]");
				for (var i=0; i &lt; serviceInstance.size(); i++) {
				  var subscriptionDate = serviceInstance[i].prop("subscriptionDate").value();
				  var installationDate = serviceInstance[i].prop("installationDate").value();
				  var mandatory = serviceInstance[i].prop("mandatory").value();
				  if(subscriptionDate == installationDate &amp;&amp; mandatory == false){
					 var service = S("{}").prop("code", serviceInstance[i].prop("code").value());
service.prop("subscriptionDate", serviceInstance[i].prop("subscriptionDate").value());				  	serviceTemplates.append(service);
				  }
				}
				if(serviceTemplates.elements() != null &amp;&amp; serviceTemplates.elements().size() &gt; 0){
					amendmentBo = true;
				}
			} 
		}  		
	  }
	}
}
var amendment = S("{}");
if(amendmentBo == true){
	amendment.prop("amendment", amendmentBo);
	amendment.prop("serviceInstance", serviceTemplates);
}else{
	amendment.prop("amendment", amendmentBo);
}
execution.setVariable('amendment',amendment);
print('get amendment : ' + amendment);</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_19uegjq" sourceRef="Activity_1jwsiox" targetRef="Gateway_1x3o730" />
    <bpmn:serviceTask id="Activity_0yredn1" name="Send Notification Withdrawal Contract">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscription = execution.getVariable('subscription');
var id = S(subscription).prop("id").value();
var productOffering = S(subscription).prop("productOffering").value();
var contractId = S(subscription).prop("contractId").value();
var channel = S(subscription).prop("channel");
var organisationSellerId = S(channel).prop("organisationSellerId").value();
var holder = S(subscription).prop("holder");
var individual = S(holder).prop("individual");
var nomSeul = S(individual).prop("lastName").value();
var civilite = S(individual).prop("title").value();
var contactInformation = S(individual).prop("contactInformation");
var email = S(contactInformation).prop("email").value();
var mobile = S(contactInformation).prop("mobile").value();
var isInstallation = false;

'{"nomOffreOuOption":"' + productOffering + '"' +
',"contractId":"' + contractId + '"' +
',"customerId":"' + id + '"' +
',"seller":"' + organisationSellerId + '"' +
',"identifiant":"' + id + '"' +
',"nomSeul":"' + nomSeul + '"' +
',"civilite":"' + civilite + '"' +
',"mobile":"' + mobile + '"' +
',"isInstallation":"' + isInstallation + '"' +
',"email":"' + email +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_notifications');
url_tb+'/api/v1/notifications/email/retract'</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0117i79">
              <camunda:script scriptFormat="JavaScript">print('Send notification first invoice');
var resp = connector.getVariable('response')
print('resp Send notification first invoice  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1xyuvrw</bpmn:incoming>
      <bpmn:outgoing>Flow_0xlhwu4</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0xlhwu4" sourceRef="Activity_0yredn1" targetRef="ServiceTask_1p3ok1t" />
    <bpmn:serviceTask id="Activity_0rxcis3" name="Send Notification Withdrawal Contract">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscription = execution.getVariable('subscription');
var id = S(subscription).prop("id").value();
var productOffering = S(subscription).prop("productOffering").value();
var contractId = S(subscription).prop("contractId").value();
var channel = S(subscription).prop("channel");
var organisationSellerId = S(channel).prop("organisationSellerId").value();
var holder = S(subscription).prop("holder");
var individual = S(holder).prop("individual");
var nomSeul = S(individual).prop("lastName").value();
var civilite = S(individual).prop("title").value();
var contactInformation = S(individual).prop("contactInformation");
var email = S(contactInformation).prop("email").value();
var mobile = S(contactInformation).prop("mobile").value();
var isInstallation = false;

'{"nomOffreOuOption":"' + productOffering + '"' +
',"contractId":"' + contractId + '"' +
',"customerId":"' + id + '"' +
',"seller":"' + organisationSellerId + '"' +
',"identifiant":"' + id + '"' +
',"nomSeul":"' + nomSeul + '"' +
',"civilite":"' + civilite + '"' +
',"mobile":"' + mobile + '"' +
',"isInstallation":"' + isInstallation + '"' +
',"email":"' + email +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_notifications');
url_tb+'/api/v1/notifications/email/retract'</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0117i79">
              <camunda:script scriptFormat="JavaScript">print('Send notification first invoice');
var resp = connector.getVariable('response')
print('resp Send notification first invoice  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0g7rvdm</bpmn:incoming>
      <bpmn:outgoing>Flow_0wd67cl</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0wd67cl" sourceRef="Activity_0rxcis3" targetRef="ServiceTask_1yy3pcd" />
    <bpmn:serviceTask id="Activity_09d8831" name="Send Notification Withdrawal Contract">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscription = execution.getVariable('subscription');
var id = S(subscription).prop("id").value();
var productOffering = S(subscription).prop("productOffering").value();
var contractId = S(subscription).prop("contractId").value();
var channel = S(subscription).prop("channel");
var organisationSellerId = S(channel).prop("organisationSellerId").value();
var holder = S(subscription).prop("holder");
var individual = S(holder).prop("individual");
var nomSeul = S(individual).prop("lastName").value();
var civilite = S(individual).prop("title").value();
var contactInformation = S(individual).prop("contactInformation");
var email = S(contactInformation).prop("email").value();
var mobile = S(contactInformation).prop("mobile").value();
var isInstallation = false;

'{"nomOffreOuOption":"' + productOffering + '"' +
',"contractId":"' + contractId + '"' +
',"customerId":"' + id + '"' +
',"seller":"' + organisationSellerId + '"' +
',"identifiant":"' + id + '"' +
',"nomSeul":"' + nomSeul + '"' +
',"civilite":"' + civilite + '"' +
',"mobile":"' + mobile + '"' +
',"isInstallation":"' + isInstallation + '"' +
',"email":"' + email +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_notifications');
url_tb+'/api/v1/notifications/email/retract'</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0117i79">
              <camunda:script scriptFormat="JavaScript">print('Send notification first invoice');
var resp = connector.getVariable('response')
print('resp Send notification first invoice  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0nl3ymy</bpmn:incoming>
      <bpmn:outgoing>Flow_076ny4p</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_076ny4p" sourceRef="Activity_09d8831" targetRef="ServiceTask_1yy3pcd" />
    <bpmn:serviceTask id="Activity_13byje6" name="Send Notification Withdrawal Contract">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscription = execution.getVariable('subscription');
var id = S(subscription).prop("id").value();
var productOffering = S(subscription).prop("productOffering").value();
var contractId = S(subscription).prop("contractId").value();
var channel = S(subscription).prop("channel");
var organisationSellerId = S(channel).prop("organisationSellerId").value();
var holder = S(subscription).prop("holder");
var individual = S(holder).prop("individual");
var nomSeul = S(individual).prop("lastName").value();
var civilite = S(individual).prop("title").value();
var contactInformation = S(individual).prop("contactInformation");
var email = S(contactInformation).prop("email").value();
var mobile = S(contactInformation).prop("mobile").value();
var isInstallation = false;

'{"nomOffreOuOption":"' + productOffering + '"' +
',"contractId":"' + contractId + '"' +
',"customerId":"' + id + '"' +
',"seller":"' + organisationSellerId + '"' +
',"identifiant":"' + id + '"' +
',"nomSeul":"' + nomSeul + '"' +
',"civilite":"' + civilite + '"' +
',"mobile":"' + mobile + '"' +
',"isInstallation":"' + isInstallation + '"' +
',"email":"' + email +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_notifications');
url_tb+'/api/v1/notifications/email/retract'</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0117i79">
              <camunda:script scriptFormat="JavaScript">print('Send notification first invoice');
var resp = connector.getVariable('response')
print('resp Send notification first invoice  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1268glj</bpmn:incoming>
      <bpmn:outgoing>Flow_1x62b51</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1x62b51" sourceRef="Activity_13byje6" targetRef="ExclusiveGateway_0h2mfr1" />
    <bpmn:inclusiveGateway id="Gateway_0ljow5q">
      <bpmn:incoming>Flow_0g2xy8b</bpmn:incoming>
      <bpmn:outgoing>Flow_0l08du4</bpmn:outgoing>
      <bpmn:outgoing>Flow_01jeu6j</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:sequenceFlow id="Flow_0l08du4" sourceRef="Gateway_0ljow5q" targetRef="Gateway_1iwu3f9" />
    <bpmn:intermediateCatchEvent id="Event_0uegbhl">
      <bpmn:incoming>Flow_01jeu6j</bpmn:incoming>
      <bpmn:outgoing>Flow_1scy0mv</bpmn:outgoing>
      <bpmn:timerEventDefinition id="TimerEventDefinition_1ds049r">
        <bpmn:timeDuration xsi:type="bpmn:tFormalExpression">PT24H</bpmn:timeDuration>
      </bpmn:timerEventDefinition>
    </bpmn:intermediateCatchEvent>
    <bpmn:sequenceFlow id="Flow_01jeu6j" sourceRef="Gateway_0ljow5q" targetRef="Event_0uegbhl" />
    <bpmn:serviceTask id="Activity_05vkujb" name="Send notification first invoice">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var endInstallationOrder = execution.getVariable('endInstallationEvent');
var user = S(endInstallationOrder).prop("user");
var contactInformation = S(user).prop("contactInformation");
var email = S(contactInformation).prop("email").value();
var template = execution.getVariable('firstInvoiceEmailTemplate');
var from = execution.getVariable('firstInvoiceEmailSender');
var options = execution.getVariable('firstInvoiceEmailOptions');
var subject = "Explications avant réception de votre première facture";

'{"template":"' + template + '"' +
',"from":"' + from + '"' +
',"to":"' + email + '"' +
',"subject":"' + subject + '"' +
',"options":' + options +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_notifications');
url_tb+'/api/v1/notifications/email'</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0117i79">
              <camunda:script scriptFormat="JavaScript">print('Send notification first invoice');
var resp = connector.getVariable('response')
print('resp Send notification first invoice  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1scy0mv</bpmn:incoming>
      <bpmn:outgoing>Flow_03znt54</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1scy0mv" sourceRef="Event_0uegbhl" targetRef="Activity_05vkujb" />
    <bpmn:sequenceFlow id="Flow_03znt54" sourceRef="Activity_05vkujb" targetRef="EndEvent_0ihoxab" />
    <bpmn:sequenceFlow id="Flow_0oxypqv" name="Si code cloture = [46,47,62]" sourceRef="ExclusiveGateway_0im067l" targetRef="Activity_0lqaw1x">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeCloture == '46' || codeCloture == '47'  || codeCloture == '62'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="Gateway_18er72p">
      <bpmn:incoming>Flow_0e4f4nt</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0nl3ymy</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1xrbmmj</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="Activity_0lqaw1x" name="Comment Ticket&#10;46, 47, 62">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");
var cancelIntervention = S(subscription).prop("cancelIntervention");

var comment = "";
var planner = "gestionnaireevent@protectline.fr"; // valeur par défaut

if (cancelIntervention != null) {
  var reasonCode = cancelIntervention.prop("reasonCode").value();
  var reasonLabel = cancelIntervention.prop("reasonLabel").value();
  comment = reasonCode + " - " + reasonLabel;

  if (cancelIntervention.hasProp("planner")) {
    var plannerValue = cancelIntervention.prop("planner").value();
    if (plannerValue != null) {
      planner = plannerValue;
    }
  }
}

'{"comment":"' + comment + '","email":"' + planner + '"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('Comment Ticket 46 or 47');
var resp = connector.getVariable('response')
print('Comment Ticket 46 or 47: ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0oxypqv</bpmn:incoming>
      <bpmn:outgoing>Flow_0e4f4nt</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0e4f4nt" sourceRef="Activity_0lqaw1x" targetRef="Gateway_18er72p" />
    <bpmn:sequenceFlow id="Flow_1uspps4" sourceRef="IntermediateCatchEvent_1xyjras" targetRef="ExclusiveGateway_0hqdqt4" />
    <bpmn:sequenceFlow id="Flow_1ajifca" sourceRef="Activity_0j7yd49" targetRef="Gateway_09s8whq" />
    <bpmn:serviceTask id="Activity_0j7yd49" name="Create VE event">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="js">var subscription = execution.getVariable('subscription');
var holder = S(subscription).prop("holder");
var individual = S(holder).prop("individual") ;
var customerId = S(individual).prop("partnerId").value();

var contractId = S(subscription).prop("contractId").value();
var url_tb= execution.getVariable('url_crm_contract');
url_tb+'/api/contract/v2/'+customerId+'/contracts/'+contractId+'/maintenance'</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="createVeEventOuput">
              <camunda:script scriptFormat="js">print('Output Create VE event');
var resp = connector.getVariable('response')
print('resp Output Create VE event');
print(resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0sagcvr</bpmn:incoming>
      <bpmn:outgoing>Flow_1ajifca</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1y8pv6t" name="user not exist" sourceRef="ExclusiveGateway_0k999mz" targetRef="Activity_05m151g">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!userExist}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:callActivity id="Activity_05m151g" name="Create customer" calledElement="CreateCustomer">
      <bpmn:extensionElements>
        <camunda:in businessKey="#{execution.processBusinessKey}" />
        <camunda:in variables="all" />
        <camunda:out variables="all" />
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1y8pv6t</bpmn:incoming>
      <bpmn:outgoing>Flow_04ktk4j</bpmn:outgoing>
    </bpmn:callActivity>
    <bpmn:sequenceFlow id="Flow_04ktk4j" sourceRef="Activity_05m151g" targetRef="InclusiveGateway_133m7pd" />
    <bpmn:serviceTask id="Activity_01pdkvo" name="Create Order">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var subscription = execution.getVariable('subscription');
var holder = S(subscription).prop("holder");
var individual = S(holder).prop("individual") ;
var customerId = S(individual).prop("partnerId").value();
var url_tb= execution.getVariable('url_crm_contract');
url_tb+'/api/contract/v2/'+customerId+'/contracts'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscription= execution.getVariable('subscription');
var holder= S(subscription).prop("holder");
var individual= S(holder).prop("individual");
var partnerId= S(individual).prop("partnerId").value();
var idSubscription = S(subscription).prop("contractId").value();
var offerCode = S(subscription).prop("productOffering").value();

var channel = S(subscription).prop("channel");
var seller = S(channel).prop("organisationSellerId").value();
var personSellerId = S(channel).prop("personSellerId").value();
var channelLabel =S(channel).prop("label").value();
var date = S(subscription).prop("date").value();

var subscriptionAddress = S(subscription).prop("subscriptionAddress");
var locality = S(subscriptionAddress).prop("locality").value();
var postalCode = S(subscriptionAddress).prop("postalCode").value();
var countryName = S(subscriptionAddress).prop("countryName").value();
var addressLine1 = S(subscriptionAddress).prop("addressLine1").value();
var addressLine2 = S(subscriptionAddress).prop("addressLine2").value();
var addressLine3 = S(subscriptionAddress).prop("addressLine3").value();

var adressCustomer = {
"locality": locality,
"postalCode": postalCode,
"countryName": countryName,
"addressLine1": addressLine1,
"addressLine2": addressLine2,
"addressLine3": addressLine3
};

var appointmentId =  S(subscription).prop("idAppointment").value();
var endInstallationEvent = execution.getVariable('endInstallationEvent');
var status = S(endInstallationEvent).prop("status");
var statusCode = status.prop("statusCode").value();
var statusDescription = status.prop("statusDescription").value();
var services = S(endInstallationEvent).prop("subscription").prop("services").prop("serviceInstance");
var appointmentId = null;
var activationDate = null;
if (!services.elements().isEmpty()) {
  activationDate = services.jsonPath("$.[?(@.mandatory==true)]").elementList().get(0).prop("installationDate").value();
}
if(appointmentId !== null){
  appointmentId = appointmentId;
}
var installation= {"appointmentId" : appointmentId, "activationDate" : activationDate, "statusCode" : statusCode, "statusDescription" : statusDescription, "activationDate": activationDate};

var payload = {
  "code": idSubscription,
  "orderCode": idSubscription,
  "userAccount": partnerId,
  "description": idSubscription,
  "offerCode": offerCode,
  "sellerCode": seller,
  "salesperson": personSellerId,
  "channel": channelLabel,
  "subscriptionDate": date,
  "address": adressCustomer,
  "installation": installation
};

JSON.stringify(payload);</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('Output Create Order');

var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1q31cwc</bpmn:incoming>
      <bpmn:outgoing>Flow_0sagcvr</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0sagcvr" sourceRef="Activity_01pdkvo" targetRef="Activity_0j7yd49" />
    <bpmn:exclusiveGateway id="Gateway_11x4r1e" name="channel VAD">
      <bpmn:incoming>Flow_0q39pgn</bpmn:incoming>
      <bpmn:outgoing>Flow_1blf9yf</bpmn:outgoing>
      <bpmn:outgoing>Flow_1kh6pb7</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1blf9yf" name="non&#10;" sourceRef="Gateway_11x4r1e" targetRef="Activity_1ix55n2" />
    <bpmn:serviceTask id="Activity_0fcx9ib" name="Add comment Ticket doc signed">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var ticketNum= "N° de DI : " + execution.getVariable('ticketNum');
'{"comment":"' + ticketNum + '"' +
',"email":"gestionnaireevent@protectline.fr"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_25965uq">
              <camunda:script scriptFormat="JavaScript">print('***Update ticket-Order received');
var resp = connector.getVariable('response')
print('resp send Installation to teamtool' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1w1nbqj</bpmn:incoming>
      <bpmn:outgoing>Flow_0ll1f6a</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1kh6pb7" name="oui&#10;" sourceRef="Gateway_11x4r1e" targetRef="Activity_097yghs">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${subscription.channel.label == 'VAD'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0ll1f6a" sourceRef="Activity_0fcx9ib" targetRef="Activity_1ix55n2" />
    <bpmn:sequenceFlow id="Flow_1w1nbqj" sourceRef="Activity_097yghs" targetRef="Activity_0fcx9ib" />
    <bpmn:userTask id="Activity_097yghs">
      <bpmn:incoming>Flow_1kh6pb7</bpmn:incoming>
      <bpmn:outgoing>Flow_1w1nbqj</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:sequenceFlow id="Flow_1a02qe8" name="oui" sourceRef="Gateway_1x3o730" targetRef="Gateway_15ngkek">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">var amendment = execution.getVariable('amendment');
var amendmentBo = S(amendment).prop("amendment").value();

amendmentBo == true</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="Gateway_15ngkek">
      <bpmn:incoming>Flow_1a02qe8</bpmn:incoming>
      <bpmn:outgoing>Flow_09xlkqw</bpmn:outgoing>
      <bpmn:outgoing>Flow_15ebk8w</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_09xlkqw" name="Si seller = ORANGE" sourceRef="Gateway_15ngkek" targetRef="Activity_0t04oj2">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${seller=='ORANGE'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_15ebk8w" name="Si seller = GROUPAMA" sourceRef="Gateway_15ngkek" targetRef="EndEvent_0ihoxab">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${seller=='GROUPAMA'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_1a1r9y3" name="Get keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/realms/Protectline/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1tcqe5d">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1hs7whr</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_16p5imb</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_16p5imb" sourceRef="ServiceTask_1a1r9y3" targetRef="ExclusiveGateway_0k999mz" />
    <bpmn:sequenceFlow id="Flow_19y9l8k" sourceRef="Gateway_038fcb7" targetRef="IntermediateCatchEvent_1xyjras" />
    <bpmn:parallelGateway id="Gateway_038fcb7">
      <bpmn:incoming>Flow_1uiywmn</bpmn:incoming>
      <bpmn:outgoing>Flow_19y9l8k</bpmn:outgoing>
      <bpmn:outgoing>Flow_0rbzed5</bpmn:outgoing>
    </bpmn:parallelGateway>
    <bpmn:sequenceFlow id="SequenceFlow_012ll1l" sourceRef="ExclusiveGateway_1amv63v" targetRef="ExclusiveGateway_02gmcxu">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnInstallStatus!= 'CANCELED_INTERVENTION' &amp;&amp;returnInstallStatus!= 'CANCELED_APPOINTMENT'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:endEvent id="EndEvent_0bkynrv">
      <bpmn:incoming>SequenceFlow_1nydytl</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:userTask id="UserTask_04qutt7" name="Review Task">
      <bpmn:incoming>SequenceFlow_1qlmtyq</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1liz6mn</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_16wx06a">
      <bpmn:incoming>SequenceFlow_178r3dk</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1qlmtyq</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1nydytl</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_1qlmtyq" sourceRef="ExclusiveGateway_16wx06a" targetRef="UserTask_04qutt7">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${sendSmsError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1nydytl" sourceRef="ExclusiveGateway_16wx06a" targetRef="EndEvent_0bkynrv">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!sendSmsError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_1sk19ng" name="Send SMS Password">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_notifications');
url_tb+'/api/v1/notifications/sms/authent'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">print("send sms pwd");
var order = execution.getVariable('subscription');
print("order :" + order);
var channel = S(order).prop("channel");
print("channel :" + channel);
var seller = S(channel).prop("organisationSellerId").value();
print("seller :" + seller);

var holder = S(order).prop("holder");
print("holder :" + holder);
var individual = S(holder).prop("individual");
print("individual :" + individual);
var contactInfos = S(individual).prop("contactInformation");
print("contactInfos :" + contactInfos);
var mobile = S(contactInfos).prop("mobile").value();
print("mobile :" + mobile);

var keycloadUserPassword = execution.getVariable('keycloadUserPassword');
print("keycloadUserPassword :" + keycloadUserPassword);
var pwd = S(keycloadUserPassword).prop("pass").value();
print("pwd :" + pwd);

'{"mobile":"' + mobile + '"' +
',"seller":"' + seller + '"' +
',"password":"' + pwd +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0uu921g">
              <camunda:script scriptFormat="JavaScript">print('***send sms notif api***');
var resp = connector.getVariable('response')
print('send sms notif api ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

/* get activity id from parent*/
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
/*end get activity id from parent*/
execution.setVariable('sendSmsError',false);
if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else{
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
execution.setVariable('sendSmsError',true);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1liz6mn</bpmn:incoming>
      <bpmn:incoming>Flow_0paoksc</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_178r3dk</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_178r3dk" sourceRef="ServiceTask_1sk19ng" targetRef="ExclusiveGateway_16wx06a" />
    <bpmn:sequenceFlow id="SequenceFlow_1liz6mn" sourceRef="UserTask_04qutt7" targetRef="ServiceTask_1sk19ng" />
    <bpmn:sequenceFlow id="Flow_0rbzed5" sourceRef="Gateway_038fcb7" targetRef="Activity_1obacdy" />
    <bpmn:serviceTask id="Activity_0mvwdns" name="Create Quote">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_order');
url_tb+'/api/v1/orders/quote'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscription');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29vr0j2">
              <camunda:script scriptFormat="JavaScript">print('create quote api');
var resp = connector.getVariable('response')
print('resp create quote  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

/* get activity id from parent*/
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
/*end get activity id from parent*/


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
execution.setVariable('quoteId',S(resp).prop("id").value());
} else{
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/

 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1x1xx81</bpmn:incoming>
      <bpmn:incoming>Flow_15t3j23</bpmn:incoming>
      <bpmn:outgoing>Flow_0u745j8</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:parallelGateway id="InclusiveGateway_133m7pd">
      <bpmn:incoming>Flow_04ktk4j</bpmn:incoming>
      <bpmn:outgoing>Flow_0nr4fba</bpmn:outgoing>
      <bpmn:outgoing>Flow_0paoksc</bpmn:outgoing>
    </bpmn:parallelGateway>
    <bpmn:sequenceFlow id="Flow_0nr4fba" sourceRef="InclusiveGateway_133m7pd" targetRef="ServiceTask_0tntycs" />
    <bpmn:sequenceFlow id="Flow_0paoksc" sourceRef="InclusiveGateway_133m7pd" targetRef="ServiceTask_1sk19ng" />
    <bpmn:sequenceFlow id="Flow_1x1xx81" sourceRef="ServiceTask_1l5l3kr" targetRef="Activity_0mvwdns" />
    <bpmn:sequenceFlow id="Flow_0u745j8" sourceRef="Activity_0mvwdns" targetRef="Activity_1ljdd1l" />
    <bpmn:sequenceFlow id="Flow_15t3j23" sourceRef="Activity_1mgqrxn" targetRef="Activity_0mvwdns" />
    <bpmn:endEvent id="Event_1n4kv3n">
      <bpmn:incoming>Flow_16drahq</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:inclusiveGateway id="Gateway_09s8whq">
      <bpmn:incoming>Flow_1ajifca</bpmn:incoming>
      <bpmn:outgoing>Flow_00e51p0</bpmn:outgoing>
      <bpmn:outgoing>Flow_0g2xy8b</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:callActivity id="Activity_1iry2ws" name="Vérification post installation" camunda:asyncBefore="true" calledElement="tus.prc.audit.installation.main">
      <bpmn:extensionElements>
        <camunda:in businessKey="#{execution.processBusinessKey}" />
        <camunda:inputOutput>
          <camunda:inputParameter name="contractId">
            <camunda:script scriptFormat="JavaScript">var order = execution.getVariable('subscription'); S(order).prop("contractId").value()</camunda:script>
          </camunda:inputParameter>
          <camunda:inputParameter name="customerId">
            <camunda:script scriptFormat="JavaScript">var order = execution.getVariable('subscription');
var holder = S(order).prop("holder");
var individual = S(holder).prop("individual");
S(individual).prop("partnerId").value()</camunda:script>
          </camunda:inputParameter>
          <camunda:inputParameter name="organizationId">
            <camunda:script scriptFormat="JavaScript">execution.getVariable('organizationId')</camunda:script>
          </camunda:inputParameter>
        </camunda:inputOutput>
        <camunda:in source="organizationId" target="organizationId" local="true" />
        <camunda:in source="customerId" target="customerId" local="true" />
        <camunda:in source="contractId" target="contractId" local="true" />
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_00e51p0</bpmn:incoming>
      <bpmn:outgoing>Flow_1mh34uu</bpmn:outgoing>
    </bpmn:callActivity>
    <bpmn:endEvent id="Event_09hizkt">
      <bpmn:incoming>Flow_1mh34uu</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_00e51p0" sourceRef="Gateway_09s8whq" targetRef="Activity_1iry2ws" />
    <bpmn:sequenceFlow id="Flow_1mh34uu" sourceRef="Activity_1iry2ws" targetRef="Event_09hizkt" />
    <bpmn:sequenceFlow id="Flow_0g2xy8b" sourceRef="Gateway_09s8whq" targetRef="Gateway_0ljow5q" />
    <bpmn:callActivity id="Activity_1obacdy" name="Digit Interventions" calledElement="digit_interventions">
      <bpmn:extensionElements>
        <camunda:in businessKey="#{execution.getVariable(&#39;ticketNum&#39;)}" />
        <camunda:inputOutput>
          <camunda:inputParameter name="contractId">
            <camunda:script scriptFormat="JavaScript">var order = execution.getVariable('subscription'); S(order).prop("contractId").value()</camunda:script>
          </camunda:inputParameter>
          <camunda:inputParameter name="interventionType">SS</camunda:inputParameter>
          <camunda:inputParameter name="customerId">
            <camunda:script scriptFormat="JavaScript">var order = execution.getVariable('subscription');
var holder = S(order).prop("holder");
var individual = S(holder).prop("individual");
S(individual).prop("partnerId").value()</camunda:script>
          </camunda:inputParameter>
          <camunda:inputParameter name="interventionNumber">
            <camunda:script scriptFormat="JavaScript">execution.getVariable('ticketNum')</camunda:script>
          </camunda:inputParameter>
          <camunda:inputParameter name="targetName">
            <camunda:script scriptFormat="JavaScript">var order = execution.getVariable('subscription');
S(order).prop("target").value()</camunda:script>
          </camunda:inputParameter>
        </camunda:inputOutput>
        <camunda:in source="interventionNumber" target="interventionNumber" local="true" />
        <camunda:in source="customerId" target="customerId" local="true" />
        <camunda:in source="interventionType" target="interventionType" local="true" />
        <camunda:in source="contractId" target="contractId" local="true" />
        <camunda:in variables="all" />
        <camunda:in source="targetName" target="targetName" local="true" />
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0rbzed5</bpmn:incoming>
      <bpmn:outgoing>Flow_16drahq</bpmn:outgoing>
    </bpmn:callActivity>
    <bpmn:sequenceFlow id="Flow_16drahq" sourceRef="Activity_1obacdy" targetRef="Event_1n4kv3n" />
    <bpmn:exclusiveGateway id="Gateway_1ioh1dc" default="Flow_0of0av7">
      <bpmn:incoming>SequenceFlow_1efpwbt</bpmn:incoming>
      <bpmn:outgoing>Flow_0of0av7</bpmn:outgoing>
      <bpmn:outgoing>Flow_1ciu5of</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="Activity_0jnrukz" name="Apply discount">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_customer');
var order = execution.getVariable('subscription');
var holder = S(order).prop("holder");
var individual = S(holder).prop("individual");
var billingAccountCode = S(individual).prop("partnerId").value();

url_tb+'/api/customer/v1/billingAccount/'+billingAccountCode+'/discounts'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var order = execution.getVariable('subscription');
var discountCodes = S(order).prop("discountCodes").elements();
var discountPlanForInstantiation = S("[]");

for (var i=0; i &lt; discountCodes.size(); i++) {
  var discount = discountCodes.get(i);
  var code = discount.prop("code").value();
  discount.prop("discountPlanid", code);

  discountPlanForInstantiation.append(discount);
}

'{"discountPlan":' + discountPlanForInstantiation.toString() +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_26rmte6">
              <camunda:script scriptFormat="JavaScript">print('Apply discount');
var resp = connector.getVariable('response')
print('resp Apply discount' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1ciu5of</bpmn:incoming>
      <bpmn:outgoing>Flow_1cg8dau</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="Gateway_0x8v977">
      <bpmn:incoming>Flow_0of0av7</bpmn:incoming>
      <bpmn:incoming>Flow_1cg8dau</bpmn:incoming>
      <bpmn:outgoing>Flow_0khit47</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_0of0av7" name="non" sourceRef="Gateway_1ioh1dc" targetRef="Gateway_0x8v977" />
    <bpmn:sequenceFlow id="Flow_1ciu5of" name="oui" sourceRef="Gateway_1ioh1dc" targetRef="Activity_0jnrukz">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">var order = execution.getVariable('subscription');
var discountCodes = S(order).prop("discountCodes");

!(discountCodes.isNull() || discountCodes.elements().isEmpty())</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1cg8dau" sourceRef="Activity_0jnrukz" targetRef="Gateway_0x8v977" />
    <bpmn:sequenceFlow id="Flow_0khit47" sourceRef="Gateway_0x8v977" targetRef="Activity_0gtytt7" />
    <bpmn:sequenceFlow id="Flow_04lor2f" sourceRef="Activity_1ix55n2" targetRef="Activity_1idyb7z" />
    <bpmn:exclusiveGateway id="ExclusiveGateway_06zu91r">
      <bpmn:incoming>SequenceFlow_198mzgz</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1lrpddj</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1vvf3hj</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_1lrpddj" sourceRef="ExclusiveGateway_06zu91r" targetRef="EndEvent_0pe0rya" />
    <bpmn:sequenceFlow id="SequenceFlow_1vvf3hj" sourceRef="ExclusiveGateway_06zu91r" targetRef="UserTask_18o3hc3">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${updateDataError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:userTask id="UserTask_18o3hc3" name="Review Task">
      <bpmn:incoming>SequenceFlow_1vvf3hj</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0f0egpk</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:sequenceFlow id="SequenceFlow_0f0egpk" sourceRef="UserTask_18o3hc3" targetRef="ServiceTask_0ht1wab" />
    <bpmn:serviceTask id="Activity_0gtytt7" name="Update customer seller">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_customer');
var order = execution.getVariable('subscription');
var holder = S(order).prop("holder");
var individual = S(holder).prop("individual");
var customerId = S(individual).prop("partnerId").value();

url_tb+'/api/customer/v1/customer/'+customerId+'/update'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PUT</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var order = execution.getVariable('subscription');
var channel = S(order).prop("channel");
var sellerCode = channel.prop("organisationSellerId").value();

'{"sellerCode":"' + sellerCode +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_26rmte6">
              <camunda:script scriptFormat="JavaScript">print('Update customer seller');
var resp = connector.getVariable('response')
print('resp Update customer seller ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0khit47</bpmn:incoming>
      <bpmn:outgoing>Flow_1tvy4y1</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1tvy4y1" sourceRef="Activity_0gtytt7" targetRef="Activity_1mgqrxn" />
    <bpmn:serviceTask id="Activity_1idyb7z" name="Send Installation To TeamTool">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_intervention');
url_tb+'/api/interventions/v1/camunda/order/send-installation-request'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"order":'+execution.getVariable('subscription')+',"zammadTicket":'+execution.getVariable('zammadTicket')+',"camundaid":"'+execution.getProcessInstanceId()+'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_25965uq">
              <camunda:script scriptFormat="JavaScript">print('send installation to team tool api');
var resp = connector.getVariable('response')
print('resp send Installation to teamtool' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');
 execution.setVariable('zammadTicket',resp);

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_04lor2f</bpmn:incoming>
      <bpmn:outgoing>Flow_1uiywmn</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1uiywmn" sourceRef="Activity_1idyb7z" targetRef="Gateway_038fcb7" />
    <bpmn:textAnnotation id="TextAnnotation_07tyn6e">
      <bpmn:text>Cloture de l'ancien ticket 1er commande avec un commentaire</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_13cpexb" sourceRef="Activity_08a3w7r" targetRef="TextAnnotation_07tyn6e" />
    <bpmn:textAnnotation id="TextAnnotation_0kfi7xz">
      <bpmn:text>Appliquer une temporisation de 7j à partir de la réception du code cloture par la plannif avant de cloturer le contrat. Pdt ces 7j le client pourra donner signe de vieet annuler la cloture du contrat.
Dans ce cas, si le client souhaite finalement etre installé, un nouveau flux d'installation sera crée coté planif et le contrat restera en ATT.</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1118s1d" sourceRef="ReceiveTask_11ktld5" targetRef="TextAnnotation_0kfi7xz" />
    <bpmn:textAnnotation id="TextAnnotation_1aicjio">
      <bpmn:text>Exisite-il des discounts à appliquer?</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1emu7q8" sourceRef="Gateway_1iwu3f9" targetRef="TextAnnotation_1aicjio" />
    <bpmn:textAnnotation id="TextAnnotation_1s2j8u1">
      <bpmn:text>est ce avenant?</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0sw4ex7" sourceRef="Gateway_1x3o730" targetRef="TextAnnotation_1s2j8u1" />
    <bpmn:textAnnotation id="TextAnnotation_0gqea65">
      <bpmn:text>seller?
</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0ic3xec" sourceRef="Gateway_15ngkek" targetRef="TextAnnotation_0gqea65" />
    <bpmn:textAnnotation id="TextAnnotation_1myvsev">
      <bpmn:text>Exisite-il des discounts à appliquer?</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0rzzg1l" sourceRef="Gateway_1ioh1dc" targetRef="TextAnnotation_1myvsev" />
  </bpmn:process>
  <bpmn:message id="Message_14f2kp4" name="startSubscriptionMessageTSBV2" />
  <bpmn:message id="Message_0bht3g0" name="planifProcessReturn" />
  <bpmn:error id="Error_0a8hc3i" name="Error_27erg8r" />
  <bpmn:message id="Message_1g82wb4" name="installProcessReturn" />
  <bpmn:message id="Message_16vz4vj" name="reassignmentAndCommentTicketCodeCloture47MessageQa" />
  <bpmn:message id="Message_12cd20s" name="reassignmentAndCommentTicketMessage" />
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="subscriptionTSBV2">
      <bpmndi:BPMNEdge id="Flow_1tvy4y1_di" bpmnElement="Flow_1tvy4y1">
        <di:waypoint x="1250" y="1480" />
        <di:waypoint x="1820" y="1480" />
        <di:waypoint x="1820" y="1370" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0f0egpk_di" bpmnElement="SequenceFlow_0f0egpk">
        <di:waypoint x="3923" y="940" />
        <di:waypoint x="3923" y="1010" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1vvf3hj_di" bpmnElement="SequenceFlow_1vvf3hj">
        <di:waypoint x="4043" y="1025" />
        <di:waypoint x="4043" y="900" />
        <di:waypoint x="3983" y="900" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1lrpddj_di" bpmnElement="SequenceFlow_1lrpddj">
        <di:waypoint x="4068" y="1050" />
        <di:waypoint x="4117" y="1050" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_04lor2f_di" bpmnElement="Flow_04lor2f">
        <di:waypoint x="2560" y="1147" />
        <di:waypoint x="2630" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0khit47_di" bpmnElement="Flow_0khit47">
        <di:waypoint x="1065" y="1480" />
        <di:waypoint x="1150" y="1480" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0nxw2mj" bpmnElement="Flow_1cg8dau">
        <di:waypoint x="980" y="1480" />
        <di:waypoint x="1015" y="1480" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0eyuoj5" bpmnElement="Flow_1ciu5of">
        <di:waypoint x="815" y="1480" />
        <di:waypoint x="880" y="1480" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="828" y="1463" width="15" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0xmwyts" bpmnElement="Flow_0of0av7">
        <di:waypoint x="790" y="1505" />
        <di:waypoint x="790" y="1600" />
        <di:waypoint x="1040" y="1600" />
        <di:waypoint x="1040" y="1505" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="807" y="1583" width="19" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_16drahq_di" bpmnElement="Flow_16drahq">
        <di:waypoint x="2920" y="1030" />
        <di:waypoint x="2972" y="1030" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0g2xy8b_di" bpmnElement="Flow_0g2xy8b">
        <di:waypoint x="5205" y="1170" />
        <di:waypoint x="5325" y="1170" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1mh34uu_di" bpmnElement="Flow_1mh34uu">
        <di:waypoint x="5163" y="1430" />
        <di:waypoint x="5212" y="1430" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_00e51p0_di" bpmnElement="Flow_00e51p0">
        <di:waypoint x="5180" y="1195" />
        <di:waypoint x="5180" y="1270" />
        <di:waypoint x="5113" y="1270" />
        <di:waypoint x="5113" y="1390" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_15t3j23_di" bpmnElement="Flow_15t3j23">
        <di:waypoint x="1820" y="1290" />
        <di:waypoint x="1820" y="1187" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0u745j8_di" bpmnElement="Flow_0u745j8">
        <di:waypoint x="1870" y="1147" />
        <di:waypoint x="1905" y="1147" />
        <di:waypoint x="1905" y="1149" />
        <di:waypoint x="1940" y="1149" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1x1xx81_di" bpmnElement="Flow_1x1xx81">
        <di:waypoint x="1680" y="1147" />
        <di:waypoint x="1770" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0paoksc_di" bpmnElement="Flow_0paoksc">
        <di:waypoint x="1120" y="1172" />
        <di:waypoint x="1120" y="1250" />
        <di:waypoint x="1200" y="1250" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0nr4fba_di" bpmnElement="Flow_0nr4fba">
        <di:waypoint x="1145" y="1147" />
        <di:waypoint x="1330" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0rbzed5_di" bpmnElement="Flow_0rbzed5">
        <di:waypoint x="2870" y="1122" />
        <di:waypoint x="2870" y="1070" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1liz6mn_di" bpmnElement="SequenceFlow_1liz6mn">
        <di:waypoint x="1330" y="1390" />
        <di:waypoint x="1250" y="1390" />
        <di:waypoint x="1250" y="1290" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_178r3dk_di" bpmnElement="SequenceFlow_178r3dk">
        <di:waypoint x="1300" y="1250" />
        <di:waypoint x="1355" y="1250" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1nydytl_di" bpmnElement="SequenceFlow_1nydytl">
        <di:waypoint x="1405" y="1250" />
        <di:waypoint x="1532" y="1250" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1qlmtyq_di" bpmnElement="SequenceFlow_1qlmtyq">
        <di:waypoint x="1380" y="1275" />
        <di:waypoint x="1380" y="1350" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_012ll1l_di" bpmnElement="SequenceFlow_012ll1l">
        <di:waypoint x="4189" y="1149" />
        <di:waypoint x="4353" y="1149" />
        <di:waypoint x="4353" y="1147" />
        <di:waypoint x="4516" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_19y9l8k_di" bpmnElement="Flow_19y9l8k">
        <di:waypoint x="2895" y="1147" />
        <di:waypoint x="2967" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_16p5imb_di" bpmnElement="SequenceFlow_16p5imb">
        <di:waypoint x="390" y="1147" />
        <di:waypoint x="505" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_15ebk8w_di" bpmnElement="Flow_15ebk8w">
        <di:waypoint x="6230" y="1295" />
        <di:waypoint x="6230" y="1530" />
        <di:waypoint x="6562" y="1530" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="6218" y="1342" width="65" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_09xlkqw_di" bpmnElement="Flow_09xlkqw">
        <di:waypoint x="6255" y="1270" />
        <di:waypoint x="6580" y="1270" />
        <di:waypoint x="6580" y="1290" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="6255" y="1228" width="49" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1a02qe8_di" bpmnElement="Flow_1a02qe8">
        <di:waypoint x="6230" y="1195" />
        <di:waypoint x="6230" y="1245" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="6232" y="1205" width="15" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1w1nbqj_di" bpmnElement="Flow_1w1nbqj">
        <di:waypoint x="2370" y="1260" />
        <di:waypoint x="2420" y="1260" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ll1f6a_di" bpmnElement="Flow_0ll1f6a">
        <di:waypoint x="2470" y="1220" />
        <di:waypoint x="2470" y="1204" />
        <di:waypoint x="2510" y="1204" />
        <di:waypoint x="2510" y="1187" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1kh6pb7_di" bpmnElement="Flow_1kh6pb7">
        <di:waypoint x="2260" y="1174" />
        <di:waypoint x="2260" y="1196" />
        <di:waypoint x="2320" y="1196" />
        <di:waypoint x="2320" y="1220" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2291" y="1167" width="15" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1blf9yf_di" bpmnElement="Flow_1blf9yf">
        <di:waypoint x="2285" y="1149" />
        <di:waypoint x="2373" y="1149" />
        <di:waypoint x="2373" y="1147" />
        <di:waypoint x="2460" y="1147" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2320" y="1131" width="19" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0sagcvr_di" bpmnElement="Flow_0sagcvr">
        <di:waypoint x="4940" y="1147" />
        <di:waypoint x="4970" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_04ktk4j_di" bpmnElement="Flow_04ktk4j">
        <di:waypoint x="810" y="1147" />
        <di:waypoint x="1095" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1y8pv6t_di" bpmnElement="SequenceFlow_1y8pv6t">
        <di:waypoint x="555" y="1147" />
        <di:waypoint x="710" y="1147" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="544" y="1093" width="67" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1ajifca_di" bpmnElement="Flow_1ajifca">
        <di:waypoint x="5070" y="1147" />
        <di:waypoint x="5113" y="1147" />
        <di:waypoint x="5113" y="1170" />
        <di:waypoint x="5155" y="1170" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1uspps4_di" bpmnElement="Flow_1uspps4">
        <di:waypoint x="3003" y="1147" />
        <di:waypoint x="3388" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0e4f4nt_di" bpmnElement="Flow_0e4f4nt">
        <di:waypoint x="4295" y="599" />
        <di:waypoint x="4295" y="435" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0oxypqv_di" bpmnElement="Flow_0oxypqv" bioc:stroke="#831311" color:border-color="#831311">
        <di:waypoint x="4295" y="785" />
        <di:waypoint x="4295" y="679" />
        <bpmndi:BPMNLabel color:color="#831311">
          <dc:Bounds x="4218" y="726" width="83" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_03znt54_di" bpmnElement="Flow_03znt54">
        <di:waypoint x="5400" y="1440" />
        <di:waypoint x="5631" y="1440" />
        <di:waypoint x="5631" y="1490" />
        <di:waypoint x="6580" y="1490" />
        <di:waypoint x="6580" y="1512" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1scy0mv_di" bpmnElement="Flow_1scy0mv">
        <di:waypoint x="5350" y="1348" />
        <di:waypoint x="5350" y="1400" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_01jeu6j_di" bpmnElement="Flow_01jeu6j">
        <di:waypoint x="5350" y="1195" />
        <di:waypoint x="5350" y="1312" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0l08du4_di" bpmnElement="Flow_0l08du4">
        <di:waypoint x="5375" y="1170" />
        <di:waypoint x="5455" y="1170" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1x62b51_di" bpmnElement="Flow_1x62b51">
        <di:waypoint x="4720" y="540" />
        <di:waypoint x="4755" y="540" />
        <di:waypoint x="4755" y="655" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_076ny4p_di" bpmnElement="Flow_076ny4p">
        <di:waypoint x="4720" y="410" />
        <di:waypoint x="4805" y="410" />
        <di:waypoint x="4805" y="900" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0wd67cl_di" bpmnElement="Flow_0wd67cl">
        <di:waypoint x="4720" y="310" />
        <di:waypoint x="4805" y="310" />
        <di:waypoint x="4805" y="900" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0xlhwu4_di" bpmnElement="Flow_0xlhwu4">
        <di:waypoint x="4740" y="1050" />
        <di:waypoint x="4810" y="1050" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_19uegjq_di" bpmnElement="Flow_19uegjq">
        <di:waypoint x="6030" y="1170" />
        <di:waypoint x="6205" y="1170" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_16jh4u6_di" bpmnElement="Flow_16jh4u6">
        <di:waypoint x="6580" y="1480" />
        <di:waypoint x="6580" y="1512" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0pltnfr_di" bpmnElement="Flow_0pltnfr">
        <di:waypoint x="6570" y="1370" />
        <di:waypoint x="6570" y="1400" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_00vr8x2_di" bpmnElement="Flow_00vr8x2">
        <di:waypoint x="6255" y="1170" />
        <di:waypoint x="6440" y="1170" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="6339" y="1152" width="19" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_053xld8_di" bpmnElement="Flow_053xld8">
        <di:waypoint x="5855" y="1170" />
        <di:waypoint x="5930" y="1170" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0rgsc4a_di" bpmnElement="Flow_0rgsc4a">
        <di:waypoint x="5710" y="1170" />
        <di:waypoint x="5805" y="1170" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1nc1g8x_di" bpmnElement="Flow_1nc1g8x">
        <di:waypoint x="5480" y="1195" />
        <di:waypoint x="5480" y="1320" />
        <di:waypoint x="5830" y="1320" />
        <di:waypoint x="5830" y="1195" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="5646" y="1302" width="19" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_17pms5i_di" bpmnElement="Flow_17pms5i">
        <di:waypoint x="5505" y="1170" />
        <di:waypoint x="5610" y="1170" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="5568" y="1178" width="15" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0aabg45_di" bpmnElement="Flow_0aabg45">
        <di:waypoint x="7410" y="1182" />
        <di:waypoint x="7482" y="1180" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0yck9xp_di" bpmnElement="Flow_0yck9xp">
        <di:waypoint x="7220" y="1180" />
        <di:waypoint x="7265" y="1180" />
        <di:waypoint x="7265" y="1183" />
        <di:waypoint x="7310" y="1183" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1kidmru_di" bpmnElement="Flow_1kidmru">
        <di:waypoint x="7440" y="1033" />
        <di:waypoint x="7500" y="1033" />
        <di:waypoint x="7500" y="1162" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_02kbacq_di" bpmnElement="Flow_02kbacq">
        <di:waypoint x="7290" y="1033" />
        <di:waypoint x="7340" y="1033" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_05zujux_di" bpmnElement="Flow_05zujux">
        <di:waypoint x="7130" y="1033" />
        <di:waypoint x="7190" y="1033" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1rkzeu0_di" bpmnElement="Flow_1rkzeu0">
        <di:waypoint x="4910" y="1050" />
        <di:waypoint x="4935" y="1050" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_00pow13_di" bpmnElement="Flow_00pow13">
        <di:waypoint x="5400" y="940" />
        <di:waypoint x="5542" y="940" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1hlca9m_di" bpmnElement="Flow_1hlca9m">
        <di:waypoint x="5210" y="940" />
        <di:waypoint x="5300" y="940" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1yfljfa_di" bpmnElement="Flow_1yfljfa">
        <di:waypoint x="4525" y="640" />
        <di:waypoint x="4525" y="580" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0qre41e_di" bpmnElement="Flow_0qre41e">
        <di:waypoint x="4525" y="763" />
        <di:waypoint x="4525" y="720" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0hyw2ll_di" bpmnElement="Flow_0hyw2ll">
        <di:waypoint x="3610" y="1310" />
        <di:waypoint x="3307" y="1310" />
        <di:waypoint x="3307" y="1340" />
        <di:waypoint x="2985" y="1340" />
        <di:waypoint x="2985" y="1165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0y193wa_di" bpmnElement="Flow_0y193wa">
        <di:waypoint x="3320" y="530" />
        <di:waypoint x="3220" y="530" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0wtao1b_di" bpmnElement="Flow_0wtao1b">
        <di:waypoint x="3120" y="530" />
        <di:waypoint x="2510" y="530" />
        <di:waypoint x="2510" y="599" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1isnn3s_di" bpmnElement="Flow_1isnn3s">
        <di:waypoint x="2510" y="940" />
        <di:waypoint x="2510" y="1107" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0q39pgn_di" bpmnElement="Flow_0q39pgn">
        <di:waypoint x="2180" y="1149" />
        <di:waypoint x="2235" y="1149" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1tmof1y_di" bpmnElement="Flow_1tmof1y">
        <di:waypoint x="2040" y="1149" />
        <di:waypoint x="2080" y="1149" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_01d55lx_di" bpmnElement="SequenceFlow_01d55lx">
        <di:waypoint x="4780" y="680" />
        <di:waypoint x="4985" y="680" />
        <di:waypoint x="4985" y="1010" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1j6g652_di" bpmnElement="SequenceFlow_1j6g652">
        <di:waypoint x="4755" y="705" />
        <di:waypoint x="4755" y="803" />
        <di:waypoint x="4765" y="803" />
        <di:waypoint x="4765" y="900" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1268glj_di" bpmnElement="SequenceFlow_1268glj">
        <di:waypoint x="4575" y="540" />
        <di:waypoint x="4620" y="540" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1xmfvd1_di" bpmnElement="SequenceFlow_1xmfvd1">
        <di:waypoint x="1430" y="1147" />
        <di:waypoint x="1580" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_09m04hm_di" bpmnElement="SequenceFlow_09m04hm">
        <di:waypoint x="2510" y="679" />
        <di:waypoint x="2510" y="860" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1xyuvrw_di" bpmnElement="SequenceFlow_1xyuvrw">
        <di:waypoint x="4541" y="1122" />
        <di:waypoint x="4541" y="1050" />
        <di:waypoint x="4640" y="1050" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4541" y="993" width="83" height="53" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1ak2grk_di" bpmnElement="SequenceFlow_1ak2grk">
        <di:waypoint x="4093" y="1147" />
        <di:waypoint x="4117" y="1147" />
        <di:waypoint x="4117" y="1150" />
        <di:waypoint x="4140" y="1150" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0g7rvdm_di" bpmnElement="SequenceFlow_0g7rvdm">
        <di:waypoint x="4593" y="310" />
        <di:waypoint x="4620" y="310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1kwze5u_di" bpmnElement="SequenceFlow_1kwze5u">
        <di:waypoint x="4525" y="230" />
        <di:waypoint x="4525" y="180" />
        <di:waypoint x="3370" y="180" />
        <di:waypoint x="3370" y="490" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4436" y="153" width="74" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_03u3t7d_di" bpmnElement="SequenceFlow_03u3t7d">
        <di:waypoint x="4575" y="250" />
        <di:waypoint x="4805" y="250" />
        <di:waypoint x="4805" y="900" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4657" y="232" width="73" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1xrbmmj_di" bpmnElement="SequenceFlow_1xrbmmj" bioc:stroke="#831311" color:border-color="#831311">
        <di:waypoint x="4295" y="384" />
        <di:waypoint x="4295" y="270" />
        <di:waypoint x="4475" y="270" />
        <bpmndi:BPMNLabel color:color="#831311">
          <dc:Bounds x="4328" y="236" width="83" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_06muc6x_di" bpmnElement="SequenceFlow_06muc6x" bioc:stroke="#831311" color:border-color="#831311">
        <di:waypoint x="4165" y="1125" />
        <di:waypoint x="4165" y="880" />
        <di:waypoint x="4295" y="880" />
        <di:waypoint x="4295" y="835" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4177" y="966" width="85" height="53" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0hfs45j_di" bpmnElement="SequenceFlow_0hfs45j">
        <di:waypoint x="4165" y="1175" />
        <di:waypoint x="4165" y="1300" />
        <di:waypoint x="3710" y="1300" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4043" y="1245" width="82" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1yipx0l_di" bpmnElement="SequenceFlow_1yipx0l">
        <di:waypoint x="6997" y="1155" />
        <di:waypoint x="6997" y="1033" />
        <di:waypoint x="7030" y="1033" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="6962" y="901" width="79" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_19end95_di" bpmnElement="SequenceFlow_19end95">
        <di:waypoint x="7022" y="1180" />
        <di:waypoint x="7120" y="1180" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_07htm9e_di" bpmnElement="SequenceFlow_07htm9e">
        <di:waypoint x="6900" y="1180" />
        <di:waypoint x="6972" y="1180" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_17d0id1_di" bpmnElement="SequenceFlow_17d0id1">
        <di:waypoint x="4541" y="1122" />
        <di:waypoint x="4541" y="986" />
        <di:waypoint x="4525" y="986" />
        <di:waypoint x="4525" y="843" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4435" y="911" width="83" height="53" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0zn2m3t_di" bpmnElement="SequenceFlow_0zn2m3t">
        <di:waypoint x="4320" y="810" />
        <di:waypoint x="4475" y="810" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4358" y="756" width="83" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_00ivesh_di" bpmnElement="SequenceFlow_00ivesh">
        <di:waypoint x="4475" y="530" />
        <di:waypoint x="3420" y="530" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0nl3ymy_di" bpmnElement="SequenceFlow_0nl3ymy">
        <di:waypoint x="4320" y="410" />
        <di:waypoint x="4620" y="410" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4472" y="376" width="83" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1243q96_di" bpmnElement="SequenceFlow_1243q96">
        <di:waypoint x="3438" y="1147" />
        <di:waypoint x="3469" y="1147" />
        <di:waypoint x="3469" y="1150" />
        <di:waypoint x="3500" y="1150" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3429" y="1112" width="82" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0ozfs0j_di" bpmnElement="SequenceFlow_0ozfs0j">
        <di:waypoint x="3780" y="1025" />
        <di:waypoint x="3780" y="870" />
        <di:waypoint x="3620" y="870" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_087fep6_di" bpmnElement="SequenceFlow_087fep6">
        <di:waypoint x="3550" y="1150" />
        <di:waypoint x="4057" y="1150" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3632" y="1134" width="83" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_198mzgz_di" bpmnElement="SequenceFlow_198mzgz">
        <di:waypoint x="3973" y="1050" />
        <di:waypoint x="4018" y="1050" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1fapwf1_di" bpmnElement="SequenceFlow_1fapwf1">
        <di:waypoint x="3805" y="1050" />
        <di:waypoint x="3873" y="1050" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0ri1tqd_di" bpmnElement="SequenceFlow_0ri1tqd">
        <di:waypoint x="3620" y="1070" />
        <di:waypoint x="3620" y="1050" />
        <di:waypoint x="3755" y="1050" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_070tlyn_di" bpmnElement="SequenceFlow_070tlyn">
        <di:waypoint x="3570" y="910" />
        <di:waypoint x="3570" y="1000" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1ikrofp_di" bpmnElement="SequenceFlow_1ikrofp">
        <di:waypoint x="3525" y="1125" />
        <di:waypoint x="3525" y="1103" />
        <di:waypoint x="3550" y="1103" />
        <di:waypoint x="3550" y="1080" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3528" y="1105" width="54" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1k9tc68_di" bpmnElement="SequenceFlow_1k9tc68">
        <di:waypoint x="3413" y="1122" />
        <di:waypoint x="3413" y="810" />
        <di:waypoint x="4270" y="810" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3526" y="437" width="76" height="66" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1hj6n34_di" bpmnElement="SequenceFlow_1hj6n34">
        <di:waypoint x="4855" y="940" />
        <di:waypoint x="5110" y="940" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1wkv645_di" bpmnElement="SequenceFlow_1wkv645">
        <di:waypoint x="3520" y="1450" />
        <di:waypoint x="2985" y="1450" />
        <di:waypoint x="2985" y="1165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_058t5ay_di" bpmnElement="SequenceFlow_058t5ay">
        <di:waypoint x="3413" y="1172" />
        <di:waypoint x="3413" y="1430" />
        <di:waypoint x="3520" y="1430" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3409" y="1363" width="63" height="53" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1h20s3z_di" bpmnElement="SequenceFlow_1h20s3z">
        <di:waypoint x="4566" y="1147" />
        <di:waypoint x="4620" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_03xpufy_di" bpmnElement="SequenceFlow_03xpufy">
        <di:waypoint x="6540" y="1170" />
        <di:waypoint x="6630" y="1170" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1b9vu8r_di" bpmnElement="SequenceFlow_1b9vu8r">
        <di:waypoint x="5035" y="1050" />
        <di:waypoint x="6850" y="1050" />
        <di:waypoint x="6850" y="1140" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1q31cwc_di" bpmnElement="SequenceFlow_1q31cwc">
        <di:waypoint x="4805" y="1147" />
        <di:waypoint x="4840" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0glezdh_di" bpmnElement="SequenceFlow_0glezdh">
        <di:waypoint x="4670" y="1147" />
        <di:waypoint x="4705" y="1147" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4647" y="1112" width="58" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0cciban_di" bpmnElement="SequenceFlow_0cciban">
        <di:waypoint x="5260" y="1549" />
        <di:waypoint x="6562" y="1530" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1f5sraz_di" bpmnElement="SequenceFlow_1f5sraz">
        <di:waypoint x="4645" y="1172" />
        <di:waypoint x="4645" y="1550" />
        <di:waypoint x="5160" y="1550" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="4649" y="1516" width="58" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0tolqus_di" bpmnElement="SequenceFlow_0tolqus">
        <di:waypoint x="6730" y="1183" />
        <di:waypoint x="6800" y="1183" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1efpwbt_di" bpmnElement="SequenceFlow_1efpwbt">
        <di:waypoint x="530" y="1172" />
        <di:waypoint x="530" y="1480" />
        <di:waypoint x="765" y="1480" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="553" y="1453" width="49" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1hs7whr_di" bpmnElement="Flow_1hs7whr">
        <di:waypoint x="188" y="1147" />
        <di:waypoint x="290" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1uiywmn_di" bpmnElement="Flow_1uiywmn">
        <di:waypoint x="2730" y="1147" />
        <di:waypoint x="2845" y="1147" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="StartEvent_1k1ifhk_di" bpmnElement="StartEvent_1">
        <dc:Bounds x="152" y="1129" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0k999mz_di" bpmnElement="ExclusiveGateway_0k999mz" isMarkerVisible="true">
        <dc:Bounds x="505" y="1122" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_01objy4_di" bpmnElement="Task_0f5nkv9">
        <dc:Bounds x="6630" y="1140" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1bhyt2z" bpmnElement="Activity_1idyb7z">
        <dc:Bounds x="2630" y="1107" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="SubProcess_085n162_di" bpmnElement="SubProcess_085n162" isExpanded="true">
        <dc:Bounds x="590" y="1690" width="740" height="463" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_05uhn59_di" bpmnElement="Flow_05uhn59">
        <di:waypoint x="1106" y="1810" />
        <di:waypoint x="1141" y="1810" />
        <di:waypoint x="1141" y="1910" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1vjq0bw_di" bpmnElement="Flow_1vjq0bw">
        <di:waypoint x="741" y="1946" />
        <di:waypoint x="741" y="1810" />
        <di:waypoint x="805" y="1810" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0660sd8_di" bpmnElement="Flow_0660sd8">
        <di:waypoint x="1020" y="1810" />
        <di:waypoint x="1070" y="1810" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0fkz23b_di" bpmnElement="Flow_0fkz23b">
        <di:waypoint x="855" y="1810" />
        <di:waypoint x="920" y="1810" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1oka6jq_di" bpmnElement="SequenceFlow_1oka6jq">
        <di:waypoint x="941" y="2086" />
        <di:waypoint x="1141" y="2086" />
        <di:waypoint x="1141" y="1990" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0naabt8_di" bpmnElement="SequenceFlow_0naabt8">
        <di:waypoint x="741" y="1996" />
        <di:waypoint x="741" y="2086" />
        <di:waypoint x="841" y="2086" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_02hvc3v_di" bpmnElement="SequenceFlow_02hvc3v">
        <di:waypoint x="830" y="1835" />
        <di:waypoint x="830" y="1950" />
        <di:waypoint x="920" y="1950" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0jg7ptp_di" bpmnElement="SequenceFlow_0jg7ptp">
        <di:waypoint x="1191" y="1950" />
        <di:waypoint x="1263" y="1950" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1kqhl73_di" bpmnElement="SequenceFlow_1kqhl73">
        <di:waypoint x="1020" y="1950" />
        <di:waypoint x="1091" y="1950" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_02noohs_di" bpmnElement="SequenceFlow_02noohs">
        <di:waypoint x="659" y="1971" />
        <di:waypoint x="716" y="1971" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="StartEvent_03idx0z_di" bpmnElement="StartEvent_03idx0z">
        <dc:Bounds x="623" y="1953" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_0pdqhnx_di" bpmnElement="UserTask_0pdqhnx">
        <dc:Bounds x="920" y="1910" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_19wiclb_di" bpmnElement="EndEvent_19wiclb">
        <dc:Bounds x="1263" y="1932" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ScriptTask_1k0uuxl_di" bpmnElement="ScriptTask_1k0uuxl">
        <dc:Bounds x="1091" y="1910" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0fofy8h_di" bpmnElement="ExclusiveGateway_0fofy8h" isMarkerVisible="true">
        <dc:Bounds x="716" y="1946" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1sp384m_di" bpmnElement="Task_1atrp8f">
        <dc:Bounds x="841" y="2046" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0aivee9_di" bpmnElement="Activity_14qqn62">
        <dc:Bounds x="920" y="1770" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0pvvg6p_di" bpmnElement="Gateway_0pvvg6p" isMarkerVisible="true">
        <dc:Bounds x="805" y="1785" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1lvk58a" bpmnElement="Event_0bcs6uq" bioc:stroke="#0d4372" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#0d4372">
        <dc:Bounds x="1070" y="1792" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0gtrmko_di" bpmnElement="TextAnnotation_0gtrmko">
        <dc:Bounds x="1080" y="1730" width="180" height="26" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Association_13htmfx_di" bpmnElement="Association_13htmfx">
        <di:waypoint x="1100" y="1797" />
        <di:waypoint x="1160" y="1756" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="ServiceTask_0tntycs_di" bpmnElement="ServiceTask_0tntycs">
        <dc:Bounds x="1330" y="1107" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_18x6klf_di" bpmnElement="ExclusiveGateway_18x6klf" isMarkerVisible="true">
        <dc:Bounds x="4620" y="1122" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_0t3dz3m_di" bpmnElement="EndEvent_0t3dz3m">
        <dc:Bounds x="7482" y="1162" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_0ihoxab_di" bpmnElement="EndEvent_0ihoxab">
        <dc:Bounds x="6562" y="1512" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ScriptTask_0g7216r_di" bpmnElement="ScriptTask_0g7216r">
        <dc:Bounds x="5160" y="1510" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0j9rg8a_di" bpmnElement="ServiceTask_0j9rg8a">
        <dc:Bounds x="4935" y="1010" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0l6zw3c_di" bpmnElement="ServiceTask_0l6zw3c">
        <dc:Bounds x="4705" y="1107" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1vau0gn_di" bpmnElement="ServiceTask_1vau0gn">
        <dc:Bounds x="6440" y="1130" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_16z44tb_di" bpmnElement="ServiceTask_16z44tb">
        <dc:Bounds x="6800" y="1140" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_02gmcxu_di" bpmnElement="ExclusiveGateway_02gmcxu" isMarkerVisible="true">
        <dc:Bounds x="4516" y="1122" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_1xyjras_di" bpmnElement="IntermediateCatchEvent_1xyjras">
        <dc:Bounds x="2967" y="1129" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0hqdqt4_di" bpmnElement="ExclusiveGateway_0hqdqt4" isMarkerVisible="true">
        <dc:Bounds x="3388" y="1122" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1yy3pcd_di" bpmnElement="ServiceTask_1yy3pcd">
        <dc:Bounds x="4755" y="900" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_1al4v7z_di" bpmnElement="EndEvent_1al4v7z">
        <dc:Bounds x="5542" y="922" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_0vmxv8z_di" bpmnElement="IntermediateThrowEvent_16fwh55">
        <dc:Bounds x="4057" y="1129" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3397" y="352" width="86" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0ht1wab_di" bpmnElement="ServiceTask_0ht1wab">
        <dc:Bounds x="3873" y="1010" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="InclusiveGateway_092z1zu_di" bpmnElement="InclusiveGateway_092z1zu">
        <dc:Bounds x="3500" y="1125" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_0pe5t1e_di" bpmnElement="UserTask_0pe5t1e">
        <dc:Bounds x="3520" y="830" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0fhfgi6_di" bpmnElement="ExclusiveGateway_0fhfgi6" isMarkerVisible="true">
        <dc:Bounds x="3755" y="1025" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_0pe0rya_di" bpmnElement="EndEvent_0pe0rya">
        <dc:Bounds x="4117" y="1032" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0im067l_di" bpmnElement="ExclusiveGateway_0im067l" isMarkerVisible="true">
        <dc:Bounds x="4270" y="785" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ReceiveTask_06v94kc_di" bpmnElement="ReceiveTask_06v94kc" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="4475" y="500" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1bgegbr_di" bpmnElement="ExclusiveGateway_1bgegbr" isMarkerVisible="true">
        <dc:Bounds x="6972" y="1155" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1amv63v_di" bpmnElement="ExclusiveGateway_1amv63v" isMarkerVisible="true">
        <dc:Bounds x="4140" y="1125" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ReceiveTask_11ktld5_di" bpmnElement="ReceiveTask_11ktld5" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="4475" y="230" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0e8ayg8_di" bpmnElement="ServiceTask_0e8ayg8">
        <dc:Bounds x="2460" y="599" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0h2mfr1_di" bpmnElement="ExclusiveGateway_0h2mfr1" isMarkerVisible="true">
        <dc:Bounds x="4730" y="655" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1qiedqd" bpmnElement="Activity_1ljdd1l">
        <dc:Bounds x="1940" y="1109" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1yl3p2c_di" bpmnElement="ServiceTask_1l5l3kr">
        <dc:Bounds x="1580" y="1107" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1lrrmxh_di" bpmnElement="Activity_1lrrmxh">
        <dc:Bounds x="2080" y="1109" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1ix55n2_di" bpmnElement="Activity_1ix55n2">
        <dc:Bounds x="2460" y="1107" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_059qjnn_di" bpmnElement="ServiceTask_11cztnz">
        <dc:Bounds x="2460" y="860" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1745xa9_di" bpmnElement="Activity_1745xa9" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="3120" y="490" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_08a3w7r_di" bpmnElement="Activity_08a3w7r">
        <dc:Bounds x="3320" y="490" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1hp38di_di" bpmnElement="ServiceTask_167ar44">
        <dc:Bounds x="3520" y="1390" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1ssk2iv_di" bpmnElement="ServiceTask_0rdbqb7">
        <dc:Bounds x="3610" y="1260" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0wvb3x4_di" bpmnElement="Activity_0wvb3x4">
        <dc:Bounds x="3520" y="1000" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1y59boe_di" bpmnElement="ServiceTask_1y59boe" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="4475" y="640" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1m1ktyt_di" bpmnElement="Activity_1m1ktyt">
        <dc:Bounds x="4475" y="763" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0p275q1_di" bpmnElement="ServiceTask_15w8uuj">
        <dc:Bounds x="5110" y="900" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1ymwy02_di" bpmnElement="ServiceTask_1ymwy02" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="5300" y="900" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0h6nypa_di" bpmnElement="ServiceTask_1p3ok1t">
        <dc:Bounds x="4810" y="1010" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_01wpecz_di" bpmnElement="ServiceTask_0mbw99f">
        <dc:Bounds x="7030" y="993" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0g43oha_di" bpmnElement="ServiceTask_0g43oha" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="7190" y="993" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_108dyw1_di" bpmnElement="ServiceTask_108dyw1">
        <dc:Bounds x="7340" y="993" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_10zxbzl_di" bpmnElement="ServiceTask_10zxbzl">
        <dc:Bounds x="7120" y="1140" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0mia1ct_di" bpmnElement="ServiceTask_0mia1ct" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="7310" y="1143" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1mgqrxn_di" bpmnElement="Activity_1mgqrxn">
        <dc:Bounds x="1770" y="1290" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1b9mmqw" bpmnElement="Gateway_1iwu3f9" isMarkerVisible="true">
        <dc:Bounds x="5455" y="1145" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1gzjjjr" bpmnElement="Activity_0ox9vxb" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="5610" y="1130" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_08daxb3_di" bpmnElement="Gateway_08daxb3" isMarkerVisible="true">
        <dc:Bounds x="5805" y="1145" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1x3o730_di" bpmnElement="Gateway_1x3o730">
        <dc:Bounds x="6205" y="1145" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0t04oj2_di" bpmnElement="Activity_0t04oj2" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="6530" y="1290" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_00yb2fn_di" bpmnElement="Activity_00yb2fn" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="6530" y="1400" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1jwsiox_di" bpmnElement="Activity_1jwsiox" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="5930" y="1130" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1uaelzx" bpmnElement="Activity_0yredn1">
        <dc:Bounds x="4640" y="1010" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1xp5aiy" bpmnElement="Activity_0rxcis3">
        <dc:Bounds x="4620" y="270" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0ldqjc1" bpmnElement="Activity_09d8831">
        <dc:Bounds x="4620" y="370" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_12st46r" bpmnElement="Activity_13byje6">
        <dc:Bounds x="4620" y="500" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1ead5ub_di" bpmnElement="Gateway_0ljow5q">
        <dc:Bounds x="5325" y="1145" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0dyh8om_di" bpmnElement="Event_0uegbhl">
        <dc:Bounds x="5332" y="1312" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_14x4z8z_di" bpmnElement="Activity_05vkujb">
        <dc:Bounds x="5300" y="1400" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_18er72p_di" bpmnElement="Gateway_18er72p" isMarkerVisible="true">
        <dc:Bounds x="4270" y="385" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_02qbc9e" bpmnElement="Activity_0lqaw1x" bioc:stroke="#831311" bioc:fill="#ffcdd2" color:background-color="#ffcdd2" color:border-color="#831311">
        <dc:Bounds x="4245" y="599" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0fhbzgr_di" bpmnElement="Activity_0j7yd49">
        <dc:Bounds x="4970" y="1107" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_00fu9yb_di" bpmnElement="Activity_05m151g">
        <dc:Bounds x="710" y="1107" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1xd70fd" bpmnElement="Activity_01pdkvo" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="4840" y="1107" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_11x4r1e_di" bpmnElement="Gateway_11x4r1e" isMarkerVisible="true">
        <dc:Bounds x="2235" y="1124" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2229" y="1094" width="64" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1mv61n2" bpmnElement="Activity_0fcx9ib">
        <dc:Bounds x="2420" y="1220" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_138iwep_di" bpmnElement="Activity_097yghs">
        <dc:Bounds x="2270" y="1220" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0so6ep9" bpmnElement="Gateway_15ngkek" isMarkerVisible="true">
        <dc:Bounds x="6205" y="1245" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1a1r9y3_di" bpmnElement="ServiceTask_1a1r9y3">
        <dc:Bounds x="290" y="1107" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1xtq4tk_di" bpmnElement="Gateway_038fcb7" bioc:stroke="#0d4372" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#0d4372">
        <dc:Bounds x="2845" y="1122" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_0bkynrv_di" bpmnElement="EndEvent_0bkynrv">
        <dc:Bounds x="1532" y="1232" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_04qutt7_di" bpmnElement="UserTask_04qutt7">
        <dc:Bounds x="1330" y="1350" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_16wx06a_di" bpmnElement="ExclusiveGateway_16wx06a" isMarkerVisible="true">
        <dc:Bounds x="1355" y="1225" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1sk19ng_di" bpmnElement="ServiceTask_1sk19ng">
        <dc:Bounds x="1200" y="1210" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0t2ot7a" bpmnElement="Activity_0mvwdns">
        <dc:Bounds x="1770" y="1107" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0xmgonz_di" bpmnElement="InclusiveGateway_133m7pd">
        <dc:Bounds x="1095" y="1122" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1n4kv3n_di" bpmnElement="Event_1n4kv3n">
        <dc:Bounds x="2972" y="1012" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0w2s3gr_di" bpmnElement="Gateway_09s8whq">
        <dc:Bounds x="5155" y="1145" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_17ns11h" bpmnElement="Activity_1iry2ws" bioc:stroke="#0d4372" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#0d4372">
        <dc:Bounds x="5063" y="1390" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_09hizkt_di" bpmnElement="Event_09hizkt">
        <dc:Bounds x="5212" y="1412" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_18mzsk5" bpmnElement="Activity_1obacdy" bioc:stroke="#0d4372" bioc:fill="#bbdefb" color:background-color="#bbdefb" color:border-color="#0d4372">
        <dc:Bounds x="2820" y="990" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1880udf" bpmnElement="Gateway_1ioh1dc" isMarkerVisible="true">
        <dc:Bounds x="765" y="1455" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1qvpw4q" bpmnElement="Activity_0jnrukz">
        <dc:Bounds x="880" y="1440" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0zv5mwp" bpmnElement="Gateway_0x8v977" isMarkerVisible="true">
        <dc:Bounds x="1015" y="1455" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_06zu91r_di" bpmnElement="ExclusiveGateway_06zu91r" isMarkerVisible="true">
        <dc:Bounds x="4018" y="1025" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_18o3hc3_di" bpmnElement="UserTask_18o3hc3">
        <dc:Bounds x="3883" y="860" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_14u2b9k" bpmnElement="Activity_0gtytt7">
        <dc:Bounds x="1150" y="1440" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_07tyn6e_di" bpmnElement="TextAnnotation_07tyn6e">
        <dc:Bounds x="3675" y="310" width="100" height="82" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0kfi7xz_di" bpmnElement="TextAnnotation_0kfi7xz">
        <dc:Bounds x="4635" y="80" width="480" height="90" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1aicjio_di" bpmnElement="TextAnnotation_1aicjio">
        <dc:Bounds x="5150" y="1062" width="160" height="55" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1s2j8u1_di" bpmnElement="TextAnnotation_1s2j8u1">
        <dc:Bounds x="6050" y="1100" width="100" height="34" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0gqea65_di" bpmnElement="TextAnnotation_0gqea65">
        <dc:Bounds x="6130" y="1260" width="100" height="30" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1m7ytbi" bpmnElement="TextAnnotation_1myvsev">
        <dc:Bounds x="780" y="1360" width="180" height="55" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BoundaryEvent_0240xxl_di" bpmnElement="BoundaryEvent_0240xxl">
        <dc:Bounds x="4557" y="292" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Association_13cpexb_di" bpmnElement="Association_13cpexb">
        <di:waypoint x="3416" y="493" />
        <di:waypoint x="3675" y="374" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1118s1d_di" bpmnElement="Association_1118s1d">
        <di:waypoint x="4575" y="249" />
        <di:waypoint x="4766" y="170" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1emu7q8_di" bpmnElement="Association_1emu7q8">
        <di:waypoint x="5461" y="1164" />
        <di:waypoint x="5310" y="1116" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0sw4ex7_di" bpmnElement="Association_0sw4ex7">
        <di:waypoint x="6213" y="1162" />
        <di:waypoint x="6150" y="1133" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0ic3xec_di" bpmnElement="Association_0ic3xec">
        <di:waypoint x="6207" y="1272" />
        <di:waypoint x="6230" y="1270" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_0zsutqb" bpmnElement="Association_0rzzg1l">
        <di:waypoint x="794" y="1459" />
        <di:waypoint x="823" y="1415" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
