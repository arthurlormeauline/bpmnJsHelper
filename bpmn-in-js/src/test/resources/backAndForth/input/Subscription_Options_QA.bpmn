<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:bioc="http://bpmn.io/schema/bpmn/biocolor/1.0" id="Definitions_0wkfit1" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="5.0.0">
  <bpmn:process id="optionQa" name="Subscription Options QA" isExecutable="true">
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>SequenceFlow_1ss1f7o</bpmn:outgoing>
      <bpmn:messageEventDefinition messageRef="Message_04x214t" />
    </bpmn:startEvent>
    <bpmn:sequenceFlow id="SequenceFlow_1ss1f7o" sourceRef="StartEvent_1" targetRef="ServiceTask_0o2ywp3" />
    <bpmn:serviceTask id="ServiceTask_1rsj9xj" name="Add Delegation CEGEDEV">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/add'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToDelegationOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('add delegation cegedev');
var resp = connector.getVariable('response')
print('add delegation cgdev' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_12fac8q</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1ocpgem</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1ocpgem" sourceRef="ServiceTask_1rsj9xj" targetRef="ServiceTask_091muom" />
    <bpmn:sequenceFlow id="SequenceFlow_12fac8q" sourceRef="IntermediateThrowEvent_1jo9oz2" targetRef="ServiceTask_1rsj9xj" />
    <bpmn:intermediateCatchEvent id="IntermediateThrowEvent_1jo9oz2">
      <bpmn:incoming>SequenceFlow_1jg58k7</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_12fac8q</bpmn:outgoing>
      <bpmn:timerEventDefinition>
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${startDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:intermediateCatchEvent>
    <bpmn:serviceTask id="ServiceTask_091muom" name="Create Opencell Service">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/service-activate'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToDelegationOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create opencell service');
var resp = connector.getVariable('response')
print('resp create opencellservice' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1ocpgem</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_07dhm1g</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_07dhm1g" sourceRef="ServiceTask_091muom" targetRef="ServiceTask_1s3gc2y" />
    <bpmn:sequenceFlow id="SequenceFlow_1jg58k7" name="If Delégation" sourceRef="ExclusiveGateway_0dib119" targetRef="IntermediateThrowEvent_1jo9oz2">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${existDelegation}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0s8o9qw" name="if endDate = null">
      <bpmn:incoming>SequenceFlow_1itnrin</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0tdub7k</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_08d483e</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0wkac3r" sourceRef="IntermediateThrowEvent_19b7ls6" targetRef="ServiceTask_0o6rxdb" />
    <bpmn:intermediateCatchEvent id="IntermediateThrowEvent_19b7ls6">
      <bpmn:incoming>Flow_1tnoqta</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0wkac3r</bpmn:outgoing>
      <bpmn:timerEventDefinition>
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${endDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:intermediateCatchEvent>
    <bpmn:sequenceFlow id="SequenceFlow_0tdub7k" sourceRef="ExclusiveGateway_0s8o9qw" targetRef="InclusiveGateway_1vnp14s">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">execution.getVariable('endDate') == null;</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:endEvent id="EndEvent_0haikm9">
      <bpmn:incoming>SequenceFlow_1msruwu</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask id="ServiceTask_0e82rwa" name="close ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketNumber');
url_tb+'/api/support/v1/ticket/' + ticketId</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"stateId":4}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('close zammad ticket');
var resp = connector.getVariable('response')
print('resp close zammad ticket' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0odaa77</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1msruwu</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1msruwu" sourceRef="ServiceTask_0e82rwa" targetRef="EndEvent_0haikm9" />
    <bpmn:serviceTask id="ServiceTask_0o6rxdb" name="Terminate Delegation CEGEDEV">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/delete'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToDelegationOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('Terminate delegation cegdev');
var resp = connector.getVariable('response')
print('resp terminate delegation degedev' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0wkac3r</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1gdt02x</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1gdt02x" sourceRef="ServiceTask_0o6rxdb" targetRef="ServiceTask_0axjyuk" />
    <bpmn:serviceTask id="ServiceTask_1ddt8sv" name="Terminate Opencell Service">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/service-terminate'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToDelegationOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('terminate opencell service');
var resp = connector.getVariable('response')
print('resp terminate opencell service' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1k6dvtr</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1go1pwb</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1go1pwb" sourceRef="ServiceTask_1ddt8sv" targetRef="InclusiveGateway_1vnp14s" />
    <bpmn:inclusiveGateway id="ExclusiveGateway_0dib119" name="Option Type">
      <bpmn:incoming>Flow_16sgjm5</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1jg58k7</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0xms4zq</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0mcftxs</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0xms4zq" name="If Installation is neccessarry" sourceRef="ExclusiveGateway_0dib119" targetRef="Activity_00z4t8x">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${existInstallation}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0mcftxs" name="If Installation is  not neccessarry" sourceRef="ExclusiveGateway_0dib119" targetRef="ServiceTask_0kx4vis">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${existLogistique}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:inclusiveGateway id="InclusiveGateway_1vnp14s" name="Option Type">
      <bpmn:incoming>SequenceFlow_0tdub7k</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1go1pwb</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1ddbua3</bpmn:incoming>
      <bpmn:incoming>Flow_1kwkdwd</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0jo2tv3</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0odaa77</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0odaa77" sourceRef="InclusiveGateway_1vnp14s" targetRef="ServiceTask_0e82rwa" />
    <bpmn:intermediateCatchEvent id="IntermediateThrowEvent_0604xxg">
      <bpmn:incoming>SequenceFlow_0ai54j5</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0g6o0bs</bpmn:outgoing>
      <bpmn:messageEventDefinition messageRef="Message_0lcj4ha" />
    </bpmn:intermediateCatchEvent>
    <bpmn:serviceTask id="ServiceTask_00nvo5y" name="Create Opencell Service">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/installation/create-service'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"endOptionsInstallationEvent":'+execution.getVariable('endOptionsInstallationEvent')+',"subscribeToOption": '+execution.getVariable('subscribeToOption')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create opencell service api');
var resp = connector.getVariable('response')
print('resp create opencell service' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_14h8ih3</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1tc761p</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1tc761p" sourceRef="ServiceTask_00nvo5y" targetRef="Gateway_1x96nzg" />
    <bpmn:serviceTask id="ServiceTask_0nczyzc" name="Create One Shot Charge">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/installation/create-oneshotcharge'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"endOptionsInstallationEvent":'+execution.getVariable('endOptionsInstallationEvent')+',"subscribeToOption": '+execution.getVariable('subscribeToOption')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create One shot charge api');
var resp = connector.getVariable('response')
print('resp create one shot charge' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1jbps7x</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1h9zj4s</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1h9zj4s" sourceRef="ServiceTask_0nczyzc" targetRef="ServiceTask_1iq8up2" />
    <bpmn:serviceTask id="ServiceTask_1iq8up2" name="Close Order Options">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/installation/close-order-option'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"endOptionsInstallation":' + execution.getVariable('endOptionsInstallationEvent') + ',"subscribeToOption":'+ execution.getVariable('subscribeToInstallationOptions') + '}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('close order option api');
var resp = connector.getVariable('response')
print('resp close order option' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1h9zj4s</bpmn:incoming>
      <bpmn:incoming>Flow_11f4rxe</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1lg1t9y</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_07jftby</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_07jftby" sourceRef="ServiceTask_1iq8up2" targetRef="Activity_13c7esq" />
    <bpmn:subProcess id="SubProcess_0mmrcxb" triggeredByEvent="true">
      <bpmn:userTask id="UserTask_0bf3iim" name="Review Task">
        <bpmn:incoming>SequenceFlow_1waihu6</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_0e4k2j3</bpmn:outgoing>
      </bpmn:userTask>
      <bpmn:scriptTask id="ScriptTask_19nyshb" name="Return to Last Task" camunda:asyncAfter="true" scriptFormat="JavaScript">
        <bpmn:incoming>SequenceFlow_0e4k2j3</bpmn:incoming>
        <bpmn:incoming>SequenceFlow_08d6zrk</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_0xwilxw</bpmn:outgoing>
        <bpmn:script>print('Return to flow is Running');
var errorTaskId = execution.getVariable('errorTaskId');
if(errorTaskId == null){
print('No where to go back to');
}else{          execution.getProcessEngineServices().
getRuntimeService().createProcessInstanceModification(execution.getProcessInstanceId()).startBeforeActivity(errorTaskId).
execute();
}</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:endEvent id="EndEvent_1e2jido">
        <bpmn:incoming>SequenceFlow_0xwilxw</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:sequenceFlow id="SequenceFlow_0xwilxw" sourceRef="ScriptTask_19nyshb" targetRef="EndEvent_1e2jido" />
      <bpmn:sequenceFlow id="SequenceFlow_0e4k2j3" sourceRef="UserTask_0bf3iim" targetRef="ScriptTask_19nyshb" />
      <bpmn:sequenceFlow id="SequenceFlow_0zlftus" sourceRef="StartEvent_0i3ud0x" targetRef="ExclusiveGateway_1xt5hlf" />
      <bpmn:startEvent id="StartEvent_0i3ud0x">
        <bpmn:outgoing>SequenceFlow_0zlftus</bpmn:outgoing>
        <bpmn:errorEventDefinition id="ErrorEventDefinition_0gr2i8b" errorRef="Error_07m3rlu" camunda:errorMessageVariable="errorTaskId" />
      </bpmn:startEvent>
      <bpmn:exclusiveGateway id="ExclusiveGateway_1xt5hlf">
        <bpmn:incoming>SequenceFlow_0zlftus</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_1waihu6</bpmn:outgoing>
        <bpmn:outgoing>SequenceFlow_1vm1bzx</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="SequenceFlow_1waihu6" sourceRef="ExclusiveGateway_1xt5hlf" targetRef="UserTask_0bf3iim">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode != 401}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:serviceTask id="ServiceTask_0dohh4b" name="Refresh Token">
        <bpmn:extensionElements>
          <camunda:connector>
            <camunda:inputOutput>
              <camunda:inputParameter name="url">
                <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/auth/realms/Protectline/protocol/openid-connect/token'</camunda:script>
              </camunda:inputParameter>
              <camunda:inputParameter name="method">POST</camunda:inputParameter>
              <camunda:inputParameter name="headers">
                <camunda:map>
                  <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                  <camunda:entry key="Accept">application/json</camunda:entry>
                  <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
                </camunda:map>
              </camunda:inputParameter>
              <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
              <camunda:outputParameter name="Output_1b9kukr">
                <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
              </camunda:outputParameter>
            </camunda:inputOutput>
            <camunda:connectorId>http-connector</camunda:connectorId>
          </camunda:connector>
        </bpmn:extensionElements>
        <bpmn:incoming>SequenceFlow_1vm1bzx</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_08d6zrk</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="SequenceFlow_08d6zrk" sourceRef="ServiceTask_0dohh4b" targetRef="ScriptTask_19nyshb" />
      <bpmn:sequenceFlow id="SequenceFlow_1vm1bzx" sourceRef="ExclusiveGateway_1xt5hlf" targetRef="ServiceTask_0dohh4b">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode == 401}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
    </bpmn:subProcess>
    <bpmn:serviceTask id="Activity_0hhfzhl" name="Add Options order to OpenCell">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToOption');</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/customers/contracts/orders/options'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1712bc2">
              <camunda:script scriptFormat="JavaScript">print("add Options order to OpenCell");
var response = connector.getVariable("response");
print("resp add Options order to OpenCell" + response);
var respHeader = connector.getVariable("headers");
var respStatusCode = connector.getVariable("statusCode");
print("status code" + respStatusCode);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1qrsh8m</bpmn:incoming>
      <bpmn:incoming>Flow_0j75vfj</bpmn:incoming>
      <bpmn:outgoing>Flow_1fszyco</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1fszyco" sourceRef="Activity_0hhfzhl" targetRef="Activity_0jsxg0g" />
    <bpmn:serviceTask id="Activity_0jsxg0g" name="Notification Customer">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToOption');</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/notifications/email/orderOptions'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1712bc2">
              <camunda:script scriptFormat="JavaScript">print('send option Email');
var response = connector.getVariable('response')
print("resp send email Options order to OpenCell" + response);
var respHeader = connector.getVariable("headers");
var respStatusCode = connector.getVariable("statusCode");
print("status code" + respStatusCode);
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1fszyco</bpmn:incoming>
      <bpmn:outgoing>Flow_16sgjm5</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_16sgjm5" sourceRef="Activity_0jsxg0g" targetRef="ExclusiveGateway_0dib119" />
    <bpmn:exclusiveGateway id="ExclusiveGateway_1ngiyzg" default="SequenceFlow_09wejo3">
      <bpmn:incoming>SequenceFlow_0dpa2b5</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_14h8ih3</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_09wejo3</bpmn:outgoing>
      <bpmn:outgoing>Flow_13c2z82</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_14h8ih3" name="Successful Intervention" sourceRef="ExclusiveGateway_1ngiyzg" targetRef="ServiceTask_00nvo5y">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnInstallStatus== 'ACCEPTED'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:scriptTask id="ScriptTask_0xsk721" name="Error" scriptFormat="Javascript">
      <bpmn:incoming>SequenceFlow_09wejo3</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0kfj7z1</bpmn:outgoing>
      <bpmn:script>print('CODE_STATUS_ERROR: Unrecognized Code Status of End Installation');

var activityId = execution.getCurrentActivityId();
var resp = execution.getVariable('returnInstallStatus');

if (resp =='REJECTED'){
var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity'); 
var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext'); 
var context = new IncidentContext(); 
context.setActivityId(execution.getCurrentActivityId()); 
context.setExecutionId(execution.getProcessInstanceId()); 
context.setProcessDefinitionId(execution.getProcessDefinitionId()); 
var newIncident = IncidentEntity.createAndInsertIncident("FAILED", context, "Error return code status"); 

execution.setVariable('incidentId',newIncident.id);

throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}
if (execution.getVariable('incidentId')!=null){
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="SequenceFlow_09wejo3" name="Rejected Intervention" sourceRef="ExclusiveGateway_1ngiyzg" targetRef="ScriptTask_0xsk721" />
    <bpmn:endEvent id="EndEvent_08ecrjs">
      <bpmn:incoming>SequenceFlow_0kfj7z1</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="SequenceFlow_0kfj7z1" sourceRef="ScriptTask_0xsk721" targetRef="EndEvent_08ecrjs" />
    <bpmn:serviceTask id="ServiceTask_1s3gc2y" name="Close Order Options">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/close-order-option'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToDelegationOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('close order option api');
var resp = connector.getVariable('response')
print('resp close order option' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_07dhm1g</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1itnrin</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1itnrin" sourceRef="ServiceTask_1s3gc2y" targetRef="ExclusiveGateway_0s8o9qw" />
    <bpmn:serviceTask id="ServiceTask_0kx4vis" name="Send Message to Logistic">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_intervention');
url_tb+'/api/interventions/v1/camunda/orderOptions/send-logistics'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToLogisticOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">/* function to add 6 days to the date of subs option*/
function addDays(date, days) {
  var result = new Date(date);
  result.setDate(result.getDate() + days);
  return result;
}


print('send intervention to teamTool');
var resp = connector.getVariable('response')
print('resp send intervention de team tool' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* set date + 6 */
var today = new Date();
print(today);
var d= addDays(today ,6);

d.toLocaleString("fr-FR", {timeZone: "Europe/Paris"});
print(d);

var date_format_str = d.getFullYear().toString()+"-"+((d.getMonth()+1).toString().length==2?(d.getMonth()+1).toString():"0"+(d.getMonth()+1).toString())+"-"+(d.getDate().toString().length==2?d.getDate().toString():"0"+d.getDate().toString())+"T"+(d.getHours().toString().length==2?d.getHours().toString():"0"+d.getHours().toString())+":"+((parseInt(d.getMinutes()/5)*5).toString().length==2?(parseInt(d.getMinutes()/5)*5).toString():"0"+(parseInt(d.getMinutes()/5)*5).toString())+":00Z";

print(date_format_str);


execution.setVariable('optionLogisticsDate',date_format_str);


execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0mcftxs</bpmn:incoming>
      <bpmn:outgoing>Flow_0h2xene</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:intermediateCatchEvent id="IntermediateCatchEvent_10caowb">
      <bpmn:incoming>Flow_1xatemp</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0644tqx</bpmn:outgoing>
      <bpmn:timerEventDefinition id="TimerEventDefinition_06nbss1">
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${optionLogisticsDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:intermediateCatchEvent>
    <bpmn:serviceTask id="ServiceTask_1te9qdi" name="Create Opencell Service">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/logistics/create-service'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscribeToOption":'+execution.getVariable('subscribeToLogisticOptions')+',"date":"'+execution.getVariable('optionLogisticsDate')+'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create opencell service api');
var resp = connector.getVariable('response')
print('resp create opencell service' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0644tqx</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0ony3hz</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_1iz7sqs" name="Close Order Options">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/logistics/close-order-option'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToLogisticOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('close order option api');
var resp = connector.getVariable('response')
print('resp close order option' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0ony3hz</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0jo2tv3</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0o2ywp3" name="Get keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/auth/realms/Protectline/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1tcqe5d">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1ss1f7o</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0sfriyu</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_08d483e" name="if endDate != null" sourceRef="ExclusiveGateway_0s8o9qw" targetRef="Event_1903ask">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">execution.getVariable('endDate') != null;</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1f6cpex" sourceRef="Event_1903ask" targetRef="Activity_14yi6lr" />
    <bpmn:sequenceFlow id="Flow_1tnoqta" sourceRef="Activity_14yi6lr" targetRef="IntermediateThrowEvent_19b7ls6" />
    <bpmn:serviceTask id="Activity_14yi6lr" name="Notifications end delegation">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/notifications/email/endOptions'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToDelegationOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1qi4gcr">
              <camunda:script scriptFormat="JavaScript">print('Notification delegation end');
var resp = connector.getVariable('response');
print(resp);
var respHeader = connector.getVariable('headers');
print(respHeader);
var respStatusCode = connector.getVariable('statusCode');
print(respStatusCode);


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
  print('no error');

  /*solve incident if exist*/
  print('incientId : ' + execution.getVariable('incidentId'));
  if (execution.getVariable('incidentId') != null) {
    execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
    execution.setVariable('incidentId', null);
  }
  /* end solving incident*/

  execution.setVariable('httpCode', respStatusCode);
  execution.setVariable('state', 'SUCCESS');
  execution.setVariable('responseMessage', response);
} else {
  execution.setVariable('httpCode', respStatusCode);
  execution.setVariable('state', 'FAIL');
  execution.setVariable('responseMessage', response);
  /*solve incident if exist*/
  print('incientId : ' + execution.getVariable('incidentId'));
  if (execution.getVariable('incidentId') != null) {
    execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
    execution.setVariable('incidentId', null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
  var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident('Api Fail', context, response);
  newIncident.id;
  execution.setVariable('incidentId', newIncident.id);
  print('incientId' + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError', activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1f6cpex</bpmn:incoming>
      <bpmn:outgoing>Flow_1tnoqta</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:intermediateCatchEvent id="Event_1903ask">
      <bpmn:incoming>SequenceFlow_08d483e</bpmn:incoming>
      <bpmn:outgoing>Flow_1f6cpex</bpmn:outgoing>
      <bpmn:timerEventDefinition id="TimerEventDefinition_19255ae">
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${notificationDelegationDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:intermediateCatchEvent>
    <bpmn:serviceTask id="ServiceTask_1cxvtyy" name="Add Comment Ticket cancel Appointment">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketNumber');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");
var cancelAppointment = S(subscription).prop("cancelAppointment");

var reasonCode = S(cancelAppointment).prop("reasonCode").value();
var reasonLabel = S(cancelAppointment).prop("reasonLabel").value();
var planner = S(cancelAppointment).prop("planner").value();
var comment = "Annulation du RDV : "+reasonCode+" - "+reasonLabel;

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***CancelAppointment *** Add Comment Ticket***');
var resp = connector.getVariable('response')
print('resp CancelAppointment *** Add Comment Ticket  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_09a1qr8</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1vcdda2</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_1tjfruc" name="Add Comment Ticket Unreachable Customer">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketNumber');
url_tb+'/api/support/v1/ticket/' + ticketId+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");
var unreachableCustomer = S(subscription).prop("unreachableCustomer");

var numberOfCalls = S(unreachableCustomer).prop("numberOfCalls").value();
var recall = S(unreachableCustomer).prop("recall").value();
var planner = S(unreachableCustomer).prop("planner").value();
var comment = "Client injoignable : " + "\\n" + " nombre d’appel effectué :  " + numberOfCalls + "\\n" + "Date de rappel prévu : " + recall;

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***CancelAppointment *** Add Comment Ticket***');
var resp = connector.getVariable('response')
print('resp CancelAppointment *** Add Comment Ticket  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1j7jg2a</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0f5w48k</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_1wutw2k" name="Add Comment Ticket Cancel Intervention">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketNumber+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");
var cancelIntervention= S(subscription).prop("cancelIntervention");

var reasonCode = S(cancelIntervention).prop("reasonCode").value();
var reasonLabel = S(cancelIntervention).prop("reasonLabel").value();
var planner = S(cancelIntervention).prop("planner").value();
var comment = "Annulation d'intervention : " + reasonCode + " - " + reasonLabel;

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('create order api');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0cp7bzi</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1ddbua3</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1ddbua3" sourceRef="ServiceTask_1wutw2k" targetRef="InclusiveGateway_1vnp14s" />
    <bpmn:intermediateCatchEvent id="IntermediateCatchEvent_15cxhb5">
      <bpmn:incoming>SequenceFlow_0f5w48k</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1vcdda2</bpmn:incoming>
      <bpmn:incoming>Flow_17ts1tn</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0usl7wi</bpmn:outgoing>
      <bpmn:messageEventDefinition id="MessageEventDefinition_0stu25x" messageRef="Message_14qexns" />
    </bpmn:intermediateCatchEvent>
    <bpmn:sequenceFlow id="SequenceFlow_0usl7wi" sourceRef="IntermediateCatchEvent_15cxhb5" targetRef="ExclusiveGateway_0jmnydo" />
    <bpmn:exclusiveGateway id="ExclusiveGateway_0jmnydo">
      <bpmn:incoming>SequenceFlow_0usl7wi</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1j7jg2a</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_09a1qr8</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0iv0l5q</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_07gz8m2</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:inclusiveGateway id="InclusiveGateway_1vhy8xz">
      <bpmn:incoming>SequenceFlow_07gz8m2</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0hd0ruz</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0ai54j5</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:serviceTask id="ServiceTask_0nbu3nw" name="Update data Customer and Site">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/installation/updateDataCustomer'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"toolPlanificationDto":' + execution.getVariable('toolPlanificationDto') + ',"ticketNumber":' + execution.getVariable('ticketNumber') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***CancelAppointment *** Add Comment Ticket***');
var resp = connector.getVariable('response')
print('resp CancelAppointment *** Add Comment Ticket  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
execution.setVariable('updateDataError',false);
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
execution.setVariable('updateDataError',true);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1w212od</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0pabsj8</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0y3i9z1</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:userTask id="UserTask_00857lx" name="Review Task">
      <bpmn:incoming>SequenceFlow_1viafdq</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0pabsj8</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1het873">
      <bpmn:incoming>SequenceFlow_06t1jmk</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1w212od</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_026w8ds</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1oa9byl">
      <bpmn:incoming>SequenceFlow_0y3i9z1</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1viafdq</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0nkx8wt</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:endEvent id="EndEvent_0rcyqtp">
      <bpmn:incoming>SequenceFlow_0nkx8wt</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="SequenceFlow_1w212od" sourceRef="ExclusiveGateway_1het873" targetRef="ServiceTask_0nbu3nw">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!addCommentError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0pabsj8" sourceRef="UserTask_00857lx" targetRef="ServiceTask_0nbu3nw" />
    <bpmn:sequenceFlow id="SequenceFlow_0y3i9z1" sourceRef="ServiceTask_0nbu3nw" targetRef="ExclusiveGateway_1oa9byl" />
    <bpmn:sequenceFlow id="SequenceFlow_1viafdq" sourceRef="ExclusiveGateway_1oa9byl" targetRef="UserTask_00857lx">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${updateDataError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0nkx8wt" sourceRef="ExclusiveGateway_1oa9byl" targetRef="EndEvent_0rcyqtp" />
    <bpmn:userTask id="UserTask_1gu2uk6" name="Review Task">
      <bpmn:incoming>SequenceFlow_026w8ds</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_05bp391</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:serviceTask id="ServiceTask_0ehxrzb" name="Add Comment Ticket validated intervention" camunda:asyncAfter="true">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var ticketId= execution.getVariable('ticketId');
url_tb+'/api/support/v1/ticket/' + ticketNumber+ '/comment'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var toolPlanificationDto = execution.getVariable('toolPlanificationDto');
var subscription = S(toolPlanificationDto).prop("subscription");
var validatedIntervention = S(subscription).prop("validatedIntervention");

var installationDate = S(validatedIntervention).prop("installationDate").value();
var installer = S(validatedIntervention).prop("installer").value();
var planner = S(validatedIntervention).prop("planner").value();
var comment = "Intervention planifiée pour le "+installationDate+" et réalisée par "+installer;

'{"comment":"' + comment+ '"' +
',"email":"' + planner +'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('***CancelAppointment *** Add Comment Ticket Cancel Intervention***');
var resp = connector.getVariable('response');
print('resp CancelAppointment *** Add Comment Ticket Cancel Intervention  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
execution.setVariable('addCommentError',false);
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
execution.setVariable('addCommentError',true);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_05bp391</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0hd0ruz</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_06t1jmk</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_06t1jmk" sourceRef="ServiceTask_0ehxrzb" targetRef="ExclusiveGateway_1het873" />
    <bpmn:sequenceFlow id="SequenceFlow_026w8ds" sourceRef="ExclusiveGateway_1het873" targetRef="UserTask_1gu2uk6">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${addCommentError}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_05bp391" sourceRef="UserTask_1gu2uk6" targetRef="ServiceTask_0ehxrzb" />
    <bpmn:sequenceFlow id="SequenceFlow_0hd0ruz" sourceRef="InclusiveGateway_1vhy8xz" targetRef="ServiceTask_0ehxrzb">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1j7jg2a" name="Unreachable customer&#10;" sourceRef="ExclusiveGateway_0jmnydo" targetRef="ServiceTask_1tjfruc">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnPlanifStatus== 'UNREACHABLE_CUSTOMER'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0f5w48k" sourceRef="ServiceTask_1tjfruc" targetRef="IntermediateCatchEvent_15cxhb5" />
    <bpmn:sequenceFlow id="SequenceFlow_09a1qr8" name="Cancel Appointment" sourceRef="ExclusiveGateway_0jmnydo" targetRef="ServiceTask_1cxvtyy">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnPlanifStatus== 'CANCELED_APPOINTMENT'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1vcdda2" sourceRef="ServiceTask_1cxvtyy" targetRef="IntermediateCatchEvent_15cxhb5" />
    <bpmn:sequenceFlow id="SequenceFlow_0iv0l5q" name="Cancel Intervention" sourceRef="ExclusiveGateway_0jmnydo" targetRef="ServiceTask_0iw37bo">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnPlanifStatus== 'CANCELED_INTERVENTION'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_07gz8m2" name="validate Intervention" sourceRef="ExclusiveGateway_0jmnydo" targetRef="InclusiveGateway_1vhy8xz">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnPlanifStatus== 'VALIDATED_INTERVENTION'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0ai54j5" sourceRef="InclusiveGateway_1vhy8xz" targetRef="IntermediateThrowEvent_0604xxg">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0un9ieq">
      <bpmn:incoming>SequenceFlow_0g6o0bs</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0rss88d</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0gapjn5</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="ServiceTask_0e6gyvd" name="Return Install verify data">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/installation/endOptionsInstallation/validation'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('endOptionsInstallationEvent');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_28o3f9u">
              <camunda:script scriptFormat="JavaScript">print('Verify Data endOptionsInstallation');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');
execution.setVariable('isValidData','true');
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0rss88d</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_13molk9</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0ekunum">
      <bpmn:incoming>SequenceFlow_0gapjn5</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_13molk9</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1958slg</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0rss88d" sourceRef="ExclusiveGateway_0un9ieq" targetRef="ServiceTask_0e6gyvd">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isValidData==false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0gapjn5" sourceRef="ExclusiveGateway_0un9ieq" targetRef="ExclusiveGateway_0ekunum">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isValidData==true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_13molk9" sourceRef="ServiceTask_0e6gyvd" targetRef="ExclusiveGateway_0ekunum" />
    <bpmn:sequenceFlow id="SequenceFlow_0g6o0bs" sourceRef="IntermediateThrowEvent_0604xxg" targetRef="ExclusiveGateway_0un9ieq" />
    <bpmn:sequenceFlow id="SequenceFlow_1958slg" sourceRef="ExclusiveGateway_0ekunum" targetRef="ExclusiveGateway_0yh1ley" />
    <bpmn:serviceTask id="ServiceTask_0iw37bo" name="Close Order Options">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/installation/close-order-option-res'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToInstallationOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('close order option api');
var resp = connector.getVariable('response')
print('resp close order option' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0iv0l5q</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0cp7bzi</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0cp7bzi" sourceRef="ServiceTask_0iw37bo" targetRef="ServiceTask_1wutw2k" />
    <bpmn:serviceTask id="ServiceTask_0axjyuk" name="Update Service To Opencell Underlying Termination Reason">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/underlying-termination/update'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToDelegationOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_17s6mo5">
              <camunda:script scriptFormat="JavaScript">print('Terminate Service Opencell with installation service');
var resp = connector.getVariable('response')
print('Terminate Service Opencell with installation service response :' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1gdt02x</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1k6dvtr</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1k6dvtr" sourceRef="ServiceTask_0axjyuk" targetRef="ServiceTask_1ddt8sv" />
    <bpmn:exclusiveGateway id="Gateway_1x96nzg">
      <bpmn:incoming>SequenceFlow_1tc761p</bpmn:incoming>
      <bpmn:outgoing>Flow_11f4rxe</bpmn:outgoing>
      <bpmn:outgoing>Flow_1jbps7x</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_11f4rxe" name="freeIntervention == true" sourceRef="Gateway_1x96nzg" targetRef="ServiceTask_1iq8up2">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${freeIntervention == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1jbps7x" name="freeIntervention == false" sourceRef="Gateway_1x96nzg" targetRef="ServiceTask_0nczyzc">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${freeIntervention == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0lfuasj">
      <bpmn:incoming>Flow_1217oqo</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0mjnx89</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1qrsh8m</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0sfriyu" sourceRef="ServiceTask_0o2ywp3" targetRef="Activity_0eu7gxm" />
    <bpmn:sequenceFlow id="SequenceFlow_0mjnx89" name="freeIntervention == true" sourceRef="ExclusiveGateway_0lfuasj" targetRef="Activity_00xrxqg">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${freeIntervention == true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1qrsh8m" name="freeIntervention == false" sourceRef="ExclusiveGateway_0lfuasj" targetRef="Activity_0hhfzhl">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${freeIntervention == false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0yh1ley">
      <bpmn:incoming>SequenceFlow_1958slg</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0dpa2b5</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1lg1t9y</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0dpa2b5" name="serviceInstanceIsEmpty == False" sourceRef="ExclusiveGateway_0yh1ley" targetRef="ExclusiveGateway_1ngiyzg">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isempty==false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1lg1t9y" name="serviceInstanceIsEmpty == True" sourceRef="ExclusiveGateway_0yh1ley" targetRef="ServiceTask_1iq8up2">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isempty==true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_14tl03y" name="Add comment Intervention Number">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscribeToOption = execution.getVariable('subscribeToOption');
var ticketNumber = S(subscribeToOption).prop("id").value();

'{"comment":"N° de DI : ' + ticketNumber + '"' +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var subscribeToOption = execution.getVariable('subscribeToOption');
var ticketId = S(subscribeToOption).prop("ticketId").value();

url_tb+'/api/support/v1/ticket/' + ticketId + '/comment';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1712bc2">
              <camunda:script scriptFormat="JavaScript">print('send option Email');
var response = connector.getVariable('response')
print("resp send email Options order to OpenCell" + response);
var respHeader = connector.getVariable("headers");
var respStatusCode = connector.getVariable("statusCode");
print("status code" + respStatusCode);
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0fgw8wi</bpmn:incoming>
      <bpmn:outgoing>Flow_1217oqo</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1217oqo" sourceRef="Activity_14tl03y" targetRef="ExclusiveGateway_0lfuasj" />
    <bpmn:serviceTask id="Activity_00xrxqg" name="Add comment Free intervention">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var subscribeToOption = execution.getVariable('subscribeToOption');
var ticketId = S(subscribeToOption).prop("ticketId").value();

url_tb+'/api/support/v1/ticket/' + ticketId + '/comment';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"comment": "Les frais de déplacement technicien ne sont pas appliqués pour cette intervention"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_28o3f9u">
              <camunda:script scriptFormat="JavaScript">print('*** Add Comment Intervention Number ***');
var resp = connector.getVariable('response')
print('resp comment ticket' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0mjnx89</bpmn:incoming>
      <bpmn:outgoing>Flow_0j75vfj</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0j75vfj" sourceRef="Activity_00xrxqg" targetRef="Activity_0hhfzhl" />
    <bpmn:serviceTask id="Activity_0eu7gxm" name="Add order Comment ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscribeToOption = execution.getVariable('subscribeToOption');
var optionsList = S(subscribeToOption).prop("optionsSubscribed").elements();

var comment = '';
for (var i = 0; i &lt; optionsList.size(); i++) {
  var option = optionsList.get(i);
  var quantity = option.prop("quantity").value();
  var description = option.prop("description").value();
  var startDate = option.prop("startDate").value();
  if (i != 0) {
    comment = comment + '\\n';
  }
  comment = comment + quantity + ' ' + description + ' : date de souscription le ' + startDate;
}

'{"comment":"' + comment + '"' +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var subscribeToOption = execution.getVariable('subscribeToOption');
var ticketId = S(subscribeToOption).prop("ticketId").value();

url_tb+'/api/support/v1/ticket/' + ticketId + '/comment';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1712bc2">
              <camunda:script scriptFormat="JavaScript">print('send option Email');
var response = connector.getVariable('response')
print("resp send email Options order to OpenCell" + response);
var respHeader = connector.getVariable("headers");
var respStatusCode = connector.getVariable("statusCode");
print("status code" + respStatusCode);
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0sfriyu</bpmn:incoming>
      <bpmn:outgoing>Flow_0fgw8wi</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0fgw8wi" sourceRef="Activity_0eu7gxm" targetRef="Activity_14tl03y" />
    <bpmn:serviceTask id="Activity_1csnmez" name="Comment Ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_support');
var subscribeToOption = execution.getVariable('subscribeToOption');
var ticketId = S(subscribeToOption).prop("ticketId").value();

url_tb+'/api/support/v1/ticket/' + ticketId + '/comment';</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var endOptionsInstallation = execution.getVariable('endOptionsInstallationEvent');
var comment = '';

if (endOptionsInstallation != null &amp;&amp; S(endOptionsInstallation).hasProp("status")) {
  var status = S(endOptionsInstallation).prop("status");
  var statusCode = S(status).prop("statusCode").value();
  if (S(status).hasProp("statusDescription")) {
    var statusDescription = S(status).prop("statusDescription").value();
    if(statusDescription != null) {
      comment = statusCode + ' - ' + statusDescription;
    }
  }
}

'{"comment":"' + comment+ '"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2ptk48h">
              <camunda:script scriptFormat="JavaScript">print('Comment Ticket cas #25 ');
var resp = connector.getVariable('response')
print('resp create order' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{

execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_13c2z82</bpmn:incoming>
      <bpmn:incoming>Flow_1qq86f8</bpmn:incoming>
      <bpmn:outgoing>Flow_1kwkdwd</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1kwkdwd" sourceRef="Activity_1csnmez" targetRef="InclusiveGateway_1vnp14s" />
    <bpmn:sequenceFlow id="Flow_13c2z82" name="Cancel Intervention" sourceRef="ExclusiveGateway_1ngiyzg" targetRef="Activity_1csnmez">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${returnInstallStatus== 'CANCELED'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="Activity_13c7esq" name="Apply Discount from initial order">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_customer= execution.getVariable('url_crm_customer');
var subscribeToInstallationOptions = execution.getVariable('subscribeToInstallationOptions');
var billingAccountCode  = S(subscribeToInstallationOptions).prop("customerId").value();;
url_customer+'/api/customer/v1/billingAccount/' + billingAccountCode + '/discounts'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscribeToInstallationOptions = execution.getVariable('subscribeToInstallationOptions');
var discountPlan = S(subscribeToInstallationOptions).prop("discountPlan");
'{"discountPlan":'+discountPlan+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create One shot charge api');
var resp = connector.getVariable('response')
print('resp create one shot charge' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_07jftby</bpmn:incoming>
      <bpmn:outgoing>Flow_0y8xls3</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0y8xls3" sourceRef="Activity_13c7esq" targetRef="Activity_1tl4033" />
    <bpmn:exclusiveGateway id="Gateway_0sjjbsr">
      <bpmn:incoming>Flow_0h2xene</bpmn:incoming>
      <bpmn:outgoing>Flow_0f64s90</bpmn:outgoing>
      <bpmn:outgoing>Flow_1x0x88v</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:exclusiveGateway id="Gateway_1wjqt14">
      <bpmn:incoming>Flow_0f64s90</bpmn:incoming>
      <bpmn:incoming>Flow_12x2sgv</bpmn:incoming>
      <bpmn:outgoing>Flow_1xatemp</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:serviceTask id="Activity_1r570nv" name="Apply Discount Plan">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_customer= execution.getVariable('url_crm_customer');
var subscribeToLogisticOptions = execution.getVariable('subscribeToLogisticOptions');
var billingAccountCode  = S(subscribeToLogisticOptions).prop("customerId").value();;
url_customer+'/api/customer/v1/billingAccount/' + billingAccountCode + '/discounts'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var subscribeToLogisticOptions = execution.getVariable('subscribeToLogisticOptions');
var discountPlan = S(subscribeToLogisticOptions).prop("discountPlan");
'{"discountPlan":'+discountPlan+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create One shot charge api');
var resp = connector.getVariable('response')
print('resp create one shot charge' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1x0x88v</bpmn:incoming>
      <bpmn:outgoing>Flow_12x2sgv</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:scriptTask id="Activity_1tl4033" name="get amendment data" scriptFormat="Javascript">
      <bpmn:incoming>Flow_0y8xls3</bpmn:incoming>
      <bpmn:outgoing>Flow_08g1ivp</bpmn:outgoing>
      <bpmn:script>print('get amendment data');
var amendmentBo = false;
var endOptionsInstallationEvent = execution.getVariable('endOptionsInstallationEvent');
if(endOptionsInstallationEvent != null){
	var status = S(endOptionsInstallationEvent).prop("status");
	if(status  != null &amp;&amp; S(status).hasProp("avenantURL")){
	  var avenantURL = S(status).prop("avenantURL").value();
	  if(avenantURL != null ){
		var subscription = S(endOptionsInstallationEvent).prop('subscription');  
		if(subscription  != null &amp;&amp; S(subscription).hasProp("services")){  
			var services = S(subscription).prop("services");
			if(services  != null &amp;&amp; S(services).hasProp("serviceInstance")){
				var serviceInstance = S(services).prop("serviceInstance").elements();
				var serviceTemplates = S("[]");
				for (var i=0; i &lt; serviceInstance.size(); i++) {
				  var subscriptionDate = serviceInstance[i].prop("subscriptionDate").value();
				  var installationDate = serviceInstance[i].prop("installationDate").value()
				  if(subscriptionDate == installationDate){
					 var service = S("{}").prop("code", serviceInstance[i].prop("code").value());
				  	serviceTemplates.append(service);
				  }
				}
				if(serviceTemplates.elements() != null &amp;&amp; serviceTemplates.elements().size() &gt; 0){
					amendmentBo = true;
				}
			} 
		}  		
	  }
	}
}
var amendment = S("{}");
if(amendmentBo == true){
	amendment.prop("amendment", amendmentBo);
	amendment.prop("serviceInstance", serviceTemplates);
}else{
	amendment.prop("amendment", amendmentBo);
}
execution.setVariable('amendment',amendment);
print('get amendment : ' + amendment);</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:inclusiveGateway id="Gateway_1vehvl8">
      <bpmn:incoming>Flow_08g1ivp</bpmn:incoming>
      <bpmn:outgoing>Flow_1enr7ie</bpmn:outgoing>
      <bpmn:outgoing>Flow_1qq86f8</bpmn:outgoing>
    </bpmn:inclusiveGateway>
    <bpmn:serviceTask id="Activity_1yptf05" name="Get Discount Available">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_catalog');
url_tb+'/api/catalog/v1/catalogManagement/discounts/available'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var userAccountCode = null;
var contractId = null;
var endOptionsInstallationEvent = execution.getVariable('endOptionsInstallationEvent');
if(endOptionsInstallationEvent != null){
	var user = S(endOptionsInstallationEvent).prop("user");
	if(user  != null &amp;&amp; S(user).hasProp("code")){
		userAccountCode = S(user).prop("code").value();
	}
	var subscription = S(endOptionsInstallationEvent).prop('subscription');  
	if(subscription  != null &amp;&amp; S(subscription).hasProp("code")){  
		contractId = S(subscription).prop("code").value();
	}
}
var amendment = execution.getVariable('amendment');
if(amendment  != null &amp;&amp; S(amendment).hasProp("serviceInstance")){
	var serviceInstance = S(amendment).prop("serviceInstance").elements();
	var serviceTemplates = S("[]");
	for (var i=0; i &lt; serviceInstance.size(); i++) {
		var service = S("{}").prop("code", serviceInstance[i].prop("code").value());
		service.prop("pricingDate", serviceInstance[i].prop("subscriptionDate").value());
		serviceTemplates.append(service);
	}
}

'{"userAccountCode":"' + userAccountCode + '"' +
',"contractId":"' + contractId + '"' +
',"serviceTemplates":' + serviceTemplates.toString() +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('*************Get Discount Available************');
var resp = connector.getVariable('response')
print('resp Get Discount Available  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)

if(resp != null &amp;&amp; S(resp).hasProp("serviceTemplates")){
	var serviceTemplates = S(resp).prop("serviceTemplates").elements();
	var discountAmendmentToApply = S("[]");
	for (var i=0; i &lt; serviceTemplates.size(); i++) {
		if(serviceTemplates[i].hasProp("discountsAvailables")){
			var discountsAvailable = serviceTemplates[i].prop("discountsAvailables").elements();
			for (var j=0; j &lt; discountsAvailable.size(); j++) {				
				discountAmendmentToApply.append(discountsAvailable[j]);
			}
		}		
	}
execution.setVariable('discountAmendmentToApply',discountAmendmentToApply)
print('get discountAmendmentToApply: ' + discountAmendmentToApply);	
}	
	

} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}	</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1enr7ie</bpmn:incoming>
      <bpmn:outgoing>Flow_13z7tbt</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Activity_0pxm8eo" name="Apply Discount new options from installation">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_customer= execution.getVariable('url_crm_customer');
var subscribeToInstallationOptions = execution.getVariable('subscribeToInstallationOptions');
var billingAccountCode  = S(subscribeToInstallationOptions).prop("customerId").value();;
url_customer+'/api/customer/v1/billingAccount/' + billingAccountCode + '/discounts'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var discountAmendmentToApply = execution.getVariable('discountAmendmentToApply');
var discountPlanForInstantiation = S("[]");
if(discountAmendmentToApply != null){
	var discountCodes = discountAmendmentToApply.elements();
	for (var i=0; i &lt; discountCodes.size(); i++) {
	  var discountCodeNode = S("{}").prop("discountPlanid", discountCodes[i].prop("discountPlanCode").value());
	  discountPlanForInstantiation.append(discountCodeNode);
	}
}
print('discountPlanForInstantiation : ' + discountPlanForInstantiation);
'{"discountPlan":' + discountPlanForInstantiation.toString() +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2b2lk51">
              <camunda:script scriptFormat="JavaScript">print('*************Apply Discount API ************');
var resp = connector.getVariable('response')
print('resp create emergency contact  ' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_13z7tbt</bpmn:incoming>
      <bpmn:outgoing>Flow_1vv0fjx</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:endEvent id="Event_09wdwka">
      <bpmn:incoming>Flow_1vv0fjx</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_08g1ivp" sourceRef="Activity_1tl4033" targetRef="Gateway_1vehvl8" />
    <bpmn:sequenceFlow id="Flow_1enr7ie" name="oui" sourceRef="Gateway_1vehvl8" targetRef="Activity_1yptf05">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">var amendment = execution.getVariable('amendment');
var amendmentBo = S(amendment).prop("amendment").value();

amendmentBo == true</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_13z7tbt" sourceRef="Activity_1yptf05" targetRef="Activity_0pxm8eo" />
    <bpmn:sequenceFlow id="Flow_1vv0fjx" sourceRef="Activity_0pxm8eo" targetRef="Event_09wdwka" />
    <bpmn:sequenceFlow id="Flow_1qq86f8" name="non" sourceRef="Gateway_1vehvl8" targetRef="Activity_1csnmez">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0644tqx" sourceRef="IntermediateCatchEvent_10caowb" targetRef="ServiceTask_1te9qdi" />
    <bpmn:sequenceFlow id="Flow_0h2xene" sourceRef="ServiceTask_0kx4vis" targetRef="Gateway_0sjjbsr" />
    <bpmn:sequenceFlow id="Flow_0f64s90" sourceRef="Gateway_0sjjbsr" targetRef="Gateway_1wjqt14">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!existDiscountPlan}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_1x0x88v" name="if discount plan exist" sourceRef="Gateway_0sjjbsr" targetRef="Activity_1r570nv">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${existDiscountPlan}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_12x2sgv" sourceRef="Activity_1r570nv" targetRef="Gateway_1wjqt14" />
    <bpmn:sequenceFlow id="Flow_1xatemp" sourceRef="Gateway_1wjqt14" targetRef="IntermediateCatchEvent_10caowb" />
    <bpmn:sequenceFlow id="SequenceFlow_0ony3hz" sourceRef="ServiceTask_1te9qdi" targetRef="ServiceTask_1iz7sqs" />
    <bpmn:sequenceFlow id="SequenceFlow_0jo2tv3" sourceRef="ServiceTask_1iz7sqs" targetRef="InclusiveGateway_1vnp14s" />
    <bpmn:serviceTask id="Activity_00z4t8x" name="Send Intervention to TeamTool">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/delegation/send-option-installation'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscribeToInstallationOptions');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('send intervention to teamTool');
var resp = connector.getVariable('response')
print('resp send intervention de team tool' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0xms4zq</bpmn:incoming>
      <bpmn:outgoing>Flow_17ts1tn</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_17ts1tn" sourceRef="Activity_00z4t8x" targetRef="IntermediateCatchEvent_15cxhb5" />
    <bpmn:textAnnotation id="TextAnnotation_0acjmby">
      <bpmn:text>Ajout de commentaire lorsque le client est injoignable</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_10uvhvm" sourceRef="ServiceTask_1tjfruc" targetRef="TextAnnotation_0acjmby" />
    <bpmn:textAnnotation id="TextAnnotation_0272ow4">
      <bpmn:text>On ajout le sous-motif dans OpenCell</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1vonq75" sourceRef="ServiceTask_0o6rxdb" targetRef="TextAnnotation_0272ow4" />
    <bpmn:textAnnotation id="TextAnnotation_1jhfelz">
      <bpmn:text>Vérifier si le CRC à indiquer si l'intervention est gratuite ou pas. si depuis l'app mobile alors intervention payante par défaut</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_08gldok" sourceRef="Gateway_1x96nzg" targetRef="TextAnnotation_1jhfelz" />
    <bpmn:textAnnotation id="TextAnnotation_023j7qd">
      <bpmn:text>On attend J+6 apres envoi à teamTool Logistique</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0ds5it5" sourceRef="IntermediateCatchEvent_10caowb" targetRef="TextAnnotation_023j7qd" />
    <bpmn:textAnnotation id="TextAnnotation_02z2cfn">
      <bpmn:text>Ajouter le numéro d'intervention en commentaire du ticket</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0x8mzle" sourceRef="Activity_00xrxqg" targetRef="TextAnnotation_02z2cfn" />
    <bpmn:textAnnotation id="TextAnnotation_0zwxl7q">
      <bpmn:text>Ajouter la description de la commande en commentaire</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0a13zsd" sourceRef="Activity_0eu7gxm" targetRef="TextAnnotation_0zwxl7q" />
  </bpmn:process>
  <bpmn:message id="Message_04x214t" name="subscriptionToOptionsMessageQA" />
  <bpmn:message id="Message_0lcj4ha" name="optionInstallProcessReturnQA" />
  <bpmn:error id="Error_07m3rlu" name="Error_0bc3sbf" />
  <bpmn:message id="Message_14qexns" name="planifProcessReturnQa" />
  <bpmn:message id="Message_1cl09o5" name="optionLogisticProcessReturn" />
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="optionQa">
      <bpmndi:BPMNEdge id="SequenceFlow_0jo2tv3_di" bpmnElement="SequenceFlow_0jo2tv3">
        <di:waypoint x="3320" y="1046" />
        <di:waypoint x="3760" y="1046" />
        <di:waypoint x="3760" y="674" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0ony3hz_di" bpmnElement="SequenceFlow_0ony3hz">
        <di:waypoint x="3090" y="1046" />
        <di:waypoint x="3220" y="1046" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1xatemp_di" bpmnElement="Flow_1xatemp">
        <di:waypoint x="2335" y="1046" />
        <di:waypoint x="2442" y="1046" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_12x2sgv_di" bpmnElement="Flow_12x2sgv">
        <di:waypoint x="2220" y="1150" />
        <di:waypoint x="2310" y="1150" />
        <di:waypoint x="2310" y="1071" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1x0x88v_di" bpmnElement="Flow_1x0x88v">
        <di:waypoint x="2000" y="1071" />
        <di:waypoint x="2000" y="1150" />
        <di:waypoint x="2120" y="1150" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1980" y="1112" width="74" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0f64s90_di" bpmnElement="Flow_0f64s90">
        <di:waypoint x="2025" y="1046" />
        <di:waypoint x="2285" y="1046" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0h2xene_di" bpmnElement="Flow_0h2xene">
        <di:waypoint x="1772" y="1046" />
        <di:waypoint x="1975" y="1046" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0644tqx_di" bpmnElement="SequenceFlow_0644tqx">
        <di:waypoint x="2478" y="1046" />
        <di:waypoint x="2990" y="1046" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1qq86f8_di" bpmnElement="Flow_1qq86f8">
        <di:waypoint x="3355" y="650" />
        <di:waypoint x="3468" y="650" />
        <di:waypoint x="3468" y="649" />
        <di:waypoint x="3580" y="649" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3474" y="647" width="19" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1vv0fjx_di" bpmnElement="Flow_1vv0fjx">
        <di:waypoint x="3520" y="430" />
        <di:waypoint x="3572" y="430" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_13z7tbt_di" bpmnElement="Flow_13z7tbt">
        <di:waypoint x="3380" y="430" />
        <di:waypoint x="3420" y="430" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1enr7ie_di" bpmnElement="Flow_1enr7ie">
        <di:waypoint x="3330" y="625" />
        <di:waypoint x="3330" y="470" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3307" y="519" width="15" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_08g1ivp_di" bpmnElement="Flow_08g1ivp">
        <di:waypoint x="3250" y="649" />
        <di:waypoint x="3278" y="649" />
        <di:waypoint x="3278" y="650" />
        <di:waypoint x="3305" y="650" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0y8xls3_di" bpmnElement="Flow_0y8xls3">
        <di:waypoint x="3080" y="659" />
        <di:waypoint x="3150" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_13c2z82_di" bpmnElement="Flow_13c2z82">
        <di:waypoint x="2387" y="684" />
        <di:waypoint x="2387" y="800" />
        <di:waypoint x="3630" y="800" />
        <di:waypoint x="3630" y="689" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2415" y="766" width="58" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1kwkdwd_di" bpmnElement="Flow_1kwkdwd">
        <di:waypoint x="3680" y="649" />
        <di:waypoint x="3735" y="649" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0fgw8wi_di" bpmnElement="Flow_0fgw8wi">
        <di:waypoint x="490" y="659" />
        <di:waypoint x="540" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0j75vfj_di" bpmnElement="Flow_0j75vfj">
        <di:waypoint x="770" y="800" />
        <di:waypoint x="890" y="800" />
        <di:waypoint x="890" y="699" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1217oqo_di" bpmnElement="Flow_1217oqo">
        <di:waypoint x="640" y="659" />
        <di:waypoint x="685" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1lg1t9y_di" bpmnElement="SequenceFlow_1lg1t9y">
        <di:waypoint x="2270" y="634" />
        <di:waypoint x="2270" y="470" />
        <di:waypoint x="2880" y="470" />
        <di:waypoint x="2880" y="619" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2307" y="437" width="80" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0dpa2b5_di" bpmnElement="SequenceFlow_0dpa2b5">
        <di:waypoint x="2295" y="659" />
        <di:waypoint x="2362" y="659" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2288" y="666" width="83" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1qrsh8m_di" bpmnElement="SequenceFlow_1qrsh8m">
        <di:waypoint x="735" y="659" />
        <di:waypoint x="840" y="659" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="750" y="627" width="76" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0mjnx89_di" bpmnElement="SequenceFlow_0mjnx89">
        <di:waypoint x="710" y="684" />
        <di:waypoint x="710" y="760" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="712" y="696" width="76" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0sfriyu_di" bpmnElement="SequenceFlow_0sfriyu">
        <di:waypoint x="340" y="659" />
        <di:waypoint x="390" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1jbps7x_di" bpmnElement="Flow_1jbps7x">
        <di:waypoint x="2655" y="659" />
        <di:waypoint x="2710" y="659" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2653" y="599" width="76" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_11f4rxe_di" bpmnElement="Flow_11f4rxe">
        <di:waypoint x="2630" y="684" />
        <di:waypoint x="2630" y="760" />
        <di:waypoint x="2860" y="760" />
        <di:waypoint x="2860" y="699" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2692" y="726" width="76" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1k6dvtr_di" bpmnElement="SequenceFlow_1k6dvtr">
        <di:waypoint x="3840" y="241" />
        <di:waypoint x="3840" y="430" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0cp7bzi_di" bpmnElement="SequenceFlow_0cp7bzi">
        <di:waypoint x="1784" y="351" />
        <di:waypoint x="2040" y="351" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1958slg_di" bpmnElement="SequenceFlow_1958slg">
        <di:waypoint x="2146" y="659" />
        <di:waypoint x="2245" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0g6o0bs_di" bpmnElement="SequenceFlow_0g6o0bs">
        <di:waypoint x="1873" y="659" />
        <di:waypoint x="1936" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_13molk9_di" bpmnElement="SequenceFlow_13molk9">
        <di:waypoint x="2091" y="727" />
        <di:waypoint x="2121" y="727" />
        <di:waypoint x="2121" y="684" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0gapjn5_di" bpmnElement="SequenceFlow_0gapjn5">
        <di:waypoint x="1986" y="659" />
        <di:waypoint x="2096" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0rss88d_di" bpmnElement="SequenceFlow_0rss88d">
        <di:waypoint x="1961" y="684" />
        <di:waypoint x="1961" y="727" />
        <di:waypoint x="1991" y="727" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0ai54j5_di" bpmnElement="SequenceFlow_0ai54j5">
        <di:waypoint x="1625" y="659" />
        <di:waypoint x="1837" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_07gz8m2_di" bpmnElement="SequenceFlow_07gz8m2">
        <di:waypoint x="1515" y="659" />
        <di:waypoint x="1575" y="659" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1516" y="626" width="58" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0iv0l5q_di" bpmnElement="SequenceFlow_0iv0l5q">
        <di:waypoint x="1490" y="634" />
        <di:waypoint x="1490" y="351" />
        <di:waypoint x="1684" y="351" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1476" y="490" width="58" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1vcdda2_di" bpmnElement="SequenceFlow_1vcdda2">
        <di:waypoint x="1580" y="811" />
        <di:waypoint x="1420" y="811" />
        <di:waypoint x="1420" y="677" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_09a1qr8_di" bpmnElement="SequenceFlow_09a1qr8">
        <di:waypoint x="1490" y="684" />
        <di:waypoint x="1490" y="791" />
        <di:waypoint x="1580" y="791" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1499" y="753" width="62" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0f5w48k_di" bpmnElement="SequenceFlow_0f5w48k">
        <di:waypoint x="1570" y="971" />
        <di:waypoint x="1420" y="971" />
        <di:waypoint x="1420" y="677" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1j7jg2a_di" bpmnElement="SequenceFlow_1j7jg2a">
        <di:waypoint x="1490" y="684" />
        <di:waypoint x="1490" y="951" />
        <di:waypoint x="1570" y="951" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1488" y="891" width="63" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0hd0ruz_di" bpmnElement="SequenceFlow_0hd0ruz">
        <di:waypoint x="1600" y="634" />
        <di:waypoint x="1600" y="603" />
        <di:waypoint x="1610" y="603" />
        <di:waypoint x="1610" y="571" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_05bp391_di" bpmnElement="SequenceFlow_05bp391">
        <di:waypoint x="1610" y="451" />
        <di:waypoint x="1610" y="491" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_026w8ds_di" bpmnElement="SequenceFlow_026w8ds">
        <di:waypoint x="1750" y="506" />
        <di:waypoint x="1750" y="411" />
        <di:waypoint x="1660" y="411" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_06t1jmk_di" bpmnElement="SequenceFlow_06t1jmk">
        <di:waypoint x="1660" y="531" />
        <di:waypoint x="1725" y="531" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0nkx8wt_di" bpmnElement="SequenceFlow_0nkx8wt">
        <di:waypoint x="2005" y="521" />
        <di:waypoint x="2052" y="521" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1viafdq_di" bpmnElement="SequenceFlow_1viafdq">
        <di:waypoint x="1980" y="496" />
        <di:waypoint x="1980" y="411" />
        <di:waypoint x="1930" y="411" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0y3i9z1_di" bpmnElement="SequenceFlow_0y3i9z1">
        <di:waypoint x="1920" y="521" />
        <di:waypoint x="1955" y="521" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0pabsj8_di" bpmnElement="SequenceFlow_0pabsj8">
        <di:waypoint x="1870" y="451" />
        <di:waypoint x="1870" y="481" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1w212od_di" bpmnElement="SequenceFlow_1w212od">
        <di:waypoint x="1775" y="531" />
        <di:waypoint x="1798" y="531" />
        <di:waypoint x="1798" y="521" />
        <di:waypoint x="1820" y="521" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0usl7wi_di" bpmnElement="SequenceFlow_0usl7wi">
        <di:waypoint x="1438" y="659" />
        <di:waypoint x="1465" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1ddbua3_di" bpmnElement="SequenceFlow_1ddbua3">
        <di:waypoint x="2140" y="351" />
        <di:waypoint x="3760" y="351" />
        <di:waypoint x="3760" y="624" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1tnoqta_di" bpmnElement="Flow_1tnoqta">
        <di:waypoint x="3056" y="201" />
        <di:waypoint x="3118" y="201" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1f6cpex_di" bpmnElement="Flow_1f6cpex">
        <di:waypoint x="2778" y="201" />
        <di:waypoint x="2956" y="201" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_08d483e_di" bpmnElement="SequenceFlow_08d483e">
        <di:waypoint x="2640" y="201" />
        <di:waypoint x="2742" y="201" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2648" y="183" width="83" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1itnrin_di" bpmnElement="SequenceFlow_1itnrin">
        <di:waypoint x="2550" y="201" />
        <di:waypoint x="2590" y="201" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0kfj7z1_di" bpmnElement="SequenceFlow_0kfj7z1">
        <di:waypoint x="2575" y="550" />
        <di:waypoint x="2662" y="550" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_09wejo3_di" bpmnElement="SequenceFlow_09wejo3">
        <di:waypoint x="2387" y="634" />
        <di:waypoint x="2387" y="550" />
        <di:waypoint x="2475" y="550" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2391" y="513" width="58" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_14h8ih3_di" bpmnElement="SequenceFlow_14h8ih3">
        <di:waypoint x="2412" y="659" />
        <di:waypoint x="2475" y="659" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2410" y="624" width="58" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_16sgjm5_di" bpmnElement="Flow_16sgjm5">
        <di:waypoint x="1100" y="659" />
        <di:waypoint x="1155" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1fszyco_di" bpmnElement="Flow_1fszyco">
        <di:waypoint x="940" y="659" />
        <di:waypoint x="1000" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_07jftby_di" bpmnElement="SequenceFlow_07jftby">
        <di:waypoint x="2940" y="659" />
        <di:waypoint x="2980" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1h9zj4s_di" bpmnElement="SequenceFlow_1h9zj4s">
        <di:waypoint x="2810" y="659" />
        <di:waypoint x="2840" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1tc761p_di" bpmnElement="SequenceFlow_1tc761p">
        <di:waypoint x="2575" y="659" />
        <di:waypoint x="2605" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0odaa77_di" bpmnElement="SequenceFlow_0odaa77">
        <di:waypoint x="3785" y="649" />
        <di:waypoint x="3950" y="649" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0mcftxs_di" bpmnElement="SequenceFlow_0mcftxs">
        <di:waypoint x="1180" y="684" />
        <di:waypoint x="1180" y="1046" />
        <di:waypoint x="1672" y="1046" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1368" y="1067" width="78" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0xms4zq_di" bpmnElement="SequenceFlow_0xms4zq">
        <di:waypoint x="1205" y="659" />
        <di:waypoint x="1260" y="659" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1188" y="707" width="73" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1go1pwb_di" bpmnElement="SequenceFlow_1go1pwb">
        <di:waypoint x="3840" y="510" />
        <di:waypoint x="3840" y="531" />
        <di:waypoint x="3760" y="531" />
        <di:waypoint x="3760" y="624" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1gdt02x_di" bpmnElement="SequenceFlow_1gdt02x">
        <di:waypoint x="3303" y="201" />
        <di:waypoint x="3790" y="201" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1msruwu_di" bpmnElement="SequenceFlow_1msruwu">
        <di:waypoint x="4050" y="649" />
        <di:waypoint x="4146" y="649" />
        <di:waypoint x="4146" y="650" />
        <di:waypoint x="4242" y="650" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0tdub7k_di" bpmnElement="SequenceFlow_0tdub7k">
        <di:waypoint x="2615" y="226" />
        <di:waypoint x="2615" y="270" />
        <di:waypoint x="3760" y="270" />
        <di:waypoint x="3760" y="624" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0wkac3r_di" bpmnElement="SequenceFlow_0wkac3r">
        <di:waypoint x="3154" y="201" />
        <di:waypoint x="3203" y="201" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1jg58k7_di" bpmnElement="SequenceFlow_1jg58k7">
        <di:waypoint x="1180" y="634" />
        <di:waypoint x="1180" y="201" />
        <di:waypoint x="1942" y="201" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1427" y="183" width="63" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_07dhm1g_di" bpmnElement="SequenceFlow_07dhm1g">
        <di:waypoint x="2406" y="201" />
        <di:waypoint x="2450" y="201" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_12fac8q_di" bpmnElement="SequenceFlow_12fac8q">
        <di:waypoint x="1978" y="201" />
        <di:waypoint x="2090" y="201" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1ocpgem_di" bpmnElement="SequenceFlow_1ocpgem">
        <di:waypoint x="2190" y="201" />
        <di:waypoint x="2306" y="201" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1ss1f7o_di" bpmnElement="SequenceFlow_1ss1f7o">
        <di:waypoint x="188" y="659" />
        <di:waypoint x="240" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_17ts1tn_di" bpmnElement="Flow_17ts1tn">
        <di:waypoint x="1360" y="659" />
        <di:waypoint x="1402" y="659" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="StartEvent_0aj30ys_di" bpmnElement="StartEvent_1">
        <dc:Bounds x="152" y="641" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1rsj9xj_di" bpmnElement="ServiceTask_1rsj9xj">
        <dc:Bounds x="2090" y="161" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_081d4j0_di" bpmnElement="IntermediateThrowEvent_1jo9oz2">
        <dc:Bounds x="1942" y="183" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_091muom_di" bpmnElement="ServiceTask_091muom">
        <dc:Bounds x="2306" y="161" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0s8o9qw_di" bpmnElement="ExclusiveGateway_0s8o9qw" isMarkerVisible="true">
        <dc:Bounds x="2590" y="176" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2620" y="243" width="80" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_06iz6cb_di" bpmnElement="IntermediateThrowEvent_19b7ls6">
        <dc:Bounds x="3118" y="183" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_0haikm9_di" bpmnElement="EndEvent_0haikm9">
        <dc:Bounds x="4242" y="641" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0e82rwa_di" bpmnElement="ServiceTask_0e82rwa">
        <dc:Bounds x="3950" y="609" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0o6rxdb_di" bpmnElement="ServiceTask_0o6rxdb">
        <dc:Bounds x="3203" y="161" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1ddt8sv_di" bpmnElement="ServiceTask_1ddt8sv">
        <dc:Bounds x="3790" y="430" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="InclusiveGateway_1l195oe_di" bpmnElement="ExclusiveGateway_0dib119">
        <dc:Bounds x="1155" y="634" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1106" y="634" width="60" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="InclusiveGateway_1vnp14s_di" bpmnElement="InclusiveGateway_1vnp14s">
        <dc:Bounds x="3735" y="624" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3696" y="585" width="60" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_15xbvaj_di" bpmnElement="IntermediateThrowEvent_0604xxg">
        <dc:Bounds x="1837" y="641" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_00nvo5y_di" bpmnElement="ServiceTask_00nvo5y">
        <dc:Bounds x="2475" y="619" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0nczyzc_di" bpmnElement="ServiceTask_0nczyzc">
        <dc:Bounds x="2710" y="619" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1iq8up2_di" bpmnElement="ServiceTask_1iq8up2">
        <dc:Bounds x="2840" y="619" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1c4vfp9" bpmnElement="Activity_00z4t8x">
        <dc:Bounds x="1260" y="619" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="SubProcess_0mmrcxb_di" bpmnElement="SubProcess_0mmrcxb" isExpanded="true">
        <dc:Bounds x="1739" y="1286" width="833" height="300" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="SequenceFlow_1vm1bzx_di" bpmnElement="SequenceFlow_1vm1bzx">
        <di:waypoint x="1979" y="1411" />
        <di:waypoint x="1979" y="1501" />
        <di:waypoint x="2112" y="1501" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_08d6zrk_di" bpmnElement="SequenceFlow_08d6zrk">
        <di:waypoint x="2212" y="1501" />
        <di:waypoint x="2322" y="1501" />
        <di:waypoint x="2322" y="1426" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1waihu6_di" bpmnElement="SequenceFlow_1waihu6">
        <di:waypoint x="2004" y="1386" />
        <di:waypoint x="2112" y="1386" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0zlftus_di" bpmnElement="SequenceFlow_0zlftus">
        <di:waypoint x="1897" y="1386" />
        <di:waypoint x="1954" y="1386" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0e4k2j3_di" bpmnElement="SequenceFlow_0e4k2j3">
        <di:waypoint x="2212" y="1386" />
        <di:waypoint x="2272" y="1386" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0xwilxw_di" bpmnElement="SequenceFlow_0xwilxw">
        <di:waypoint x="2372" y="1386" />
        <di:waypoint x="2434" y="1386" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="UserTask_0bf3iim_di" bpmnElement="UserTask_0bf3iim">
        <dc:Bounds x="2112" y="1346" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ScriptTask_19nyshb_di" bpmnElement="ScriptTask_19nyshb">
        <dc:Bounds x="2272" y="1346" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_1e2jido_di" bpmnElement="EndEvent_1e2jido">
        <dc:Bounds x="2434" y="1368" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="StartEvent_0i3ud0x_di" bpmnElement="StartEvent_0i3ud0x">
        <dc:Bounds x="1861" y="1368" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1xt5hlf_di" bpmnElement="ExclusiveGateway_1xt5hlf" isMarkerVisible="true">
        <dc:Bounds x="1954" y="1361" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0dohh4b_di" bpmnElement="ServiceTask_0dohh4b">
        <dc:Bounds x="2112" y="1461" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0hhfzhl_di" bpmnElement="Activity_0hhfzhl">
        <dc:Bounds x="840" y="619" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0jsxg0g_di" bpmnElement="Activity_0jsxg0g">
        <dc:Bounds x="1000" y="619" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1ngiyzg_di" bpmnElement="ExclusiveGateway_1ngiyzg" isMarkerVisible="true">
        <dc:Bounds x="2362" y="634" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ScriptTask_0xsk721_di" bpmnElement="ScriptTask_0xsk721">
        <dc:Bounds x="2475" y="510" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_08ecrjs_di" bpmnElement="EndEvent_08ecrjs">
        <dc:Bounds x="2662" y="532" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1s3gc2y_di" bpmnElement="ServiceTask_1s3gc2y">
        <dc:Bounds x="2450" y="161" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0kx4vis_di" bpmnElement="ServiceTask_0kx4vis">
        <dc:Bounds x="1672" y="1006" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_10caowb_di" bpmnElement="IntermediateCatchEvent_10caowb">
        <dc:Bounds x="2442" y="1028" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1te9qdi_di" bpmnElement="ServiceTask_1te9qdi">
        <dc:Bounds x="2990" y="1006" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1iz7sqs_di" bpmnElement="ServiceTask_1iz7sqs">
        <dc:Bounds x="3220" y="1006" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0o2ywp3_di" bpmnElement="ServiceTask_0o2ywp3">
        <dc:Bounds x="240" y="619" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_03ah09n_di" bpmnElement="Activity_14yi6lr">
        <dc:Bounds x="2956" y="161" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_07xfvfe_di" bpmnElement="Event_1903ask">
        <dc:Bounds x="2742" y="183" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1cxvtyy_di" bpmnElement="ServiceTask_1cxvtyy">
        <dc:Bounds x="1580" y="751" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1tjfruc_di" bpmnElement="ServiceTask_1tjfruc">
        <dc:Bounds x="1570" y="911" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1wutw2k_di" bpmnElement="ServiceTask_1wutw2k">
        <dc:Bounds x="2040" y="311" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="IntermediateCatchEvent_15cxhb5_di" bpmnElement="IntermediateCatchEvent_15cxhb5">
        <dc:Bounds x="1402" y="641" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0jmnydo_di" bpmnElement="ExclusiveGateway_0jmnydo" isMarkerVisible="true">
        <dc:Bounds x="1465" y="634" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="InclusiveGateway_1vhy8xz_di" bpmnElement="InclusiveGateway_1vhy8xz">
        <dc:Bounds x="1575" y="634" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0nbu3nw_di" bpmnElement="ServiceTask_0nbu3nw">
        <dc:Bounds x="1820" y="481" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_00857lx_di" bpmnElement="UserTask_00857lx">
        <dc:Bounds x="1830" y="371" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1het873_di" bpmnElement="ExclusiveGateway_1het873" isMarkerVisible="true">
        <dc:Bounds x="1725" y="506" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1oa9byl_di" bpmnElement="ExclusiveGateway_1oa9byl" isMarkerVisible="true">
        <dc:Bounds x="1955" y="496" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_0rcyqtp_di" bpmnElement="EndEvent_0rcyqtp">
        <dc:Bounds x="2052" y="503" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_1gu2uk6_di" bpmnElement="UserTask_1gu2uk6">
        <dc:Bounds x="1560" y="371" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0ehxrzb_di" bpmnElement="ServiceTask_0ehxrzb">
        <dc:Bounds x="1560" y="491" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0un9ieq_di" bpmnElement="ExclusiveGateway_0un9ieq" isMarkerVisible="true">
        <dc:Bounds x="1936" y="634" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0e6gyvd_di" bpmnElement="ServiceTask_0e6gyvd">
        <dc:Bounds x="1991" y="687" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0ekunum_di" bpmnElement="ExclusiveGateway_0ekunum" isMarkerVisible="true">
        <dc:Bounds x="2096" y="634" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0iw37bo_di" bpmnElement="ServiceTask_0iw37bo">
        <dc:Bounds x="1684" y="311" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0axjyuk_di" bpmnElement="ServiceTask_0axjyuk">
        <dc:Bounds x="3790" y="161" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1x96nzg_di" bpmnElement="Gateway_1x96nzg" isMarkerVisible="true">
        <dc:Bounds x="2605" y="634" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0lfuasj_di" bpmnElement="ExclusiveGateway_0lfuasj" isMarkerVisible="true">
        <dc:Bounds x="685" y="634" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0yh1ley_di" bpmnElement="ExclusiveGateway_0yh1ley" isMarkerVisible="true">
        <dc:Bounds x="2245" y="634" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1ao2hmf" bpmnElement="Activity_14tl03y">
        <dc:Bounds x="540" y="619" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_05zd0ad" bpmnElement="Activity_00xrxqg" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="670" y="760" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1d841xv" bpmnElement="Activity_0eu7gxm">
        <dc:Bounds x="390" y="619" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0j6o9zw" bpmnElement="Activity_1csnmez">
        <dc:Bounds x="3580" y="609" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_13c7esq_di" bpmnElement="Activity_13c7esq">
        <dc:Bounds x="2980" y="619" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0sjjbsr_di" bpmnElement="Gateway_0sjjbsr" isMarkerVisible="true">
        <dc:Bounds x="1975" y="1021" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1wjqt14_di" bpmnElement="Gateway_1wjqt14" isMarkerVisible="true">
        <dc:Bounds x="2285" y="1021" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1r570nv_di" bpmnElement="Activity_1r570nv">
        <dc:Bounds x="2120" y="1110" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1tl4033_di" bpmnElement="Activity_1tl4033" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="3150" y="609" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1vehvl8_di" bpmnElement="Gateway_1vehvl8">
        <dc:Bounds x="3305" y="625" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1yptf05_di" bpmnElement="Activity_1yptf05" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="3280" y="390" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0pxm8eo_di" bpmnElement="Activity_0pxm8eo" bioc:stroke="black" bioc:fill="white">
        <dc:Bounds x="3420" y="390" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_09wdwka_di" bpmnElement="Event_09wdwka">
        <dc:Bounds x="3572" y="412" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0acjmby_di" bpmnElement="TextAnnotation_0acjmby">
        <dc:Bounds x="1920" y="871" width="100" height="68" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0272ow4_di" bpmnElement="TextAnnotation_0272ow4">
        <dc:Bounds x="3303" y="81" width="100" height="55" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1jhfelz_di" bpmnElement="TextAnnotation_1jhfelz">
        <dc:Bounds x="2527" y="840" width="247.99257347940917" height="55.330634278002705" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_023j7qd_di" bpmnElement="TextAnnotation_023j7qd">
        <dc:Bounds x="2370" y="919" width="100" height="64" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_02z2cfn_di" bpmnElement="TextAnnotation_02z2cfn">
        <dc:Bounds x="650" y="910" width="190" height="41" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0zwxl7q_di" bpmnElement="TextAnnotation_0zwxl7q">
        <dc:Bounds x="420" y="503" width="150" height="55" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Association_10uvhvm_di" bpmnElement="Association_10uvhvm">
        <di:waypoint x="1670" y="944" />
        <di:waypoint x="1920" y="912" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1vonq75_di" bpmnElement="Association_1vonq75">
        <di:waypoint x="3295" y="162" />
        <di:waypoint x="3323" y="136" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_08gldok_di" bpmnElement="Association_08gldok">
        <di:waypoint x="2625" y="679" />
        <di:waypoint x="2581" y="840" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0ds5it5_di" bpmnElement="Association_0ds5it5">
        <di:waypoint x="2454" y="1029" />
        <di:waypoint x="2438" y="983" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0x8mzle_di" bpmnElement="Association_0x8mzle">
        <di:waypoint x="714" y="840" />
        <di:waypoint x="702" y="910" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0a13zsd_di" bpmnElement="Association_0a13zsd">
        <di:waypoint x="449" y="619" />
        <di:waypoint x="461" y="558" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>