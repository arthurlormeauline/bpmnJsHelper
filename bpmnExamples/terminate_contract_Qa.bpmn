<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Definitions_0cd2mqd" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="3.6.0">
  <bpmn:process id="terminateContactQa" name="Terminate Contract QA" isExecutable="true">
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>SequenceFlow_06bhpo8</bpmn:outgoing>
      <bpmn:messageEventDefinition messageRef="Message_0aaoot7" />
    </bpmn:startEvent>
    <bpmn:sequenceFlow id="SequenceFlow_06bhpo8" sourceRef="StartEvent_1" targetRef="ServiceTask_1xmsfx4" />
    <bpmn:endEvent id="EndEvent_1fet437">
      <bpmn:incoming>SequenceFlow_0qf8d40</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask id="ServiceTask_1y2rz74" name="Terminate /Withdrawal contract">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/termination-contract'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("terminate contract");
var resp = connector.getVariable("response");
print("terminate contract :" + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_03ssgsg</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0dqubgx</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0dqubgx" sourceRef="ServiceTask_1y2rz74" targetRef="ServiceTask_0c92c0x" />
    <bpmn:serviceTask id="ServiceTask_0oc4eob" name="Comment and close ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/update-termination-ticket'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +',"ticketId":' + execution.getVariable('ticketId') + ',"terminationDate":'+execution.getVariable('terminationDateUpdate')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("update tickets");
var resp = connector.getVariable("response");
print("update comments and tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0c94sa4</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0cgxvw9</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1socf2f</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1a6viwm</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0qf8d40</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="Task_08erf2q" name="Update Subscription&#39;s TicketId">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/update-contract-ticket-id'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') + 
',"terminationRequest":' + execution.getVariable('termination') +
',"ticketId":' + execution.getVariable('ticketId') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('update ticketId custom field opencell');
var resp = connector.getVariable('response')
print('update ticketId custom field opencell' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1t22r3u</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1cltlhy</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1yxacci" sourceRef="BoundaryEvent_0eg6pzk" targetRef="ServiceTask_1oyqt5x" />
    <bpmn:receiveTask id="Task_076ghgl" name="Wait termination date" messageRef="Message_0fmcr48">
      <bpmn:incoming>SequenceFlow_1917lb0</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0d7gwdr</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0ahchbb</bpmn:outgoing>
    </bpmn:receiveTask>
    <bpmn:boundaryEvent id="BoundaryEvent_0eg6pzk" attachedToRef="Task_076ghgl">
      <bpmn:outgoing>SequenceFlow_1yxacci</bpmn:outgoing>
      <bpmn:timerEventDefinition>
        <bpmn:timeDate xsi:type="bpmn:tFormalExpression">${terminationDate}</bpmn:timeDate>
      </bpmn:timerEventDefinition>
    </bpmn:boundaryEvent>
    <bpmn:sequenceFlow id="SequenceFlow_0ahchbb" sourceRef="Task_076ghgl" targetRef="ServiceTask_178wmwc" />
    <bpmn:serviceTask id="ServiceTask_0bvlxk3" name="Delete contract&#39;s ticket Id">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/delete-contract-ticket-id'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') + 
',"terminationRequest":' + execution.getVariable('termination') +
',"ticketId":' + execution.getVariable('ticketId') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('deleteticketId custom field opencell');
var resp = connector.getVariable('response')
print('resp deleteticketId custom field opencell' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1xrpxob</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0c94sa4</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0c94sa4" sourceRef="ServiceTask_0bvlxk3" targetRef="ServiceTask_0oc4eob" />
    <bpmn:subProcess id="Activity_1xfw40h" triggeredByEvent="true">
      <bpmn:startEvent id="Event_1871wws">
        <bpmn:outgoing>Flow_1kfz3aa</bpmn:outgoing>
        <bpmn:errorEventDefinition id="ErrorEventDefinition_1f8mwn3" errorRef="Error_17k1fqc" camunda:errorMessageVariable="errorTaskId" />
      </bpmn:startEvent>
      <bpmn:sequenceFlow id="Flow_1kfz3aa" sourceRef="Event_1871wws" targetRef="Activity_1kuco63" />
      <bpmn:userTask id="Activity_1kuco63" name="Review Task">
        <bpmn:incoming>Flow_1kfz3aa</bpmn:incoming>
        <bpmn:outgoing>Flow_0mssr82</bpmn:outgoing>
      </bpmn:userTask>
      <bpmn:sequenceFlow id="Flow_0mssr82" sourceRef="Activity_1kuco63" targetRef="Activity_0z4q4a2" />
      <bpmn:scriptTask id="Activity_0z4q4a2" name="Return to Last Task" camunda:asyncBefore="true" scriptFormat="JavaScript">
        <bpmn:incoming>Flow_0mssr82</bpmn:incoming>
        <bpmn:outgoing>Flow_0w5y08e</bpmn:outgoing>
        <bpmn:script>print('Return to flow is Running');
var errorTaskId = execution.getVariable('errorTaskId');
if(errorTaskId == null){
print('No where to go back to');
}else{          execution.getProcessEngineServices().
getRuntimeService().createProcessInstanceModification(execution.getProcessInstanceId()).startBeforeActivity(errorTaskId).
execute();
}</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:endEvent id="Event_1cuh8n4">
        <bpmn:incoming>Flow_0w5y08e</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:sequenceFlow id="Flow_0w5y08e" sourceRef="Activity_0z4q4a2" targetRef="Event_1cuh8n4" />
    </bpmn:subProcess>
    <bpmn:serviceTask id="ServiceTask_0c92c0x" name="Send Message To Logistics">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/send-new-termination-logistics'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') + 
',"terminationRequest":' + execution.getVariable('termination') +
',"ticketId":' + execution.getVariable('ticketId') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("send message to logistic");
var resp = connector.getVariable("response");
print("send message to logistic:" + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0dqubgx</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_19jagu2</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0qf8d40" sourceRef="ServiceTask_0oc4eob" targetRef="EndEvent_1fet437" />
    <bpmn:serviceTask id="ServiceTask_15cvbvc" name="Terminate Contract Aquila">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/aquila-termination-contract'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("terminate contract aquila");
var resp = connector.getVariable("response");
print("terminate contract aquila : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_19jagu2</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_02b4s0p</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_02b4s0p" sourceRef="ServiceTask_15cvbvc" targetRef="ServiceTask_1b8jo07" />
    <bpmn:serviceTask id="ServiceTask_1xmsfx4" name="Get keycloak token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/auth/realms/Protectline/protocol/openid-connect/token'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:outputParameter name="Output_1tcqe5d">
              <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_06bhpo8</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1exw547</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_1b8jo07" name="Terminate Contract Usage">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/usage-termination-contracat'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("terminate contract usage");
var resp = connector.getVariable("response");
print("terminate contract usage: " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_02b4s0p</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0cgxvw9</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0cgxvw9" sourceRef="ServiceTask_1b8jo07" targetRef="ServiceTask_0oc4eob" />
    <bpmn:exclusiveGateway id="ExclusiveGateway_0cbgrln">
      <bpmn:incoming>SequenceFlow_1exw547</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1x4908g</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0fpwymx</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_1x4908g" name="Status contrat = ACTIVE" sourceRef="ExclusiveGateway_0cbgrln" targetRef="ExclusiveGateway_0yccjgo">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${statusContrat== 'ACTIVE'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_0l0f9cp" name="confirm withdrawal process Subscription">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/cancelWithdrawalProcess'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token": "' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +',"codeCloture":' + execution.getVariable('codeCloture') +',"email":"' + execution.getVariable('email')+'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("confirm withdrawal process Subscription");
var resp = connector.getVariable("response");
print("create tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1razuii</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1pjyv8c</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:endEvent id="EndEvent_0y4ojw6">
      <bpmn:incoming>SequenceFlow_1nbwdlb</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1ppxatp">
      <bpmn:incoming>SequenceFlow_09ednhb</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0geoxa7</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1tqs4vm</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0geoxa7" name="action = confirm" sourceRef="ExclusiveGateway_1ppxatp" targetRef="ExclusiveGateway_1wnng49">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${action== 'confirm'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_0gvlcaf" name="cancel withdrawal process Subscription">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/cancelWithdrawalProcess'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token": "' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +',"codeCloture":' + execution.getVariable('codeCloture') +',"email":"' + execution.getVariable('email')+'"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("cancel withdrawal process Subscription");
var resp = connector.getVariable("response");
print("create tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0rl17u0</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0p9jprw</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_04uzzdf</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1tqs4vm" name="action = cancel" sourceRef="ExclusiveGateway_1ppxatp" targetRef="ExclusiveGateway_0ph0dnn">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${action== 'cancel'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0dlfuar" name="termination Type">
      <bpmn:incoming>SequenceFlow_0k1ghg7</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0u6z4xm</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0a9ix91</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0u6z4xm" name="RES" sourceRef="ExclusiveGateway_0dlfuar" targetRef="ExclusiveGateway_0n8vp20">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${terminationType== 'RES'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0n8vp20" name="termination Reason">
      <bpmn:incoming>SequenceFlow_0u6z4xm</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_06adcq7</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1swrqbx</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_06adcq7" name="&#60;&#62; [OS7,OS0G]" sourceRef="ExclusiveGateway_0n8vp20" targetRef="ExclusiveGateway_0osusol">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!legitimateReason}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0osusol" name="Engaged">
      <bpmn:incoming>SequenceFlow_06adcq7</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0p5415b</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0v2074l</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0p5415b" name="Yes" sourceRef="ExclusiveGateway_0osusol" targetRef="ExclusiveGateway_1bgp8m0">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${engaged}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="ExclusiveGateway_15ssxrn" name="termination type">
      <bpmn:incoming>SequenceFlow_0a9ix91</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0v2074l</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1swrqbx</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_0h4yrha</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1hgjjqf</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1lg94ws</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1qppr0j</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_1lg94ws" name="RES" sourceRef="ExclusiveGateway_15ssxrn" targetRef="ServiceTask_0ib7q86">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${terminationType== 'RES'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1qppr0j" name="RET" sourceRef="ExclusiveGateway_15ssxrn" targetRef="ServiceTask_139n1lk">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${terminationType== 'RET'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0a9ix91" name="RET" sourceRef="ExclusiveGateway_0dlfuar" targetRef="ExclusiveGateway_15ssxrn">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${terminationType== 'RET'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0v2074l" name="No" sourceRef="ExclusiveGateway_0osusol" targetRef="ExclusiveGateway_15ssxrn">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${!engaged}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1swrqbx" name="= [OS7,OS0G]" sourceRef="ExclusiveGateway_0n8vp20" targetRef="ExclusiveGateway_15ssxrn">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${legitimateReason}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_1oyqt5x" name="Apply fiancial Penalty">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/apply-charge'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') + 
',"terminationRequest":' + execution.getVariable('termination') +
',"ticketId":' + execution.getVariable('ticketId') +',"terminationCharge":' + execution.getVariable('terminationCharge')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('deleteticketId custom field opencell');
var resp = connector.getVariable('response')
print('resp deleteticketId custom field opencell' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1yxacci</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_03ssgsg</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_03ssgsg" sourceRef="ServiceTask_1oyqt5x" targetRef="ServiceTask_1y2rz74" />
    <bpmn:serviceTask id="ServiceTask_139n1lk" name="Send Notiication Withdrawal Contract">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/notifications/email/Termination-ret'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +',"ticketId":' + execution.getVariable('ticketId') + ',"terminationCharge":'+execution.getVariable('terminationCharge')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('send notification');
var resp = connector.getVariable('response')
print('send notification' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1qppr0j</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0d7gwdr</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0ib7q86" name="Send Notification Termination Contract">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/notifications/email/Termination-res'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +',"ticketId":' + execution.getVariable('ticketId') + ',"terminationCharge":'+execution.getVariable('terminationCharge')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('send notification');
var resp = connector.getVariable('response')
print('send notification' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1lg94ws</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1917lb0</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1917lb0" sourceRef="ServiceTask_0ib7q86" targetRef="Task_076ghgl" />
    <bpmn:sequenceFlow id="SequenceFlow_0d7gwdr" sourceRef="ServiceTask_139n1lk" targetRef="Task_076ghgl" />
    <bpmn:serviceTask id="ServiceTask_1dz152m" name="calculate fiancial penalty ORANGE">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/getAmountFees-orange'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') + 
',"terminationRequest":' + execution.getVariable('termination') +
',"ticketId":' + execution.getVariable('ticketId') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">function leapYear(year) {
  return (year % 4 == 0 &amp;&amp; year % 100 != 0) || year % 400 == 0;
}

print("show fees");
var resp = connector.getVariable("response");
print("get amount fees witdh/res : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  var jsonResponse = JSON.parse(resp);
  execution.setVariable("seller", jsonResponse.seller);

  execution.setVariable("offerCode", jsonResponse.offerCode);

  execution.setVariable("endAgreementDate", jsonResponse.endAgreementDate);

  execution.setVariable("terminationType", jsonResponse.terminationType);

  execution.setVariable(
    "terminationReasonCode",
    jsonResponse.terminationReasonCode
  );

  var myDate = new Date(jsonResponse.terminationDate);
  print("entred termination date " + myDate);
  var day = myDate.getDate() + 1;
  var month = myDate.getMonth() + 1;
  var year = myDate.getFullYear();

  if (
    (month == 1 ||
      month == 3 ||
      month == 5 ||
      month == 7 ||
      month == 8 ||
      month == 10 ||
      month == 12) &amp;&amp;
    day &gt; 31
  ) {
    day = 1;
    month = month + 1;
  } else if (
    (month == 4 || month == 6 || month == 9 || month == 11) &amp;&amp;
    day &gt; 30
  ) {
    day = 1;
    month = month + 1;
  } else if (leapYear(year) === true &amp;&amp; day &gt; 29 &amp;&amp; month == 2) {
    day = 1;
    month = month + 1;
  } else if (leapYear(year) === false &amp;&amp; day &gt; 28 &amp;&amp; month == 2) {
    day = 1;
    month = month + 1;
  }

  if (month &gt; 12) {
    month = 1;
    year = year + 1;
  }

  if (month.toString().length === 1) {
    month = "0" + month;
  }
  if (day.toString().length === 1) {
    day = "0" + day;
  }

  var finalDate = year + "-" + month + "-" + day;
  print("final date :" + finalDate);

  execution.setVariable("terminationDate", finalDate + "T01:00:00Z");

  execution.setVariable(
    "terminationDateUpdate",
    JSON.stringify(finalDate + "T01:00:00Z")
  );

  execution.setVariable("terminationCharge", jsonResponse.terminationCharge);

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1obe75u</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0h4yrha</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0h4yrha" sourceRef="ServiceTask_1dz152m" targetRef="ExclusiveGateway_15ssxrn" />
    <bpmn:sequenceFlow id="SequenceFlow_1cltlhy" sourceRef="Task_08erf2q" targetRef="ServiceTask_12ppsbm" />
    <bpmn:exclusiveGateway id="ExclusiveGateway_1bgp8m0">
      <bpmn:incoming>SequenceFlow_0p5415b</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1obe75u</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1q0ruio</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_1obe75u" name="Orange" sourceRef="ExclusiveGateway_1bgp8m0" targetRef="ServiceTask_1dz152m">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${sellerName== 'ORANGE'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_176d2o4" name="calculate fiancial penalty GROUPAMA">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/getAmountFees-groupama'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"subscriptionCode":' + execution.getVariable('subscriptionCode') + 
',"terminationRequest":' + execution.getVariable('termination') +
',"ticketId":' + execution.getVariable('ticketId') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">function leapYear(year) {
  return (year % 4 == 0 &amp;&amp; year % 100 != 0) || year % 400 == 0;
}

print("show fees");
var resp = connector.getVariable("response");
print("get amount fees witdh/res : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  var jsonResponse = JSON.parse(resp);
  execution.setVariable("seller", jsonResponse.seller);

  execution.setVariable("offerCode", jsonResponse.offerCode);

  execution.setVariable("endAgreementDate", jsonResponse.endAgreementDate);

  execution.setVariable("terminationType", jsonResponse.terminationType);

  execution.setVariable(
    "terminationReasonCode",
    jsonResponse.terminationReasonCode
  );

  var myDate = new Date(jsonResponse.terminationDate);
  print("entred termination date " + myDate);
  var day = myDate.getDate() + 1;
  var month = myDate.getMonth() + 1;
  var year = myDate.getFullYear();

  if (
    (month == 1 ||
      month == 3 ||
      month == 5 ||
      month == 7 ||
      month == 8 ||
      month == 10 ||
      month == 12) &amp;&amp;
    day &gt; 31
  ) {
    day = 1;
    month = month + 1;
  } else if (
    (month == 4 || month == 6 || month == 9 || month == 11) &amp;&amp;
    day &gt; 30
  ) {
    day = 1;
    month = month + 1;
  } else if (leapYear(year) === true &amp;&amp; day &gt; 29 &amp;&amp; month == 2) {
    day = 1;
    month = month + 1;
  } else if (leapYear(year) === false &amp;&amp; day &gt; 28 &amp;&amp; month == 2) {
    day = 1;
    month = month + 1;
  }

  if (month &gt; 12) {
    month = 1;
    year = year + 1;
  }

  if (month.toString().length === 1) {
    month = "0" + month;
  }
  if (day.toString().length === 1) {
    day = "0" + day;
  }

  var finalDate = year + "-" + month + "-" + day;
  print("final date :" + finalDate);

  execution.setVariable("terminationDate", finalDate + "T01:00:00Z");

  execution.setVariable(
    "terminationDateUpdate",
    JSON.stringify(finalDate + "T01:00:00Z")
  );

  execution.setVariable("terminationCharge", jsonResponse.terminationCharge);

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1q0ruio</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1hgjjqf</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1q0ruio" name="Groupama" sourceRef="ExclusiveGateway_1bgp8m0" targetRef="ServiceTask_176d2o4">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${sellerName== 'GROUPAMA'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1hgjjqf" sourceRef="ServiceTask_176d2o4" targetRef="ExclusiveGateway_15ssxrn" />
    <bpmn:sequenceFlow id="SequenceFlow_1pjyv8c" sourceRef="ServiceTask_0l0f9cp" targetRef="ServiceTask_1v1y6qj" />
    <bpmn:sequenceFlow id="SequenceFlow_04uzzdf" sourceRef="ServiceTask_0gvlcaf" targetRef="ServiceTask_1v1y6qj" />
    <bpmn:sequenceFlow id="SequenceFlow_0fpwymx" name="Status contrat = ATT" sourceRef="ExclusiveGateway_0cbgrln" targetRef="ServiceTask_0jff6qz">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${statusContrat== 'ATT'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_0iat2h4" name="Apply Discount">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/applyDiscount'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("***Apply Discount***");
var resp = connector.getVariable("response");
print("Apply Discount " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1x6cjbn</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0rl17u0</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway id="ExclusiveGateway_0ph0dnn">
      <bpmn:incoming>SequenceFlow_1tqs4vm</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0p9jprw</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1x6cjbn</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_0p9jprw" name="ifDiscount=false" sourceRef="ExclusiveGateway_0ph0dnn" targetRef="ServiceTask_0gvlcaf">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ifDiscount==false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1x6cjbn" name="ifDiscount=true" sourceRef="ExclusiveGateway_0ph0dnn" targetRef="ServiceTask_0iat2h4">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ifDiscount==true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_0rl17u0" sourceRef="ServiceTask_0iat2h4" targetRef="ServiceTask_0gvlcaf" />
    <bpmn:exclusiveGateway id="ExclusiveGateway_0yccjgo">
      <bpmn:incoming>SequenceFlow_1x4908g</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1t22r3u</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_1jprzet</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_1t22r3u" name="action = confirm" sourceRef="ExclusiveGateway_0yccjgo" targetRef="Task_08erf2q">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${action== 'confirm'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1jprzet" name="action = cancel" sourceRef="ExclusiveGateway_0yccjgo" targetRef="ExclusiveGateway_1od8mbh">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${action== 'cancel'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:exclusiveGateway id="ExclusiveGateway_1od8mbh">
      <bpmn:incoming>SequenceFlow_1jprzet</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1socf2f</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_0he2ng7</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_1socf2f" name="ifDiscount=false" sourceRef="ExclusiveGateway_1od8mbh" targetRef="ServiceTask_0oc4eob">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ifDiscount==false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_1reyo93" name="Apply Discount">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/applyDiscount'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("***Apply Discount***");
var resp = connector.getVariable("response");
print("Apply Discount " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0he2ng7</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1a6viwm</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0he2ng7" name="ifDiscount=true" sourceRef="ExclusiveGateway_1od8mbh" targetRef="ServiceTask_1reyo93">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ifDiscount==true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1a6viwm" sourceRef="ServiceTask_1reyo93" targetRef="ServiceTask_0oc4eob" />
    <bpmn:serviceTask id="ServiceTask_12ppsbm" name="Add Information To Request">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/add-information-request'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"email":"' + execution.getVariable('email') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('Add Information To Request');
var resp = connector.getVariable('response')
print('Add Information To Request' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
var jsonResponse = JSON.parse(resp);
execution.setVariable("termination", jsonResponse.terminationRequest);
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1cltlhy</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0k1ghg7</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0jff6qz" name="Add Information To Request">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/add-information-request'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"email":"' + execution.getVariable('email') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_29q7ave">
              <camunda:script scriptFormat="JavaScript">print('Add Information To Request');
var resp = connector.getVariable('response')
print('Add Information To Request' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
var jsonResponse = JSON.parse(resp);
execution.setVariable("termination", jsonResponse.terminationRequest);
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0fpwymx</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1llatm9</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_0k1ghg7" sourceRef="ServiceTask_12ppsbm" targetRef="ExclusiveGateway_0dlfuar" />
    <bpmn:sequenceFlow id="SequenceFlow_1exw547" sourceRef="ServiceTask_1xmsfx4" targetRef="ExclusiveGateway_0cbgrln" />
    <bpmn:serviceTask id="ServiceTask_178wmwc" name="Send Notification Cancel Withdrawal / Termination">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/notifications/email/cancel-ret'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +',"ticketId":' + execution.getVariable('ticketId') + ',"terminationCharge":'+execution.getVariable('terminationCharge')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('send notification');
var resp = connector.getVariable('response')
print('send notification' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.id
execution.setVariable('incidentId',newIncident.id);
print('incientId'+newIncident.id);
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0ahchbb</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1xrpxob</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1xrpxob" sourceRef="ServiceTask_178wmwc" targetRef="ServiceTask_0bvlxk3" />
    <bpmn:serviceTask id="ServiceTask_1v1y6qj" name="Comment and close ticket">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/close-ticket-contract-att'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +',"ticketId":' + execution.getVariable('ticketId') + ',"terminationDate":'+execution.getVariable('terminationDateUpdate')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("update tickets");
var resp = connector.getVariable("response");
print("update comments and tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/

  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);
} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_04uzzdf</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1pjyv8c</bpmn:incoming>
      <bpmn:incoming>SequenceFlow_1o1x7vm</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1nbwdlb</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1nbwdlb" sourceRef="ServiceTask_1v1y6qj" targetRef="EndEvent_0y4ojw6" />
    <bpmn:sequenceFlow id="SequenceFlow_19jagu2" sourceRef="ServiceTask_0c92c0x" targetRef="ServiceTask_15cvbvc" />
    <bpmn:serviceTask id="ServiceTask_024xbgj" name="Get status of Closing code + intervention number SS">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/getStatusClosingCode'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"' + execution.getVariable('token') + '","subscriptionCode":' + execution.getVariable('subscriptionCode') +',"terminationRequest":' + execution.getVariable('termination') +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("***Get status of Closing code***");
var resp = connector.getVariable("response");
print("Get status of Closing code : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

  var jsonResponse = JSON.parse(resp);
  var myJSON = JSON.stringify(jsonResponse);
  execution.setVariable("processSubscriptionVariables",myJSON );
  execution.setVariable("codeStatus",JSON.stringify(jsonResponse.codeStatus));
  print("################################################################################################## : " +  myJSON);
  execution.setVariable("zammadTicketSubscription", JSON.stringify(jsonResponse.zammadTicket));
    execution.setVariable("subscription", JSON.stringify(jsonResponse.subscription));
	execution.setVariable("codeStatusExist", JSON.stringify(jsonResponse.codeStatusExist));

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1llatm9</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_09ednhb</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_09ednhb" sourceRef="ServiceTask_024xbgj" targetRef="ExclusiveGateway_1ppxatp" />
    <bpmn:sequenceFlow id="SequenceFlow_1llatm9" sourceRef="ServiceTask_0jff6qz" targetRef="ServiceTask_024xbgj" />
    <bpmn:exclusiveGateway id="ExclusiveGateway_1wnng49">
      <bpmn:incoming>SequenceFlow_0geoxa7</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1razuii</bpmn:outgoing>
      <bpmn:outgoing>SequenceFlow_11x5t0w</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="SequenceFlow_1razuii" name="codeStatusExist" sourceRef="ExclusiveGateway_1wnng49" targetRef="ServiceTask_0l0f9cp">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeStatusExist==true}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:serviceTask id="ServiceTask_08y3sof" name="cancel intervention to TeamTool planif">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/cancelInterventionToTeamToolPlanif'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"'+execution.getVariable('token')+'","subscriptionCode":'+execution.getVariable('subscriptionCode')+',"processSubscriptionVariables":'+execution.getVariable('processSubscriptionVariables')+',"terminationRequest":'+execution.getVariable('termination')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("confirm withdrawal process Subscription");
var resp = connector.getVariable("response");
print("create tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_11x5t0w</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1od0991</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_0nr9v65" name="Rejected Quote by CRC">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/rejectedQuoteByCRC'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"'+execution.getVariable('token')+'","subscriptionCode":'+execution.getVariable('subscriptionCode')+',"processSubscriptionVariables":'+execution.getVariable('processSubscriptionVariables')+',"terminationRequest":'+execution.getVariable('termination')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("confirm withdrawal process Subscription");
var resp = connector.getVariable("response");
print("create tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1od0991</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0ckmbfz</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_1x0huea" name="Close and comment Ticket Order">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/closeAndCommentOrder'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"'+execution.getVariable('token')+'","subscriptionCode":'+execution.getVariable('subscriptionCode')+',"processSubscriptionVariables":'+execution.getVariable('processSubscriptionVariables')+',"terminationRequest":'+execution.getVariable('termination')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("confirm withdrawal process Subscription");
var resp = connector.getVariable("response");
print("create tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_0ckmbfz</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1y195md</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask id="ServiceTask_02x0g8i" name="Terminate Subscription processus">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/subscriptions/deleteProcessSubscription'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">'{"token":"'+execution.getVariable('token')+'","subscriptionCode":'+execution.getVariable('subscriptionCode')+',"processSubscriptionVariables":'+execution.getVariable('processSubscriptionVariables')+',"terminationRequest":'+execution.getVariable('termination')+'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print("confirm withdrawal process Subscription");
var resp = connector.getVariable("response");
print("create tickets : " + resp);

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

var respStatusCode = connector.getVariable("statusCode");
print(respStatusCode);

if (
  respStatusCode == 200 ||
  respStatusCode == 201 ||
  respStatusCode == 202 ||
  respStatusCode == 204
) {
  print("no error");

  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "SUCCESS");
  execution.setVariable("responseMessage", response);

} else {
  execution.setVariable("httpCode", respStatusCode);
  execution.setVariable("state", "FAIL");
  execution.setVariable("responseMessage", response);
  /*solve incident if exist*/
  print("incientId : " + execution.getVariable("incidentId"));
  if (execution.getVariable("incidentId") != null) {
    execution
      .getProcessEngineServices()
      .getRuntimeService()
      .createIncidentQuery()
      .incidentId(execution.getVariable("incidentId"))
      .singleResult()
      .resolve();
    execution.setVariable("incidentId", null);
  }
  /* end solving incident*/
  /* create incident*/

  var IncidentEntity = Java.type(
    "org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity"
  );
  var IncidentContext = Java.type(
    "org.camunda.bpm.engine.impl.incident.IncidentContext"
  );
  var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope();
  context.setActivityId(parentScope.getCurrentActivityId());
  context.setExecutionId(parentScope.getProcessInstanceId());
  context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
  var newIncident = IncidentEntity.createAndInsertIncident(
    "Api Fail",
    context,
    response
  );
  newIncident.id;
  execution.setVariable("incidentId", newIncident.id);
  print("incientId" + newIncident.id);
  /*end create incident*/
  throw new org.camunda.bpm.engine.delegate.BpmnError("CheckError", activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>SequenceFlow_1y195md</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_1o1x7vm</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="SequenceFlow_1od0991" sourceRef="ServiceTask_08y3sof" targetRef="ServiceTask_0nr9v65" />
    <bpmn:sequenceFlow id="SequenceFlow_0ckmbfz" sourceRef="ServiceTask_0nr9v65" targetRef="ServiceTask_1x0huea" />
    <bpmn:sequenceFlow id="SequenceFlow_1y195md" sourceRef="ServiceTask_1x0huea" targetRef="ServiceTask_02x0g8i" />
    <bpmn:sequenceFlow id="SequenceFlow_11x5t0w" name="!codeStatusExist" sourceRef="ExclusiveGateway_1wnng49" targetRef="ServiceTask_08y3sof">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${codeStatusExist==false}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="SequenceFlow_1o1x7vm" sourceRef="ServiceTask_02x0g8i" targetRef="ServiceTask_1v1y6qj" />
    <bpmn:textAnnotation id="TextAnnotation_1kf4243">
      <bpmn:text>Après validation du formulaire de résiliation sur le CRM, le process est instancié  &amp; Création du ticket zammad</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0puoigz" sourceRef="StartEvent_1" targetRef="TextAnnotation_1kf4243" />
    <bpmn:textAnnotation id="TextAnnotation_14ctsk4">
      <bpmn:text>Ajout du ticketId sur le contrat dans Opencell pour gérer l'affichage des messages informatifs sur le CRM</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_09fl4my" sourceRef="Task_08erf2q" targetRef="TextAnnotation_14ctsk4" />
    <bpmn:textAnnotation id="TextAnnotation_0w9uln1">
      <bpmn:text>Temporisation de la résiliation jusqu'à J+1 de la date de résiliation demandée, à 1h du matin. Pendant toute la temporisation, l'annulation de la résiliation est possible</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0q21223" sourceRef="Task_076ghgl" targetRef="TextAnnotation_0w9uln1" />
    <bpmn:textAnnotation id="TextAnnotation_0z79xi3">
      <bpmn:text>Si la résiliation est annulée à partir du CRM, le ticketId est supprimé du contrat dans Opencell pour supprimer les messages informatifs affichés sur le CRM</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0ocqleh" sourceRef="ServiceTask_0bvlxk3" targetRef="TextAnnotation_0z79xi3" />
    <bpmn:textAnnotation id="TextAnnotation_0jkvw4r">
      <bpmn:text>Une fois la temporisation terminée, une demande d'envoi du bon chronopost + liste des équipements à retourner est envoyée à TeamTool Logistique</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0jdqifh" sourceRef="ServiceTask_0c92c0x" targetRef="TextAnnotation_0jkvw4r" />
    <bpmn:textAnnotation id="TextAnnotation_0kuuycu">
      <bpmn:text>Le contrat est effectivement résilié</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_137d3bt" sourceRef="ServiceTask_1y2rz74" targetRef="TextAnnotation_0kuuycu" />
    <bpmn:textAnnotation id="TextAnnotation_13rl0e8">
      <bpmn:text>Ajout du commentaire de clôture et fermeture du ticket</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1aryvqi" sourceRef="ServiceTask_0oc4eob" targetRef="TextAnnotation_13rl0e8" />
    <bpmn:textAnnotation id="TextAnnotation_0sv9rtn">
      <bpmn:text>Le contrat est résilié dans aquila</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1ijrd55" sourceRef="ServiceTask_15cvbvc" targetRef="TextAnnotation_0sv9rtn" />
    <bpmn:textAnnotation id="TextAnnotation_1bl621a">
      <bpmn:text>récupération du token afin de pouvoir consommer les API de façon sécurisé</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0shi7wm" sourceRef="ServiceTask_1xmsfx4" targetRef="TextAnnotation_1bl621a" />
    <bpmn:textAnnotation id="TextAnnotation_0pwxo4z">
      <bpmn:text>Le contrat est résilié chez usage(TB + CEGEDEV)</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1pfmuq9" sourceRef="ServiceTask_1b8jo07" targetRef="TextAnnotation_0pwxo4z" />
    <bpmn:textAnnotation id="TextAnnotation_1whwevb">
      <bpmn:text>Confirmation de la rétractation apres DFR. Il faut notifier le processus Subscription afin que le devis soit cloturé et que le tiket soit cloturé</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_09z4y1z" sourceRef="ServiceTask_0l0f9cp" targetRef="TextAnnotation_1whwevb" />
    <bpmn:textAnnotation id="TextAnnotation_0tplpjp">
      <bpmn:text>J'applique la charge correspond aux frais de résiliation calculés (pénalités)</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1pmey4c" sourceRef="ServiceTask_1oyqt5x" targetRef="TextAnnotation_0tplpjp" />
    <bpmn:textAnnotation id="TextAnnotation_0f256ta">
      <bpmn:text>Envoi d'un email au client qui accuse réception de la demande rétractation</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0796knn" sourceRef="ServiceTask_139n1lk" targetRef="TextAnnotation_0f256ta" />
    <bpmn:textAnnotation id="TextAnnotation_0xwu4zg">
      <bpmn:text>Envoi d'un email au client qui accuse réception de la demande résiliation</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0hg2b22" sourceRef="ServiceTask_0ib7q86" targetRef="TextAnnotation_0xwu4zg" />
    <bpmn:textAnnotation id="TextAnnotation_09az3qq">
      <bpmn:text>Calcul des frais de pénalité (l'ajout de la charge se fera + tard). ORANGE = Mois restants dûs abonnement</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_1iweqye" sourceRef="ServiceTask_1dz152m" targetRef="TextAnnotation_09az3qq" />
    <bpmn:textAnnotation id="TextAnnotation_0pj7dm8">
      <bpmn:text>Calcul des frais de pénalité (l'ajout de la charge se fera + tard). GROUPAMA = Mois restants dûs abonnement + 5 % de pénalité</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_03zgf1a" sourceRef="ServiceTask_176d2o4" targetRef="TextAnnotation_0pj7dm8" />
    <bpmn:textAnnotation id="TextAnnotation_0bb5etb">
      <bpmn:text>permet de récupérer le code cloture en cours dans le processus subscription.
cela permettra de savoir quel est le receive task à notifier selon nle code cloture (47 ou 41/49)</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_19ewn0k">
      <bpmn:text>Ajouter les devices,pack,option au flux</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_0b3qhjf" sourceRef="ServiceTask_12ppsbm" targetRef="TextAnnotation_19ewn0k" />
    <bpmn:textAnnotation id="TextAnnotation_0dpysjb">
      <bpmn:text>Ajouter les devices,pack,option au flux</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_12xy2it" sourceRef="ServiceTask_0jff6qz" targetRef="TextAnnotation_0dpysjb" />
    <bpmn:textAnnotation id="TextAnnotation_1kp2ott">
      <bpmn:text>delete process subscription</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association id="Association_03xfwz7" sourceRef="ServiceTask_02x0g8i" targetRef="TextAnnotation_1kp2ott" />
  </bpmn:process>
  <bpmn:message id="Message_0aaoot7" name="terminationContractMessageQa" />
  <bpmn:message id="Message_0fmcr48" name="cancelTerminateContractMessageQa" />
  <bpmn:error id="Error_17k1fqc" name="Error_1q866fr" />
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="terminateContactQa">
      <bpmndi:BPMNEdge id="SequenceFlow_19jagu2_di" bpmnElement="SequenceFlow_19jagu2">
        <di:waypoint x="2920" y="861" />
        <di:waypoint x="3036" y="861" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1nbwdlb_di" bpmnElement="SequenceFlow_1nbwdlb">
        <di:waypoint x="1740" y="1129" />
        <di:waypoint x="1862" y="1129" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1xrpxob_di" bpmnElement="SequenceFlow_1xrpxob">
        <di:waypoint x="2694" y="677" />
        <di:waypoint x="2839" y="677" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1exw547_di" bpmnElement="SequenceFlow_1exw547">
        <di:waypoint x="411" y="677" />
        <di:waypoint x="617" y="677" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0k1ghg7_di" bpmnElement="SequenceFlow_0k1ghg7">
        <di:waypoint x="1309" y="677" />
        <di:waypoint x="1438" y="677" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1a6viwm_di" bpmnElement="SequenceFlow_1a6viwm">
        <di:waypoint x="1184" y="120" />
        <di:waypoint x="3368" y="120" />
        <di:waypoint x="3368" y="821" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0he2ng7_di" bpmnElement="SequenceFlow_0he2ng7">
        <di:waypoint x="794" y="225" />
        <di:waypoint x="794" y="120" />
        <di:waypoint x="1084" y="120" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="908" y="93" width="74" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1socf2f_di" bpmnElement="SequenceFlow_1socf2f">
        <di:waypoint x="819" y="250" />
        <di:waypoint x="3368" y="250" />
        <di:waypoint x="3368" y="821" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="897" y="223" width="78" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1jprzet_di" bpmnElement="SequenceFlow_1jprzet">
        <di:waypoint x="794" y="652" />
        <di:waypoint x="794" y="275" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="717" y="493" width="75" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1t22r3u_di" bpmnElement="SequenceFlow_1t22r3u">
        <di:waypoint x="819" y="677" />
        <di:waypoint x="980" y="677" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="861" y="659" width="78" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0rl17u0_di" bpmnElement="SequenceFlow_0rl17u0">
        <di:waypoint x="1400" y="1390" />
        <di:waypoint x="1470" y="1390" />
        <di:waypoint x="1470" y="1310" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1x6cjbn_di" bpmnElement="SequenceFlow_1x6cjbn">
        <di:waypoint x="1074" y="1295" />
        <di:waypoint x="1074" y="1390" />
        <di:waypoint x="1300" y="1390" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1161" y="1393" width="75" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0p9jprw_di" bpmnElement="SequenceFlow_0p9jprw">
        <di:waypoint x="1099" y="1270" />
        <di:waypoint x="1420" y="1270" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1120" y="1244" width="79" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0fpwymx_di" bpmnElement="SequenceFlow_0fpwymx">
        <di:waypoint x="642" y="702" />
        <di:waypoint x="642" y="876" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="648" y="1114" width="78" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_04uzzdf_di" bpmnElement="SequenceFlow_04uzzdf">
        <di:waypoint x="1520" y="1270" />
        <di:waypoint x="1580" y="1270" />
        <di:waypoint x="1580" y="1129" />
        <di:waypoint x="1640" y="1129" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1pjyv8c_di" bpmnElement="SequenceFlow_1pjyv8c">
        <di:waypoint x="1390" y="1001" />
        <di:waypoint x="1690" y="1001" />
        <di:waypoint x="1690" y="1089" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1hgjjqf_di" bpmnElement="SequenceFlow_1hgjjqf">
        <di:waypoint x="2005" y="526" />
        <di:waypoint x="2084" y="526" />
        <di:waypoint x="2084" y="652" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1q0ruio_di" bpmnElement="SequenceFlow_1q0ruio">
        <di:waypoint x="1804" y="652" />
        <di:waypoint x="1804" y="526" />
        <di:waypoint x="1905" y="526" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1813" y="502" width="52" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1obe75u_di" bpmnElement="SequenceFlow_1obe75u">
        <di:waypoint x="1829" y="677" />
        <di:waypoint x="1905" y="677" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1850" y="659" width="37" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1cltlhy_di" bpmnElement="SequenceFlow_1cltlhy">
        <di:waypoint x="1080" y="677" />
        <di:waypoint x="1209" y="677" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0h4yrha_di" bpmnElement="SequenceFlow_0h4yrha">
        <di:waypoint x="2005" y="677" />
        <di:waypoint x="2059" y="677" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0d7gwdr_di" bpmnElement="SequenceFlow_0d7gwdr">
        <di:waypoint x="2320" y="539" />
        <di:waypoint x="2431" y="539" />
        <di:waypoint x="2431" y="637" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1917lb0_di" bpmnElement="SequenceFlow_1917lb0">
        <di:waypoint x="2320" y="677" />
        <di:waypoint x="2407" y="677" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_03ssgsg_di" bpmnElement="SequenceFlow_03ssgsg">
        <di:waypoint x="2538" y="861" />
        <di:waypoint x="2610" y="861" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1swrqbx_di" bpmnElement="SequenceFlow_1swrqbx">
        <di:waypoint x="1590" y="702" />
        <di:waypoint x="1590" y="826" />
        <di:waypoint x="2084" y="826" />
        <di:waypoint x="2084" y="702" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1607" y="783" width="72" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0v2074l_di" bpmnElement="SequenceFlow_0v2074l">
        <di:waypoint x="1699" y="702" />
        <di:waypoint x="1699" y="826" />
        <di:waypoint x="2084" y="826" />
        <di:waypoint x="2084" y="702" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1747" y="796" width="15" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0a9ix91_di" bpmnElement="SequenceFlow_0a9ix91">
        <di:waypoint x="1463" y="702" />
        <di:waypoint x="1463" y="825" />
        <di:waypoint x="2084" y="825" />
        <di:waypoint x="2084" y="702" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1491" y="797" width="23" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1qppr0j_di" bpmnElement="SequenceFlow_1qppr0j">
        <di:waypoint x="2084" y="652" />
        <di:waypoint x="2084" y="539" />
        <di:waypoint x="2220" y="539" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2135" y="519" width="23" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1lg94ws_di" bpmnElement="SequenceFlow_1lg94ws">
        <di:waypoint x="2109" y="677" />
        <di:waypoint x="2220" y="677" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2154" y="659" width="24" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0p5415b_di" bpmnElement="SequenceFlow_0p5415b">
        <di:waypoint x="1724" y="677" />
        <di:waypoint x="1779" y="677" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1720" y="660" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_06adcq7_di" bpmnElement="SequenceFlow_06adcq7">
        <di:waypoint x="1615" y="677" />
        <di:waypoint x="1674" y="677" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1606" y="647" width="78" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0u6z4xm_di" bpmnElement="SequenceFlow_0u6z4xm">
        <di:waypoint x="1488" y="677" />
        <di:waypoint x="1565" y="677" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1516" y="659" width="24" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1tqs4vm_di" bpmnElement="SequenceFlow_1tqs4vm">
        <di:waypoint x="904" y="1026" />
        <di:waypoint x="904" y="1270" />
        <di:waypoint x="1049" y="1270" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="962" y="1244" width="74" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0geoxa7_di" bpmnElement="SequenceFlow_0geoxa7">
        <di:waypoint x="929" y="1001" />
        <di:waypoint x="1005" y="1001" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="909" y="973" width="79" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1x4908g_di" bpmnElement="SequenceFlow_1x4908g">
        <di:waypoint x="667" y="677" />
        <di:waypoint x="769" y="677" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="658" y="640" width="78" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0cgxvw9_di" bpmnElement="SequenceFlow_0cgxvw9">
        <di:waypoint x="3279" y="861" />
        <di:waypoint x="3318" y="861" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_02b4s0p_di" bpmnElement="SequenceFlow_02b4s0p">
        <di:waypoint x="3136" y="861" />
        <di:waypoint x="3179" y="861" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0qf8d40_di" bpmnElement="SequenceFlow_0qf8d40">
        <di:waypoint x="3418" y="861" />
        <di:waypoint x="3463" y="861" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0c94sa4_di" bpmnElement="SequenceFlow_0c94sa4">
        <di:waypoint x="2939" y="677" />
        <di:waypoint x="3368" y="677" />
        <di:waypoint x="3368" y="821" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0ahchbb_di" bpmnElement="SequenceFlow_0ahchbb">
        <di:waypoint x="2507" y="677" />
        <di:waypoint x="2594" y="677" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1yxacci_di" bpmnElement="SequenceFlow_1yxacci">
        <di:waypoint x="2488" y="735" />
        <di:waypoint x="2488" y="821" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0dqubgx_di" bpmnElement="SequenceFlow_0dqubgx">
        <di:waypoint x="2710" y="861" />
        <di:waypoint x="2820" y="861" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_06bhpo8_di" bpmnElement="SequenceFlow_06bhpo8">
        <di:waypoint x="229" y="677" />
        <di:waypoint x="311" y="677" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="StartEvent_1yx2wbc_di" bpmnElement="StartEvent_1">
        <dc:Bounds x="193" y="659" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_1fet437_di" bpmnElement="EndEvent_1fet437">
        <dc:Bounds x="3463" y="843" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1y2rz74_di" bpmnElement="ServiceTask_1y2rz74">
        <dc:Bounds x="2610" y="821" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0oc4eob_di" bpmnElement="ServiceTask_0oc4eob">
        <dc:Bounds x="3318" y="821" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0lhr65s_di" bpmnElement="Task_08erf2q">
        <dc:Bounds x="980" y="637" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ReceiveTask_1jw4xxi_di" bpmnElement="Task_076ghgl">
        <dc:Bounds x="2407" y="637" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0bvlxk3_di" bpmnElement="ServiceTask_0bvlxk3">
        <dc:Bounds x="2839" y="637" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0t3dl1a_di" bpmnElement="Activity_1xfw40h" isExpanded="true">
        <dc:Bounds x="964" y="1510" width="590" height="200" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_0w5y08e_di" bpmnElement="Flow_0w5y08e">
        <di:waypoint x="1354" y="1610" />
        <di:waypoint x="1416" y="1610" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0mssr82_di" bpmnElement="Flow_0mssr82">
        <di:waypoint x="1194" y="1610" />
        <di:waypoint x="1254" y="1610" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1kfz3aa_di" bpmnElement="Flow_1kfz3aa">
        <di:waypoint x="1040" y="1610" />
        <di:waypoint x="1094" y="1610" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Event_05dtp51_di" bpmnElement="Event_1871wws">
        <dc:Bounds x="1004" y="1592" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_183elzo_di" bpmnElement="Activity_1kuco63">
        <dc:Bounds x="1094" y="1570" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0olm21z_di" bpmnElement="Activity_0z4q4a2">
        <dc:Bounds x="1254" y="1570" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1cuh8n4_di" bpmnElement="Event_1cuh8n4">
        <dc:Bounds x="1416" y="1592" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0c92c0x_di" bpmnElement="ServiceTask_0c92c0x">
        <dc:Bounds x="2820" y="821" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_15cvbvc_di" bpmnElement="ServiceTask_15cvbvc">
        <dc:Bounds x="3036" y="821" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1xmsfx4_di" bpmnElement="ServiceTask_1xmsfx4">
        <dc:Bounds x="311" y="637" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1b8jo07_di" bpmnElement="ServiceTask_1b8jo07">
        <dc:Bounds x="3179" y="821" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0cbgrln_di" bpmnElement="ExclusiveGateway_0cbgrln" isMarkerVisible="true">
        <dc:Bounds x="617" y="652" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0l0f9cp_di" bpmnElement="ServiceTask_0l0f9cp">
        <dc:Bounds x="1290" y="961" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_0y4ojw6_di" bpmnElement="EndEvent_0y4ojw6">
        <dc:Bounds x="1862" y="1111" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1ppxatp_di" bpmnElement="ExclusiveGateway_1ppxatp" isMarkerVisible="true">
        <dc:Bounds x="879" y="976" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0gvlcaf_di" bpmnElement="ServiceTask_0gvlcaf">
        <dc:Bounds x="1420" y="1230" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0dlfuar_di" bpmnElement="ExclusiveGateway_0dlfuar" isMarkerVisible="true">
        <dc:Bounds x="1438" y="652" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1423" y="618" width="81" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0n8vp20_di" bpmnElement="ExclusiveGateway_0n8vp20" isMarkerVisible="true">
        <dc:Bounds x="1565" y="652" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1563" y="613" width="54" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0osusol_di" bpmnElement="ExclusiveGateway_0osusol" isMarkerVisible="true">
        <dc:Bounds x="1674" y="652" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1676" y="617" width="45" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_15ssxrn_di" bpmnElement="ExclusiveGateway_15ssxrn" isMarkerVisible="true">
        <dc:Bounds x="2059" y="652" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2046" y="712" width="78" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1oyqt5x_di" bpmnElement="ServiceTask_1oyqt5x">
        <dc:Bounds x="2438" y="821" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_139n1lk_di" bpmnElement="ServiceTask_139n1lk">
        <dc:Bounds x="2220" y="499" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0ib7q86_di" bpmnElement="ServiceTask_0ib7q86">
        <dc:Bounds x="2220" y="637" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1dz152m_di" bpmnElement="ServiceTask_1dz152m">
        <dc:Bounds x="1905" y="637" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1bgp8m0_di" bpmnElement="ExclusiveGateway_1bgp8m0" isMarkerVisible="true">
        <dc:Bounds x="1779" y="652" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_176d2o4_di" bpmnElement="ServiceTask_176d2o4">
        <dc:Bounds x="1905" y="486" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0iat2h4_di" bpmnElement="ServiceTask_0iat2h4">
        <dc:Bounds x="1300" y="1350" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0ph0dnn_di" bpmnElement="ExclusiveGateway_0ph0dnn" isMarkerVisible="true">
        <dc:Bounds x="1049" y="1245" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_0yccjgo_di" bpmnElement="ExclusiveGateway_0yccjgo" isMarkerVisible="true">
        <dc:Bounds x="769" y="652" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ExclusiveGateway_1od8mbh_di" bpmnElement="ExclusiveGateway_1od8mbh" isMarkerVisible="true">
        <dc:Bounds x="769" y="225" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1reyo93_di" bpmnElement="ServiceTask_1reyo93">
        <dc:Bounds x="1084" y="80" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_12ppsbm_di" bpmnElement="ServiceTask_12ppsbm">
        <dc:Bounds x="1209" y="637" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0jff6qz_di" bpmnElement="ServiceTask_0jff6qz">
        <dc:Bounds x="592" y="876" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_178wmwc_di" bpmnElement="ServiceTask_178wmwc">
        <dc:Bounds x="2594" y="637" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1v1y6qj_di" bpmnElement="ServiceTask_1v1y6qj">
        <dc:Bounds x="1640" y="1089" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1kf4243_di" bpmnElement="TextAnnotation_1kf4243">
        <dc:Bounds x="170" y="486" width="109.98650472334681" height="106.61268556005398" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_14ctsk4_di" bpmnElement="TextAnnotation_14ctsk4">
        <dc:Bounds x="1110" y="477" width="100" height="124" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0w9uln1_di" bpmnElement="TextAnnotation_0w9uln1">
        <dc:Bounds x="2476" y="478" width="200" height="96" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0z79xi3_di" bpmnElement="TextAnnotation_0z79xi3">
        <dc:Bounds x="2704" y="465" width="170" height="94" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0jkvw4r_di" bpmnElement="TextAnnotation_0jkvw4r">
        <dc:Bounds x="2800" y="970" width="170" height="96" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0kuuycu_di" bpmnElement="TextAnnotation_0kuuycu">
        <dc:Bounds x="2630" y="974" width="100" height="54" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_13rl0e8_di" bpmnElement="TextAnnotation_13rl0e8">
        <dc:Bounds x="3308" y="955" width="120" height="68" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0sv9rtn_di" bpmnElement="TextAnnotation_0sv9rtn">
        <dc:Bounds x="2997" y="962" width="100" height="54" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1bl621a_di" bpmnElement="TextAnnotation_1bl621a">
        <dc:Bounds x="340" y="491" width="100" height="96" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0pwxo4z_di" bpmnElement="TextAnnotation_0pwxo4z">
        <dc:Bounds x="3124" y="955" width="100" height="68" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_1whwevb_di" bpmnElement="TextAnnotation_1whwevb">
        <dc:Bounds x="1290" y="774" width="100" height="147" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0tplpjp_di" bpmnElement="TextAnnotation_0tplpjp">
        <dc:Bounds x="2460" y="970" width="100" height="107" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0f256ta_di" bpmnElement="TextAnnotation_0f256ta">
        <dc:Bounds x="2288" y="345" width="100" height="93" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0xwu4zg_di" bpmnElement="TextAnnotation_0xwu4zg">
        <dc:Bounds x="2209" y="801" width="100" height="93" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_09az3qq_di" bpmnElement="TextAnnotation_09az3qq">
        <dc:Bounds x="1754" y="323" width="100" height="137" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0pj7dm8_di" bpmnElement="TextAnnotation_0pj7dm8">
        <dc:Bounds x="2009" y="316" width="100" height="151" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0bb5etb_di" bpmnElement="TextAnnotation_0bb5etb">
        <dc:Bounds x="604" y="1089" width="220" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_19ewn0k_di" bpmnElement="TextAnnotation_19ewn0k">
        <dc:Bounds x="1377" y="557" width="99.99274099883856" height="53.426248548199766" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="TextAnnotation_0dpysjb_di" bpmnElement="TextAnnotation_0dpysjb">
        <dc:Bounds x="680" y="780" width="100" height="53" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BoundaryEvent_00wg9co_di" bpmnElement="BoundaryEvent_0eg6pzk">
        <dc:Bounds x="2470" y="699" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Association_0puoigz_di" bpmnElement="Association_0puoigz">
        <di:waypoint x="213" y="659" />
        <di:waypoint x="220" y="593" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_09fl4my_di" bpmnElement="Association_09fl4my">
        <di:waypoint x="1066" y="637" />
        <di:waypoint x="1110" y="593" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0q21223_di" bpmnElement="Association_0q21223">
        <di:waypoint x="2489" y="637" />
        <di:waypoint x="2539" y="574" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0ocqleh_di" bpmnElement="Association_0ocqleh">
        <di:waypoint x="2865" y="637" />
        <di:waypoint x="2817" y="559" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0jdqifh_di" bpmnElement="Association_0jdqifh">
        <di:waypoint x="2874" y="901" />
        <di:waypoint x="2880" y="970" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_137d3bt_di" bpmnElement="Association_137d3bt">
        <di:waypoint x="2666" y="901" />
        <di:waypoint x="2676" y="974" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1aryvqi_di" bpmnElement="Association_1aryvqi">
        <di:waypoint x="3369" y="901" />
        <di:waypoint x="3368" y="955" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1ijrd55_di" bpmnElement="Association_1ijrd55">
        <di:waypoint x="3056" y="901" />
        <di:waypoint x="3056" y="962" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0shi7wm_di" bpmnElement="Association_0shi7wm">
        <di:waypoint x="369" y="637" />
        <di:waypoint x="380" y="587" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1pfmuq9_di" bpmnElement="Association_1pfmuq9">
        <di:waypoint x="3212" y="901" />
        <di:waypoint x="3189" y="955" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_09z4y1z_di" bpmnElement="Association_09z4y1z">
        <di:waypoint x="1340" y="961" />
        <di:waypoint x="1340" y="921" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1pmey4c_di" bpmnElement="Association_1pmey4c">
        <di:waypoint x="2493" y="901" />
        <di:waypoint x="2503" y="970" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0796knn_di" bpmnElement="Association_0796knn">
        <di:waypoint x="2289" y="499" />
        <di:waypoint x="2317" y="438" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0hg2b22_di" bpmnElement="Association_0hg2b22">
        <di:waypoint x="2267" y="717" />
        <di:waypoint x="2262" y="801" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_1iweqye_di" bpmnElement="Association_1iweqye">
        <di:waypoint x="1934" y="637" />
        <di:waypoint x="1840" y="460" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_03zgf1a_di" bpmnElement="Association_03zgf1a">
        <di:waypoint x="1986" y="486" />
        <di:waypoint x="2009" y="456" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_0b3qhjf_di" bpmnElement="Association_0b3qhjf">
        <di:waypoint x="1309" y="649" />
        <di:waypoint x="1379" y="610" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Association_12xy2it_di" bpmnElement="Association_12xy2it">
        <di:waypoint x="674" y="876" />
        <di:waypoint x="709" y="833" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="ServiceTask_024xbgj_di" bpmnElement="ServiceTask_024xbgj">
        <dc:Bounds x="720" y="961" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="SequenceFlow_09ednhb_di" bpmnElement="SequenceFlow_09ednhb">
        <di:waypoint x="820" y="1001" />
        <di:waypoint x="879" y="1001" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1llatm9_di" bpmnElement="SequenceFlow_1llatm9">
        <di:waypoint x="642" y="956" />
        <di:waypoint x="642" y="1001" />
        <di:waypoint x="720" y="1001" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="ExclusiveGateway_1wnng49_di" bpmnElement="ExclusiveGateway_1wnng49" isMarkerVisible="true">
        <dc:Bounds x="1005" y="976" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="SequenceFlow_1razuii_di" bpmnElement="SequenceFlow_1razuii">
        <di:waypoint x="1055" y="1001" />
        <di:waypoint x="1290" y="1001" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1133" y="983" width="80" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="ServiceTask_08y3sof_di" bpmnElement="ServiceTask_08y3sof">
        <dc:Bounds x="980" y="1089" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_0nr9v65_di" bpmnElement="ServiceTask_0nr9v65">
        <dc:Bounds x="1127" y="1089" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_1x0huea_di" bpmnElement="ServiceTask_1x0huea">
        <dc:Bounds x="1280" y="1089" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="ServiceTask_02x0g8i_di" bpmnElement="ServiceTask_02x0g8i">
        <dc:Bounds x="1440" y="1089" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="SequenceFlow_1od0991_di" bpmnElement="SequenceFlow_1od0991">
        <di:waypoint x="1080" y="1129" />
        <di:waypoint x="1127" y="1129" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0ckmbfz_di" bpmnElement="SequenceFlow_0ckmbfz">
        <di:waypoint x="1227" y="1129" />
        <di:waypoint x="1280" y="1129" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1y195md_di" bpmnElement="SequenceFlow_1y195md">
        <di:waypoint x="1380" y="1129" />
        <di:waypoint x="1440" y="1129" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_11x5t0w_di" bpmnElement="SequenceFlow_11x5t0w">
        <di:waypoint x="1030" y="1026" />
        <di:waypoint x="1030" y="1089" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1038" y="1055" width="83" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_1o1x7vm_di" bpmnElement="SequenceFlow_1o1x7vm">
        <di:waypoint x="1540" y="1129" />
        <di:waypoint x="1640" y="1129" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="TextAnnotation_1kp2ott_di" bpmnElement="TextAnnotation_1kp2ott">
        <dc:Bounds x="1510" y="1020" width="100" height="40" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Association_03xfwz7_di" bpmnElement="Association_03xfwz7">
        <di:waypoint x="1521" y="1089" />
        <di:waypoint x="1544" y="1060" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
