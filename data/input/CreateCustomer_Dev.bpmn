<bpmn:definitions xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:bioc="http://bpmn.io/schema/bpmn/biocolor/1.0" xmlns:color="http://www.omg.org/spec/BPMN/non-normative/color/1.0" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" exporter="Camunda Modeler" xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" exporterVersion="5.0.0" targetNamespace="http://bpmn.io/schema/bpmn" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Definitions_1l06s8n" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC">
  <bpmn:process name="Create Customer" id="CreateCustomer" isExecutable="true">
    <bpmn:startEvent id="Event_0offp10">
      <bpmn:outgoing>Flow_1so42at</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:endEvent id="Event_14xz0av">
      <bpmn:incoming>Flow_0g6buyv</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask name="Create Billing Account" id="Activity_02x5cg0">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_customer');
 url_tb+'/api/customer/v1/billingAccount/'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var order = S(execution.getVariable('subscription'));
var customerCategoryCode = order.prop("customerCategoryCode").value();
var date = order.prop("date").value();
var holder = order.prop("holder");
var channel = order.prop("channel");
var individual = holder.prop("individual");
var adress = individual.prop("adress");
var contactInformation = individual.prop("contactInformation");
var seller = channel.prop("organisationSellerId").value();
var externalRef = order.prop("contractId").value();
var title = individual.prop("title").value();
var partnerId = individual.prop("partnerId").value();
var firstName = individual.prop("firstName").value();
var lastName = individual.prop("lastName").value();
var description = partnerId + "." + firstName  + "." + lastName;
var birthDate = individual.prop("birthDate").value();
var birthLocality = individual.prop("birthLocality").value();
var birthCountry = individual.prop("birthCountry").value();
var locality = adress.prop("locality").value();
var zipCode = adress.prop("zipCode").value();
var countryName = adress.prop("countryName").value();
var addressLine1 = adress.prop("addressLine1").value();
var addressLine2 = adress.prop("addressLine2").value();
var addressLine3 = adress.prop("addressLine3").value();
var adressCustomer =
'{"locality":"' + locality + '"' +
',"postalCode":"' + zipCode + '"' +
',"countryName":"' + countryName + '"' +
',"addressLine1":"' + addressLine1 + '"' +
',"addressLine2":"' + addressLine2 + '"' +
',"addressLine3":"' + addressLine3 + '"}';
var email = contactInformation.prop("email").value();
var mobile = contactInformation.prop("mobile").value();
var phone = contactInformation.prop("phone").value();
var contactInformationCustomer =
'{"email":"' + email + '"' +
',"mobile":"' + mobile + '"' +
',"phone":"' + phone + '"}';

'{"subscriptionDate":"' + date + '"' +
',"nextInvoiceDate":"' + date + '"' +
',"crmAccountType":"ACCT_BA"' +
',"customerCategory":"' + customerCategoryCode + '"' +
',"code":"' + partnerId + '"' +
',"externalRef":"' + externalRef + '"' +
',"seller":"' + seller + '"' +
',"description":"' + description + '"' +
',"title":"' + title + '"' +
',"firstName":"' + firstName + '"' +
',"lastName":"' + lastName + '"' +
',"birthDate":"' + birthDate + '"' +
',"birthLocality":"' + birthLocality + '"' +
',"birthCountry":"' + birthCountry + '"' +
',"address":' + adressCustomer + ',' +
'"contactInformation":' + contactInformationCustomer + '}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_26rmte6">
              <camunda:script scriptFormat="JavaScript">print('create billing account api');
var resp = connector.getVariable('response')
print('resp billing customer account' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0rpo45c</bpmn:incoming>
      <bpmn:outgoing>Flow_015ieiu</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask name="Create User Account" id="Activity_1nklpa4">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_customer');
url_tb+'/api/customer/v1/userAccount/'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var order = S(execution.getVariable('subscription'));
var customerCategoryCode = order.prop("customerCategoryCode").value();
var date = order.prop("date").value();
var holder = order.prop("holder");
var channel = order.prop("channel");
var individual = holder.prop("individual");
var adress = individual.prop("adress");
var contactInformation = individual.prop("contactInformation");
var seller = channel.prop("organisationSellerId").value();
var externalRef = order.prop("contractId").value();
var title = individual.prop("title").value();
var partnerId = individual.prop("partnerId").value();
var firstName = individual.prop("firstName").value();
var lastName = individual.prop("lastName").value();
var description = partnerId + "." + firstName  + "." + lastName;
var birthDate = individual.prop("birthDate").value();
var birthLocality = individual.prop("birthLocality").value();
var birthCountry = individual.prop("birthCountry").value();
var locality = adress.prop("locality").value();
var zipCode = adress.prop("zipCode").value();
var countryName = adress.prop("countryName").value();
var addressLine1 = adress.prop("addressLine1").value();
var addressLine2 = adress.prop("addressLine2").value();
var addressLine3 = adress.prop("addressLine3").value();
var adressCustomer =
'{"locality":"' + locality + '"' +
',"postalCode":"' + zipCode + '"' +
',"countryName":"' + countryName + '"' +
',"addressLine1":"' + addressLine1 + '"' +
',"addressLine2":"' + addressLine2 + '"' +
',"addressLine3":"' + addressLine3 + '"}';
var email = contactInformation.prop("email").value();
var mobile = contactInformation.prop("mobile").value();
var phone = contactInformation.prop("phone").value();
var contactInformationCustomer =
'{"email":"' + email + '"' +
',"mobile":"' + mobile + '"' +
',"phone":"' + phone + '"}';

'{"subscriptionDate":"' + date + '"' +
',"crmAccountType":"ACCT_UA"' +
',"customerCategory":"' + customerCategoryCode + '"' +
',"code":"' + partnerId + '"' +
',"externalRef":"' + externalRef + '"' +
',"seller":"' + seller + '"' +
',"description":"' + description + '"' +
',"title":"' + title + '"' +
',"firstName":"' + firstName + '"' +
',"lastName":"' + lastName + '"' +
',"birthDate":"' + birthDate + '"' +
',"birthLocality":"' + birthLocality + '"' +
',"birthCountry":"' + birthCountry + '"' +
',"address":' + adressCustomer + ',' +
'"contactInformation":' + contactInformationCustomer + '}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_0q3cg8p">
              <camunda:script scriptFormat="JavaScript">print('create USER ACCOUNT api');
var resp = connector.getVariable('response')
print('resp create USERACCOUNT' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0xjiqmj</bpmn:incoming>
      <bpmn:outgoing>Flow_0c9m57l</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:serviceTask name="Apply discount" id="Activity_1igc66e">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_customer');
var order = execution.getVariable('subscription');
var holder = S(order).prop("holder");
var individual = S(holder).prop("individual");
var billingAccountCode = S(individual).prop("partnerId").value();

url_tb+'/api/customer/v1/billingAccount/'+billingAccountCode+'/discounts'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var order = execution.getVariable('subscription');
var discountCodes = S(order).prop("discountCodes").elements();
var discountPlanForInstantiation = S("[]");

for (var i=0; i &lt; discountCodes.size(); i++) {
  var discount = discountCodes[i];
  var code = discount.prop("code").value();
  discount.remove("code");
  discount.prop("discountPlanid", code);

  discountPlanForInstantiation.append(discount);
}

'{"discountPlan":' + discountPlanForInstantiation.toString() +'}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_26rmte6">
              <camunda:script scriptFormat="JavaScript">print('Apply discount');
var resp = connector.getVariable('response')
print('resp Apply discount' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1p9as48</bpmn:incoming>
      <bpmn:outgoing>Flow_09j70z3</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:exclusiveGateway default="Flow_1np13kb" id="Gateway_0n30zxi">
      <bpmn:incoming>Flow_015ieiu</bpmn:incoming>
      <bpmn:outgoing>Flow_1np13kb</bpmn:outgoing>
      <bpmn:outgoing>Flow_1p9as48</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow targetRef="Gateway_0n30zxi" id="Flow_015ieiu" sourceRef="Activity_02x5cg0"></bpmn:sequenceFlow>
    <bpmn:sequenceFlow targetRef="Activity_03s5e1t" id="Flow_09j70z3" sourceRef="Activity_1igc66e"></bpmn:sequenceFlow>
    <bpmn:sequenceFlow targetRef="Activity_03s5e1t" name="non" id="Flow_1np13kb" sourceRef="Gateway_0n30zxi"></bpmn:sequenceFlow>
    <bpmn:sequenceFlow targetRef="Activity_1hp3s6q" id="Flow_0c9m57l" sourceRef="Activity_1nklpa4"></bpmn:sequenceFlow>
    <bpmn:sequenceFlow targetRef="Activity_1igc66e" name="oui" id="Flow_1p9as48" sourceRef="Gateway_0n30zxi">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">var order = execution.getVariable('subscription');
var discountCodes = S(order).prop("discountCodes");

!(discountCodes.isNull() || discountCodes.elements().isEmpty())</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow targetRef="Activity_0kpronw" id="Flow_1so42at" sourceRef="Event_0offp10"></bpmn:sequenceFlow>
    <bpmn:subProcess triggeredByEvent="true" id="SubProcess_085n162">
      <bpmn:userTask name="Review Task" id="UserTask_0pdqhnx">
        <bpmn:incoming>SequenceFlow_02hvc3v</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_1kqhl73</bpmn:outgoing>
      </bpmn:userTask>
      <bpmn:endEvent id="EndEvent_19wiclb">
        <bpmn:incoming>SequenceFlow_0jg7ptp</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:scriptTask camunda:asyncAfter="true" name="Return to Last Task" id="ScriptTask_1k0uuxl" scriptFormat="JavaScript">
        <bpmn:incoming>SequenceFlow_1oka6jq</bpmn:incoming>
        <bpmn:incoming>SequenceFlow_1kqhl73</bpmn:incoming>
        <bpmn:incoming>Flow_1h2qv5l</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_0jg7ptp</bpmn:outgoing>
        <bpmn:script>print('Return to flow is Running');
var errorTaskId = execution.getVariable('errorTaskId');
if(errorTaskId == null){
print('No where to go back to');
}else{          execution.getProcessEngineServices().
getRuntimeService().createProcessInstanceModification(execution.getProcessInstanceId()).startBeforeActivity(errorTaskId).
execute();
}</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:exclusiveGateway id="ExclusiveGateway_0fofy8h">
        <bpmn:incoming>SequenceFlow_02noohs</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_0naabt8</bpmn:outgoing>
        <bpmn:outgoing>Flow_0uqem5l</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:serviceTask name="Refresh Token" id="Task_1atrp8f">
        <bpmn:extensionElements>
          <camunda:connector>
            <camunda:inputOutput>
              <camunda:inputParameter name="url">
                <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_keycloack');
url_tb+'/realms/Protectline/protocol/openid-connect/token'</camunda:script>
              </camunda:inputParameter>
              <camunda:inputParameter name="method">POST</camunda:inputParameter>
              <camunda:inputParameter name="headers">
                <camunda:map>
                  <camunda:entry key="content-type">application/x-www-form-urlencoded</camunda:entry>
                  <camunda:entry key="Accept">application/json</camunda:entry>
                  <camunda:entry key="authorization">Basic ${basicToken}</camunda:entry>
                </camunda:map>
              </camunda:inputParameter>
              <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
              <camunda:outputParameter name="Output_1b9kukr">
                <camunda:script scriptFormat="JavaScript">obj = JSON.parse(connector.getVariable('response'));
var execution = connector.getParentVariableScope();
execution.setVariable('token',obj.access_token);</camunda:script>
              </camunda:outputParameter>
            </camunda:inputOutput>
            <camunda:connectorId>http-connector</camunda:connectorId>
          </camunda:connector>
        </bpmn:extensionElements>
        <bpmn:incoming>SequenceFlow_0naabt8</bpmn:incoming>
        <bpmn:outgoing>SequenceFlow_1oka6jq</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow targetRef="ScriptTask_1k0uuxl" id="SequenceFlow_1oka6jq" sourceRef="Task_1atrp8f"></bpmn:sequenceFlow>
      <bpmn:sequenceFlow targetRef="Task_1atrp8f" id="SequenceFlow_0naabt8" sourceRef="ExclusiveGateway_0fofy8h">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode == 401}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow targetRef="UserTask_0pdqhnx" id="SequenceFlow_02hvc3v" sourceRef="Gateway_0pvvg6p"></bpmn:sequenceFlow>
      <bpmn:sequenceFlow targetRef="EndEvent_19wiclb" id="SequenceFlow_0jg7ptp" sourceRef="ScriptTask_1k0uuxl"></bpmn:sequenceFlow>
      <bpmn:sequenceFlow targetRef="ScriptTask_1k0uuxl" id="SequenceFlow_1kqhl73" sourceRef="UserTask_0pdqhnx"></bpmn:sequenceFlow>
      <bpmn:sequenceFlow targetRef="ExclusiveGateway_0fofy8h" id="SequenceFlow_02noohs" sourceRef="StartEvent_03idx0z"></bpmn:sequenceFlow>
      <bpmn:startEvent id="StartEvent_03idx0z">
        <bpmn:outgoing>SequenceFlow_02noohs</bpmn:outgoing>
        <bpmn:errorEventDefinition id="ErrorEventDefinition_1ikqiw0" errorRef="Error_1nhw7ru" camunda:errorMessageVariable="errorTaskId"></bpmn:errorEventDefinition>
      </bpmn:startEvent>
      <bpmn:scriptTask name="retries - 1" id="Activity_14qqn62" scriptFormat="JavaScript">
        <bpmn:incoming>Flow_0fkz23b</bpmn:incoming>
        <bpmn:outgoing>Flow_0660sd8</bpmn:outgoing>
        <bpmn:script>var retries = execution.getVariable("retries");

// Decrement
retries = retries - 1;

// Don't allow negative retries
if (retries &lt; 0) {
  retries = 0;
}

execution.setVariable("retries", retries);
print('Retrying failed task and changing retries variable to ' + retries);</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:intermediateCatchEvent id="Event_0bcs6uq">
        <bpmn:incoming>Flow_0660sd8</bpmn:incoming>
        <bpmn:outgoing>Flow_1h2qv5l</bpmn:outgoing>
        <bpmn:timerEventDefinition id="TimerEventDefinition_0w00qlh">
          <bpmn:timeDuration xsi:type="bpmn:tFormalExpression">PT5S</bpmn:timeDuration>
        </bpmn:timerEventDefinition>
      </bpmn:intermediateCatchEvent>
      <bpmn:sequenceFlow targetRef="Event_0bcs6uq" id="Flow_0660sd8" sourceRef="Activity_14qqn62"></bpmn:sequenceFlow>
      <bpmn:sequenceFlow targetRef="ScriptTask_1k0uuxl" id="Flow_1h2qv5l" sourceRef="Event_0bcs6uq"></bpmn:sequenceFlow>
      <bpmn:exclusiveGateway default="SequenceFlow_02hvc3v" id="Gateway_0pvvg6p">
        <bpmn:incoming>Flow_0uqem5l</bpmn:incoming>
        <bpmn:outgoing>Flow_0fkz23b</bpmn:outgoing>
        <bpmn:outgoing>SequenceFlow_02hvc3v</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow targetRef="Gateway_0pvvg6p" id="Flow_0uqem5l" sourceRef="ExclusiveGateway_0fofy8h">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${httpCode != 401}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow targetRef="Activity_14qqn62" id="Flow_0fkz23b" sourceRef="Gateway_0pvvg6p">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression" language="JavaScript">var retries = execution.getVariable("retries");

retries != null &amp;&amp; retries &gt; 0;</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:textAnnotation id="TextAnnotation_0gtrmko">
        <bpmn:text>Attente de 5s avant le retry</bpmn:text>
      </bpmn:textAnnotation>
      <bpmn:association targetRef="TextAnnotation_0gtrmko" id="Association_13htmfx" sourceRef="Event_0bcs6uq"></bpmn:association>
    </bpmn:subProcess>
    <bpmn:serviceTask name="Create Method Of Payment" id="Activity_03s5e1t">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_be');
url_tb+'/api/v1/orders/methodOfPayments'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">execution.getVariable('subscription');</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_006u9i9">
              <camunda:script scriptFormat="JavaScript">print('create MethodOfPayment api');
var resp = connector.getVariable('response')
print('resp create methodOfPayment' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
        <camunda:inputOutput>
          <camunda:outputParameter name="subscription">
            <camunda:script scriptFormat="JavaScript">var subscription = S(execution.getVariable('subscription'));
var payment = subscription.prop("payment");

if (payment.hasProp("bankAccount")) {
  var bankAccount = payment.prop("bankAccount");
  if (bankAccount.hasProp("iban")) {
    S(bankAccount).prop("iban", 'XXXXX');
  }
  if (bankAccount.hasProp("bic")) {
    S(bankAccount).prop("bic", 'XXXXX');
  }
}

subscription.toString();</camunda:script>
          </camunda:outputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1np13kb</bpmn:incoming>
      <bpmn:incoming>Flow_09j70z3</bpmn:incoming>
      <bpmn:outgoing>Flow_0xjiqmj</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow targetRef="Activity_1nklpa4" id="Flow_0xjiqmj" sourceRef="Activity_03s5e1t"></bpmn:sequenceFlow>
    <bpmn:serviceTask name="Create Keycloak Account" id="Activity_1hp3s6q">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_customer');
url_tb+'/api/customer/v1/authenticationAccount'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var order = S(execution.getVariable('subscription'));
var holder = order.prop("holder");
var channel = order.prop("channel");
var individual = holder.prop("individual");
var contactInformation = individual.prop("contactInformation");
var seller = channel.prop("organisationSellerId").value();
var partnerId = individual.prop("partnerId").value();
var firstName = individual.prop("firstName").value();
var lastName = individual.prop("lastName").value();
var email = contactInformation.prop("email").value();

'{"username":"' + partnerId + '"' +
',"email":"' + email + '"' +
',"firstName":"' + firstName + '"' +
',"lastName":"' + lastName + '"' +
',"seller":"' + seller + '"}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_34iamf0">
              <camunda:script scriptFormat="JavaScript">print('create keycloak account api');
var resp = connector.getVariable('response')
print('resp create keycloak account' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

/* get activity id from parent*/
var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();
/*end get activity id from parent*/


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');
execution.setVariable('keycloadUserPassword',resp);

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS");
execution.setVariable('responseMessage',response);

// Clean up retries if successful
execution.removeVariable("retries");
} else{
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/

  var retries = execution.getVariable("retries");
  if (retries == null) {
    // First failure, set retries to 2 (out of 3)
    execution.setVariable("retries", 2);
  } else if (retries &lt;= 0) {
    // No retries left - Do cleanup
    execution.removeVariable("retries");
  }

  throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0c9m57l</bpmn:incoming>
      <bpmn:outgoing>Flow_0g6buyv</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow targetRef="Event_14xz0av" id="Flow_0g6buyv" sourceRef="Activity_1hp3s6q"></bpmn:sequenceFlow>
    <bpmn:serviceTask name="Create  customer" id="Activity_0kpronw">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_customer');
url_tb+'/api/customer/v1/customer/'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var order = S(execution.getVariable('subscription'));
var customerCategoryCode = order.prop("customerCategoryCode").value();
var holder = order.prop("holder");
var channel = order.prop("channel");
var individual = holder.prop("individual");
var adress = individual.prop("adress");
var contactInformation = individual.prop("contactInformation");
var seller = channel.prop("organisationSellerId").value();
var externalRef = order.prop("contractId").value();
var title = individual.prop("title").value();
var partnerId = individual.prop("partnerId").value();
var firstName = individual.prop("firstName").value();
var lastName = individual.prop("lastName").value();
var description = partnerId + "." + firstName  + "." + lastName;
var birthDate = individual.prop("birthDate").value();
var birthLocality = individual.prop("birthLocality").value();
var birthCountry = individual.prop("birthCountry").value();
var locality = adress.prop("locality").value();
var zipCode = adress.prop("zipCode").value();
var countryName = adress.prop("countryName").value();
var addressLine1 = adress.prop("addressLine1").value();
var addressLine2 = adress.prop("addressLine2").value();
var addressLine3 = adress.prop("addressLine3").value();
// Construire l'adresse du client
var adressCustomer = '{"locality":"' + locality + '",' +
                    '"postalCode":"' + zipCode + '",' +
                    '"countryName":"' + countryName + '",' +
                    '"addressLine1":"' + addressLine1 + '"';

if (addressLine2 !== null) {
    adressCustomer += ',"addressLine2":"' + addressLine2 + '"';
}

if (addressLine3 !== null) {
    adressCustomer += ',"addressLine3":"' + addressLine3 + '"';
}

adressCustomer += '}';

var email = contactInformation.prop("email").value();
var mobile = contactInformation.prop("mobile").value();
var phone = contactInformation.prop("phone").value();
// Construire les informations de contact du client
var contactInformationCustomer = '{"email":"' + email + '",' +
                                 '"mobile":"' + mobile + '"';

if (phone !== null) {
    contactInformationCustomer += ',"phone":"' + phone + '"';
}

contactInformationCustomer += '}';

// Récupérer la valeur de target
var target = order.prop("target").value();

// Initialiser le JSON commun
var json = '{"crmAccountType":"ACCT_CUST",' +
           '"customerCategory":"' + customerCategoryCode + '",' +
           '"code":"' + partnerId + '",' +
           '"externalRef":"' + externalRef + '",' +
           '"seller":"' + seller + '",' +
           '"description":"' + description + '",' +
           '"title":"' + title + '",' +
           '"firstName":"' + firstName + '",' +
           '"lastName":"' + lastName + '",' +
           '"birthDate":"' + birthDate + '",' +
           '"birthLocality":"' + birthLocality + '",';

if (order.hasProp('company') &amp;&amp; order.prop('company') !== null) {
  var company = order.prop('company').toString();
  json += '"company":' + company + ',';
}

// Vérifier si birthCountry est null ou non
if (birthCountry === null) {
    json += '"birthCountry":' + birthCountry + ',';
} else {
    json += '"birthCountry":"' + birthCountry + '",';
}

// Ajouter l'adresse et les informations de contact
json += '"address":' + adressCustomer + ',' +
        '"contactInformation":' + contactInformationCustomer + ',';

// Vérifier si target est null ou non
if (target === null) {
    // Si target est null, ajouter target sans guillemets
    json += '"target":' + target + '}';
} else {
    // Si target n'est pas null, ajouter target avec guillemets
    json += '"target":"' + target + '"}';
}

// Utilisation de l'objet JSON
json</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_1ksah7e">
              <camunda:script scriptFormat="JavaScript">print('create customer api');
var resp = connector.getVariable('response')
print('resp create customer' + resp);
var respHeader = connector.getVariable('headers')
//print(respHeader);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );


var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();

if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1so42at</bpmn:incoming>
      <bpmn:outgoing>Flow_1achamd</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow targetRef="Activity_004ixl2" id="Flow_1achamd" sourceRef="Activity_0kpronw"></bpmn:sequenceFlow>
    <bpmn:serviceTask name="Create Customer Account" id="Activity_004ixl2">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">
              <camunda:script scriptFormat="JavaScript">var url_tb= execution.getVariable('url_crm_customer');
url_tb+'/api/customer/v1/customerAccount/'</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="content-type">application/json</camunda:entry>
                <camunda:entry key="authorization">Bearer ${token}</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">var order = S(execution.getVariable('subscription'));
var customerCategoryCode = order.prop("customerCategoryCode").value();
var holder = order.prop("holder");
var channel = order.prop("channel");
var individual = holder.prop("individual");
var adress = individual.prop("adress");
var contactInformation = individual.prop("contactInformation");
var seller = channel.prop("organisationSellerId").value();
var externalRef = order.prop("contractId").value();
var title = individual.prop("title").value();
var partnerId = individual.prop("partnerId").value();
var firstName = individual.prop("firstName").value();
var lastName = individual.prop("lastName").value();
var description = partnerId + "." + firstName  + "." + lastName;
var birthDate = individual.prop("birthDate").value();
var birthLocality = individual.prop("birthLocality").value();
var birthCountry = individual.prop("birthCountry").value();
var locality = adress.prop("locality").value();
var zipCode = adress.prop("zipCode").value();
var countryName = adress.prop("countryName").value();
var addressLine1 = adress.prop("addressLine1").value();
var addressLine2 = adress.prop("addressLine2").value();
var addressLine3 = adress.prop("addressLine3").value();
var adressCustomer =
'{"locality":"' + locality + '"' +
',"postalCode":"' + zipCode + '"' +
',"countryName":"' + countryName + '"' +
',"addressLine1":"' + addressLine1 + '"' +
',"addressLine2":"' + addressLine2 + '"' +
',"addressLine3":"' + addressLine3 + '"}';
var email = contactInformation.prop("email").value();
var mobile = contactInformation.prop("mobile").value();
var phone = contactInformation.prop("phone").value();
var contactInformationCustomer =
'{"email":"' + email + '"' +
',"mobile":"' + mobile + '"' +
',"phone":"' + phone + '"}';

'{"crmAccountType":"ACCT_CA"' +
',"customerCategory":"' + customerCategoryCode + '"' +
',"code":"' + partnerId + '"' +
',"externalRef":"' + externalRef + '"' +
',"seller":"' + seller + '"' +
',"description":"' + description + '"' +
',"title":"' + title + '"' +
',"firstName":"' + firstName + '"' +
',"lastName":"' + lastName + '"' +
',"birthDate":"' + birthDate + '"' +
',"birthLocality":"' + birthLocality + '"' +
',"birthCountry":"' + birthCountry + '"' +
',"address":' + adressCustomer + ',' +
'"contactInformation":' + contactInformationCustomer + '}';</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="Output_2i4b8ic">
              <camunda:script scriptFormat="JavaScript">print('create customer account api');
var resp = connector.getVariable('response')
print('resp create customer account' + resp);
var respStatusCode = connector.getVariable('statusCode')
print(respStatusCode );

var execution = connector.getParentVariableScope();
var activityId = execution.getCurrentActivityId();


if ( respStatusCode == 200 || respStatusCode == 201 || respStatusCode == 202 || respStatusCode == 204) {
 print('no error');

/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);}
/* end solving incident*/

execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"SUCCESS")
execution.setVariable('responseMessage',response)
} else {
execution.setVariable('httpCode',respStatusCode);
execution.setVariable('state',"FAIL")
execution.setVariable('responseMessage',response);
/*solve incident if exist*/
print('incientId : '+execution.getVariable('incidentId'));
if (execution.getVariable('incidentId')!=null)
{
execution.getProcessEngineServices().getRuntimeService().createIncidentQuery().incidentId(execution.getVariable('incidentId')).singleResult().resolve();
execution.setVariable('incidentId',null);
}
/* end solving incident*/
/* create incident*/

var IncidentEntity  = Java.type('org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity');
	var IncidentContext = Java.type('org.camunda.bpm.engine.impl.incident.IncidentContext');
	var context = new IncidentContext();
  var parentScope = connector.getParentVariableScope()
	context.setActivityId(parentScope.getCurrentActivityId());
	context.setExecutionId(parentScope.getProcessInstanceId());
	context.setProcessDefinitionId(parentScope.getProcessDefinitionId());
	var newIncident  = IncidentEntity.createAndInsertIncident("Api Fail", context, response);
	newIncident.getId()
execution.setVariable('incidentId',newIncident.getId());
print('incientId'+newIncident.getId());
/*end create incident*/
 throw new org.camunda.bpm.engine.delegate.BpmnError('CheckError',activityId);
}</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1achamd</bpmn:incoming>
      <bpmn:outgoing>Flow_0rpo45c</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow targetRef="Activity_02x5cg0" id="Flow_0rpo45c" sourceRef="Activity_004ixl2"></bpmn:sequenceFlow>
    <bpmn:textAnnotation id="TextAnnotation_0hklpbu">
      <bpmn:text>Exisite-il des discounts à appliquer?</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:textAnnotation id="TextAnnotation_12ftmha">
      <bpmn:text>Exisite-il des discounts à appliquer?</bpmn:text>
    </bpmn:textAnnotation>
    <bpmn:association targetRef="TextAnnotation_12ftmha" id="Association_1gx1rgp" sourceRef="Gateway_0n30zxi"></bpmn:association>
  </bpmn:process>
  <bpmn:message name="startSubscriptionMessageTSBV2" id="Message_14f2kp4"></bpmn:message>
  <bpmn:message name="planifProcessReturn" id="Message_0bht3g0"></bpmn:message>
  <bpmn:error name="Error_27erg8r" id="Error_0a8hc3i"></bpmn:error>
  <bpmn:message name="installProcessReturn" id="Message_1g82wb4"></bpmn:message>
  <bpmn:message name="reassignmentAndCommentTicketCodeCloture47MessageQa" id="Message_16vz4vj"></bpmn:message>
  <bpmn:message name="reassignmentAndCommentTicketMessage" id="Message_12cd20s"></bpmn:message>
  <bpmn:error name="Error_1gcbv5k" id="Error_1nhw7ru"></bpmn:error>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane bpmnElement="CreateCustomer" id="BPMNPlane_1">
      <bpmndi:BPMNEdge bpmnElement="Flow_1achamd" id="Flow_1achamd_di">
        <di:waypoint x="330" y="220"></di:waypoint>
        <di:waypoint x="390" y="220"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="Flow_0g6buyv" id="Flow_0g6buyv_di">
        <di:waypoint x="1320" y="220"></di:waypoint>
        <di:waypoint x="1392" y="220"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="Flow_0xjiqmj" id="Flow_0xjiqmj_di">
        <di:waypoint x="1030" y="220"></di:waypoint>
        <di:waypoint x="1090" y="220"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="Flow_1so42at" id="Flow_1so42at_di">
        <di:waypoint x="158" y="220"></di:waypoint>
        <di:waypoint x="230" y="220"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="Flow_1p9as48" id="BPMNEdge_0btiimg">
        <di:waypoint x="725" y="220"></di:waypoint>
        <di:waypoint x="770" y="220"></di:waypoint>
        <bpmndi:BPMNLabel>
          <dc:Bounds x="740" width="15" y="202" height="14"></dc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="Flow_0c9m57l" id="BPMNEdge_0bxmrc9">
        <di:waypoint x="1190" y="220"></di:waypoint>
        <di:waypoint x="1220" y="220"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="Flow_1np13kb" id="BPMNEdge_1a0y2ny">
        <di:waypoint x="700" y="245"></di:waypoint>
        <di:waypoint x="700" y="303"></di:waypoint>
        <di:waypoint x="980" y="303"></di:waypoint>
        <di:waypoint x="980" y="260"></di:waypoint>
        <bpmndi:BPMNLabel>
          <dc:Bounds x="831" width="19" y="285" height="14"></dc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="Flow_09j70z3" id="BPMNEdge_021vjck">
        <di:waypoint x="870" y="220"></di:waypoint>
        <di:waypoint x="930" y="220"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="Flow_015ieiu" id="BPMNEdge_0pnp796">
        <di:waypoint x="630" y="220"></di:waypoint>
        <di:waypoint x="675" y="220"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="Flow_0rpo45c" id="BPMNEdge_0apoolm">
        <di:waypoint x="490" y="220"></di:waypoint>
        <di:waypoint x="530" y="220"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape bpmnElement="Event_0offp10" id="Event_0offp10_di">
        <dc:Bounds x="122" width="36" y="202" height="36"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="Event_14xz0av" id="Event_14xz0av_di">
        <dc:Bounds x="1392" width="36" y="202" height="36"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="Activity_02x5cg0" id="BPMNShape_0oh8k20">
        <dc:Bounds x="530" width="100" y="180" height="80"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="Activity_1nklpa4" id="BPMNShape_1bsxryn">
        <dc:Bounds x="1090" width="100" y="180" height="80"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="Activity_1igc66e" id="BPMNShape_0e8mqyr">
        <dc:Bounds x="770" width="100" y="180" height="80"></dc:Bounds>
        <bpmndi:BPMNLabel></bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="Gateway_0n30zxi" id="BPMNShape_19mkcgc" isMarkerVisible="true">
        <dc:Bounds x="675" width="50" y="195" height="50"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="Activity_004ixl2" id="BPMNShape_03xis2h">
        <dc:Bounds x="390" width="100" y="180" height="80"></dc:Bounds>
        <bpmndi:BPMNLabel></bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape isExpanded="true" bpmnElement="SubProcess_085n162" id="SubProcess_085n162_di">
        <dc:Bounds x="390" width="740" y="460" height="650"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge bpmnElement="Flow_0fkz23b" id="Flow_0fkz23b_di">
        <di:waypoint x="645" y="633"></di:waypoint>
        <di:waypoint x="710" y="633"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="Flow_0uqem5l" id="Flow_0uqem5l_di">
        <di:waypoint x="541" y="766"></di:waypoint>
        <di:waypoint x="541" y="633"></di:waypoint>
        <di:waypoint x="595" y="633"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="Flow_1h2qv5l" id="Flow_1h2qv5l_di">
        <di:waypoint x="896" y="633"></di:waypoint>
        <di:waypoint x="960" y="633"></di:waypoint>
        <di:waypoint x="960" y="720"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="Flow_0660sd8" id="Flow_0660sd8_di">
        <di:waypoint x="810" y="633"></di:waypoint>
        <di:waypoint x="860" y="633"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="SequenceFlow_02noohs" id="SequenceFlow_02noohs_di">
        <di:waypoint x="459" y="791"></di:waypoint>
        <di:waypoint x="516" y="791"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="SequenceFlow_1kqhl73" id="SequenceFlow_1kqhl73_di">
        <di:waypoint x="810" y="760"></di:waypoint>
        <di:waypoint x="910" y="760"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="SequenceFlow_0jg7ptp" id="SequenceFlow_0jg7ptp_di">
        <di:waypoint x="1010" y="760"></di:waypoint>
        <di:waypoint x="1063" y="760"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="SequenceFlow_02hvc3v" id="SequenceFlow_02hvc3v_di">
        <di:waypoint x="620" y="658"></di:waypoint>
        <di:waypoint x="620" y="760"></di:waypoint>
        <di:waypoint x="710" y="760"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="SequenceFlow_0naabt8" id="SequenceFlow_0naabt8_di">
        <di:waypoint x="541" y="816"></di:waypoint>
        <di:waypoint x="541" y="906"></di:waypoint>
        <di:waypoint x="641" y="906"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="SequenceFlow_1oka6jq" id="SequenceFlow_1oka6jq_di">
        <di:waypoint x="741" y="906"></di:waypoint>
        <di:waypoint x="960" y="906"></di:waypoint>
        <di:waypoint x="960" y="800"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape bpmnElement="UserTask_0pdqhnx" id="UserTask_0pdqhnx_di">
        <dc:Bounds x="710" width="100" y="720" height="80"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="EndEvent_19wiclb" id="EndEvent_19wiclb_di">
        <dc:Bounds x="1063" width="36" y="742" height="36"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="ScriptTask_1k0uuxl" id="ScriptTask_1k0uuxl_di">
        <dc:Bounds x="910" width="100" y="720" height="80"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="ExclusiveGateway_0fofy8h" id="ExclusiveGateway_0fofy8h_di" isMarkerVisible="true">
        <dc:Bounds x="516" width="50" y="766" height="50"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="Task_1atrp8f" id="ServiceTask_1sp384m_di">
        <dc:Bounds x="641" width="100" y="866" height="80"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="StartEvent_03idx0z" id="Event_1fqsbf4_di">
        <dc:Bounds x="423" width="36" y="773" height="36"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="Activity_14qqn62" id="Activity_0aivee9_di">
        <dc:Bounds x="710" width="100" y="593" height="80"></dc:Bounds>
        <bpmndi:BPMNLabel></bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bioc:fill="#bbdefb" bpmnElement="Event_0bcs6uq" color:border-color="#0d4372" id="BPMNShape_1lvk58a" bioc:stroke="#0d4372" color:background-color="#bbdefb">
        <dc:Bounds x="860" width="36" y="615" height="36"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="Gateway_0pvvg6p" id="Gateway_0pvvg6p_di" isMarkerVisible="true">
        <dc:Bounds x="595" width="50" y="608" height="50"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="TextAnnotation_0gtrmko" id="TextAnnotation_0gtrmko_di">
        <dc:Bounds x="870" width="180" y="553" height="26"></dc:Bounds>
        <bpmndi:BPMNLabel></bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge bpmnElement="Association_13htmfx" id="Association_13htmfx_di">
        <di:waypoint x="890" y="620"></di:waypoint>
        <di:waypoint x="950" y="579"></di:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape bpmnElement="Activity_03s5e1t" id="Activity_1eqbagp_di">
        <dc:Bounds x="930" width="100" y="180" height="80"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="Activity_1hp3s6q" id="Activity_02oq7q4_di">
        <dc:Bounds x="1220" width="100" y="180" height="80"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="Activity_0kpronw" id="BPMNShape_04pk5yj">
        <dc:Bounds x="230" width="100" y="180" height="80"></dc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="TextAnnotation_0hklpbu" id="TextAnnotation_0hklpbu_di">
        <dc:Bounds x="750" width="180" y="332" height="55"></dc:Bounds>
        <bpmndi:BPMNLabel></bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="TextAnnotation_12ftmha" id="BPMNShape_11eprzn">
        <dc:Bounds x="670" width="180" y="85" height="55"></dc:Bounds>
        <bpmndi:BPMNLabel></bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge bpmnElement="Association_1gx1rgp" id="BPMNEdge_1152jck">
        <di:waypoint x="704" y="199"></di:waypoint>
        <di:waypoint x="713" y="140"></di:waypoint>
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
